syntax = "proto3";

package meshtrade.iam.api_user.v1;

import "buf/validate/validate.proto";

option go_package = "github.com/meshtrade/api/go/iam/api_user/v1;api_userv1";
option java_package = "co.meshtrade.api.iam.api_user.v1";

/*
   Represents an API user for automated authentication and authorization.

   API users enable programmatic access to the Mesh API through API key
   authentication. Each API user belongs to a specific group and has
   defined roles that determine their permissions within that group.
*/
message APIUser {
  /*
     The unique, immutable, and canonical name of the api user resource in the format api_users/{api_user_id}.
     The {api_user_id} is a system-generated unique identifier (e.g., UUID) that will never change.
     System set on creation.
  */
  string name = 1;

  /*
     The resource name of the group that owns this api user in the format groups/{ulid}.
     This field establishes the ownership link.
     NOTE: owner must be set to executing group context.
     Required on creation.
  */
  string owner = 2 [(buf.validate.field) = {
    string: {
      min_len: 1
      pattern: "^groups/[a-zA-Z0-9]([a-zA-Z0-9_-]*[a-zA-Z0-9])?$"
    }
    cel: {
      id: "owner.required"
      message: "owner is required and must be in format groups/{group_id}"
      expression: "size(this) > 0"
    }
    cel: {
      id: "owner.format"
      message: "owner must be in format groups/{group_id} where group_id contains only alphanumeric characters, underscores, and hyphens"
      expression: "this.matches('^groups/[a-zA-Z0-9]([a-zA-Z0-9_-]*[a-zA-Z0-9])?$')"
    }
  }];

  /*
     List of resource names of groups that have ownership access to this api user in the format groups/{group_id}.
     This field supports multi-group ownership scenarios.
     System set on creation.
  */
  repeated string owners = 3;

  /*
     A non-unique, user-provided name for the api key, used for display purposes.
     Required on creation.
  */
  string display_name = 4 [(buf.validate.field) = {
    string: {
      min_len: 1
      max_len: 255
    }
    cel: {
      id: "display_name.required"
      message: "display name is required and must be between 1 and 255 characters"
      expression: "size(this) > 0 && size(this) <= 255"
    }
  }];

  /*
     The current state of the API user (active or inactive).
     System set on creation.
  */
  meshtrade.iam.api_user.v1.APIUserState state = 5 [(buf.validate.field) = {
    enum: {defined_only: true}
    cel: {
      id: "state.valid"
      message: "state must be a valid APIUserState if specified"
      expression: "int(this) == 0 || (int(this) >= 1 && int(this) <= 2)"
    }
  }];

  /*
     Roles is a list of the standard roles assigned to this api user
     prepended by the name of the group in which they have been assigned that role.
     e.g. groups/{ulid}/{role}, where role is one of the rolev1.Role enum
  */
  repeated string roles = 6;

  /*
     The plaintext API key for the API user.
     This field is only populated on the entity the first time it is returned after creation - it is NOT stored.
     Populated once by system on creation.
  */
  string api_key = 7;
}

enum APIUserState {
  /*
     Unknown or not specified.
     This is a default value to prevent accidental assignment and should not be used.
  */
  API_USER_STATE_UNSPECIFIED = 0;

  /*
     API user is active and associated api keys can be used.
  */
  API_USER_STATE_ACTIVE = 1;

  /*
     API user is inactive and associated api keys cannot be used.
  */
  API_USER_STATE_INACTIVE = 2;
}

enum APIUserAction {
  /*
     Unknown or not specified.
     This is a default value to prevent accidental assignment and should not be used.
  */
  API_USER_ACTION_UNSPECIFIED = 0;

  /*
     Activate an API user.
  */
  API_USER_ACTION_ACTIVATE = 1;

  /*
     Deactivate an API user.
  */
  API_USER_ACTION_DEACTIVATE = 2;

  /*
     Create an API user.
  */
  API_USER_ACTION_CREATE = 3;

  /*
     Update an API user.
  */
  API_USER_ACTION_UPDATE = 4;
}
