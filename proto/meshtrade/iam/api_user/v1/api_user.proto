syntax = "proto3";

package meshtrade.iam.api_user.v1;

import "buf/validate/validate.proto";

option go_package = "github.com/meshtrade/api/go/iam/api_user/v1;api_user_v1";
option java_package = "co.meshtrade.api.iam.api_user.v1";

/*
   Represents an API user for automated authentication and authorization.

   API users enable programmatic access to the Mesh API through API key
   authentication. Each API user belongs to a specific group and has
   defined roles that determine their permissions within that group.
*/
message APIUser {
  /*
     The unique resource name for the API user.
     Format: api_users/{ULIDv2}.
     This field is system-generated and immutable upon creation.
     Any value provided on creation is ignored.
  */
  string name = 1 [(buf.validate.field) = {
    cel: {
      id: "name.format.optional"
      message: "name must be empty or in the format api_users/{ULIDv2}"
      expression: "size(this) == 0 || this.matches('^api_users/[0123456789ABCDEFGHJKMNPQRSTVWXYZ]{26}$')"
    }
  }];

  /*
     The resource name of the parent group that owns this API user.
     This field is required on creation and establishes the direct ownership link.
     Format: groups/{ULIDv2}.
  */
  string owner = 2 [(buf.validate.field) = {
    required: true
    string: {
      len: 33
      pattern: "^groups/[0123456789ABCDEFGHJKMNPQRSTVWXYZ]{26}$"
    }
  }];

  /*
     A non-unique, user-provided name for the API user, used for display purposes.
     Required on creation.
  */
  string display_name = 3 [(buf.validate.field) = {
    required: true
    string: {
      min_len: 1
      max_len: 255
    }
    cel: {
      id: "display_name.required"
      message: "display name is required and must be between 1 and 255 characters"
      expression: "size(this) > 0 && size(this) <= 255"
    }
  }];

  /*
     The current state of the API user (active or inactive).
     System set on creation to default value of inactive.
  */
  meshtrade.iam.api_user.v1.APIUserState state = 4 [(buf.validate.field) = {
    enum: {defined_only: true}
    cel: {
      id: "state.valid"
      message: "state must be a valid APIUserState if specified"
      expression: "int(this) == 0 || (int(this) >= 1 && int(this) <= 2)"
    }
  }];

  /*
     Roles is a list of the standard roles assigned to this API user,
     prepended by the name of the group in which they have been assigned that role.
     e.g. groups/{ULIDv2}/roles/{role}, where role is a value of the meshtrade.iam.role.v1.Role enum.
  */
  repeated string roles = 5 [(buf.validate.field) = {
    required: true
    repeated: {
      items: {
        string: {
          min_len: 47
          max_len: 48
          pattern: "^groups/[0123456789ABCDEFGHJKMNPQRSTVWXYZ]{26}/roles/[1-9][0-9]{6,7}$"
        }
      }
    }
  }];

  /*
     The plaintext API key for the API user.
     This field is only populated on the entity the first time it is returned after creation - it is NOT stored.
     Populated once by system on creation.
  */
  string api_key = 6;
}

enum APIUserState {
  /*
     Unknown or not specified.
     This is a default value to prevent accidental assignment and should not be used.
  */
  API_USER_STATE_UNSPECIFIED = 0;

  /*
     API user is active and associated API keys can be used.
  */
  API_USER_STATE_ACTIVE = 1;

  /*
     API user is inactive and associated API keys cannot be used.
  */
  API_USER_STATE_INACTIVE = 2;
}

enum APIUserAction {
  /*
     Unknown or not specified.
     This is a default value to prevent accidental assignment and should not be used.
  */
  API_USER_ACTION_UNSPECIFIED = 0;

  /*
     Activate an API user.
  */
  API_USER_ACTION_ACTIVATE = 1;

  /*
     Deactivate an API user.
  */
  API_USER_ACTION_DEACTIVATE = 2;

  /*
     Create an API user.
  */
  API_USER_ACTION_CREATE = 3;

  /*
     Update an API user.
  */
  API_USER_ACTION_UPDATE = 4;
}
