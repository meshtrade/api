syntax = "proto3";

package meshtrade.reporting.account_report.v1;

import "buf/validate/validate.proto";
import "google/protobuf/timestamp.proto";
import "meshtrade/iam/role/v1/role.proto";
import "meshtrade/option/v1/method_type.proto";
import "meshtrade/reporting/account_report/v1/account_report.proto";

option go_package = "github.com/meshtrade/api/go/reporting/account_report/v1;account_reportv1";
option java_package = "co.meshtrade.api.reporting.account_report.v1";

/*
   AccountReportService manages account report generation and export.

   This service allows clients to retrieve structured reports
   and download them as Excel files. Reports are generated for a
   specified account over a given time range and denominated in
   a selected reporting currency.

   All operations require Reporting domain permissions and operate within
   the authenticated group context.
*/
service AccountReportService {
  /*
     Retrieves a structured report for a specific account and time range.

     Parameters:
     - account_num: Unique account identifier
     - from: Start timestamp for the report period
     - to: End timestamp for the report period
     - reporting_currency_token: Token in which report values are denominated

     Returns:
     - GetAccountReportRequest: Structured income report with earnings breakdown
  */
  rpc GetAccountReport(GetAccountReportRequest) returns (reporting.account_report.v1.AccountReport) {
    option (meshtrade.option.v1.method_type) = METHOD_TYPE_READ;
    option (meshtrade.iam.role.v1.roles) = {
      roles: [
        ROLE_REPORT_ADMIN,
        ROLE_REPORT_VIEWER
      ]
    };
  }

  /*
     Exports an income report to Excel format for download.

     Parameters:
     - account_num: Unique account identifier
     - from: Start timestamp for the report period
     - to: End timestamp for the report period
     - reporting_currency_token: Token in which report values are denominated

     Returns:
     - GetExcelAccountReportRequest: Base64-encoded Excel file containing the report
  */
  rpc GetExcelAccountReport(GetExcelAccountReportRequest) returns (GetExcelAccountReportResponse) {
    option (meshtrade.option.v1.method_type) = METHOD_TYPE_READ;
    option (meshtrade.iam.role.v1.roles) = {
      roles: [
        ROLE_REPORT_ADMIN,
        ROLE_REPORT_VIEWER
      ]
    };
  }
}

message GetAccountReportRequest {
  /*
     Mesh account number for which the income report is requested.
  */
  string account_number = 1;

  /*
     Start of the reporting period (inclusive).
  */
  google.protobuf.Timestamp from = 2;

  /*
     End of the reporting period (inclusive).
  */
  google.protobuf.Timestamp to = 3;
}

message GetExcelAccountReportRequest {
  /*
     Mesh account number for which the income report is requested.
  */
  string account_number = 1 [(buf.validate.field) = {
    string: {
      min_len: 1
      pattern: "^[0-9]{1,}$"
    }
    cel: {
      id: "account_number.required"
      message: "account_number is required"
      expression: "this.matches('^[0-9]{1,}$')"
    }
  }];

  /*
     Start of the reporting period (inclusive).
  */
  google.protobuf.Timestamp from = 2 [(buf.validate.field).cel = {
    id: "from.required"
    message: "'from' timestamp is required"
    expression: "this != null"
  }];

  /*
     End of the reporting period (inclusive).
  */
  google.protobuf.Timestamp to = 3 [(buf.validate.field).cel = {
    id: "to.required"
    message: "'to' timestamp is required"
    expression: "this != null"
  }];
}

message GetExcelAccountReportResponse {
  /*
     Base64-encoded binary content of the Excel report file.
  */
  string excel_base64 = 1;
}
