syntax = "proto3";

package api.instrument.fee;

option go_package = "github.com/meshtrade/api/go/instrument/fee";

import "api/proto/instrument/fee/fee.proto";
import "api/proto/ledger/amount.proto";
import "api/proto/search/criterion.proto";
import "api/proto/search/query.proto";

/*
Service is the Fee Service.
*/
service Service {
  rpc Get(GetRequest) returns (GetResponse);
  rpc List(ListRequest) returns (ListResponse);
  rpc CalculateMintingFees(CalculateMintingFeesRequest) returns (CalculateMintingFeesResponse);
  rpc CalculateBurningFees(CalculateBurningFeesRequest) returns (CalculateBurningFeesResponse);
  rpc CalculateLifecycleFees(CalculateLifecycleFeesRequest) returns (CalculateLifecycleFeesResponse);
  rpc FullUpdate(FullUpdateRequest) returns (FullUpdateResponse);
}

/*
GetRequest is the Get method request on the Fee Service.
*/
message GetRequest {
  /*
  Criteria is the search criteria that specifies which Fee to retrieve.
  */
  repeated api.search.Criterion criteria = 1;
}

/*
GetResponse is the Get method response on the Fee Service.
*/
message GetResponse {
  /*
  Fee is the Fee that was retrieved.
  */
  api.instrument.fee.Fee fee = 1;
}

/*
ListRequest is the List method request on the Fee Service.
*/
message ListRequest {
  /*
  Criteria is the search criteria that specifies which fees to retrieve.
  */
  repeated api.search.Criterion criteria = 1;

    /*
  Query controls pagination of the fees.
  */
  api.search.Query query = 2;
}

/*
ListResponse is the List method response on the Fee Service.
*/
message ListResponse {
  /*
  Fees are the list of fees that were retrieved.
  */
  repeated api.instrument.fee.Fee fees = 1;

  /*
  Total is the total number of fees that match the given criteria.
  */
  int64 total = 2;  
}

/*
CalculateMintingFeesRequest is the CalculateMintingFees method request on the Fee Service.
*/
message CalculateMintingFeesRequest {
  /*
  Amount is the mint Amount for which fees are calculated.
  */
  api.ledger.Amount Amount = 1;
}

/*
CalculateMintingFeesResponse is the CalculateMintingFees method response on the Fee Service.
*/
message CalculateMintingFeesResponse {
  /*
  Fees are the fees calculated for the requested mint amount.
  */
  repeated api.instrument.fee.Fee Fees = 1;
}

/*
CalculateBurningFeesRequest is the CalculateBurningFees method request on the Fee Service.
*/
message CalculateBurningFeesRequest {
  /*
  Amount is the burn Amount for which fees are calculated.
  */
  api.ledger.Amount Amount = 1;
}

/*
CalculateBurningFeesResponse is the CalculateBurningFees method response on the Fee Service.
*/
message CalculateBurningFeesResponse {
  /*
  Fees are the fees calculated for the requested burn amount.
  */
  repeated api.instrument.fee.Fee Fees = 1;
}

/*
CalculateLifecycleFeesRequest is the CalculateLifecycleFees method request on the Fee Service.
*/
message CalculateLifecycleFeesRequest {
  /*
  InstrumentName is the name of the instrument for which lifecycle fees are calculated.
  */
  string instrumentName = 1;
}

/*
CalculateLifecycleFeesResponse is the CalculateLifecycleFees method response on the Fee Service.
*/
message CalculateLifecycleFeesResponse {
  /*
  Fees are the fees calculated for the requested instrument.
  */
  repeated api.instrument.fee.Fee Fees = 1;
}

/*
FullUpdateRequest is the empty FullUpdate method request on the Fee Service.
*/
message FullUpdateRequest {}

/*
FullUpdateResponse is the empty FullUpdate method response on the Fee Service.
*/
message FullUpdateResponse {}
