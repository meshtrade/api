name: Deploy Python SDK to PyPI via Trusted Publisher

# Triggers on tags like py/v1.0.0, py/v2.1.3, etc.  
# Uses PyPI Trusted Publishing (OIDC) - no tokens required!
on:
  push:
    tags:
      - 'py/v*.*.*'

  # Allows manual workflow dispatch
  workflow_dispatch:

permissions:
  contents: write  # Need write permission to commit version changes back  
  id-token: write  # Required for PyPI trusted publishing with OIDC

jobs:
  pypi-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            .venv
          key: ${{ runner.os }}-python-deps-${{ hashFiles('pyproject.toml', 'requirements-dev.txt') }}
          restore-keys: |
            ${{ runner.os }}-python-deps-

      - name: Setup Python virtual environment
        run: |
          echo "üêç Setting up Python virtual environment..."
          python -m venv .venv
          source .venv/bin/activate
          echo "VIRTUAL_ENV=$VIRTUAL_ENV" >> $GITHUB_ENV
          echo "$VIRTUAL_ENV/bin" >> $GITHUB_PATH

      - name: Install Python dependencies
        run: |
          echo "üì¶ Installing Python dependencies..."
          source .venv/bin/activate
          pip install -e .[dev] --quiet

      - name: Setup buf CLI (required for protobuf generation)
        uses: bufbuild/buf-setup-action@v1
        with:
          github_token: ${{ github.token }}

      - name: Generate Python code from protobuf
        run: |
          source .venv/bin/activate
          ./dev/tool.sh generate --targets=python

      - name: Run Python tests (early validation)
        run: |
          echo "üß™ Running Python tests..."
          source .venv/bin/activate
          export PYTHONPATH="./python/src:./python/tests"
          pytest python/tests --quiet

      - name: Run Python linting (early validation)
        run: |
          echo "üöÄ Running Python linting and formatting..."
          source .venv/bin/activate
          ruff check . --fix --quiet
          ruff format . --quiet

      - name: Extract version from tag
        id: version
        run: |
          # Extract version from py/v*.*.* tag (e.g., py/v1.2.3 -> 1.2.3)
          if [[ "${{ github.event_name }}" == "push" ]]; then
            VERSION=$(echo "${{ github.ref_name }}" | sed 's/^py\/v//')
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "Extracted version: $VERSION"
          else
            echo "Manual workflow dispatch - version must be set manually"
            exit 1
          fi

      - name: Update pyproject.toml version
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          echo "Setting Python package version to: $VERSION"
          # Update pyproject.toml with the extracted version
          if [[ "$OSTYPE" == "darwin"* ]]; then
            sed -i '' "s/^version = \".*\"/version = \"$VERSION\"/" pyproject.toml
          else
            sed -i "s/^version = \".*\"/version = \"$VERSION\"/" pyproject.toml
          fi
          echo "Updated pyproject.toml version:"
          grep '^version = ' pyproject.toml

      # TEMPORARILY SKIP commit-back to test PyPI publishing
      # - name: Commit version changes
      #   run: |
      #     # Will re-enable after confirming PyPI publishing works

      - name: Build Python distribution packages
        run: |
          echo "üì¶ Building Python distribution packages..."
          source .venv/bin/activate
          # Clean ALL previous builds
          echo "  üßπ Cleaning previous builds..."
          rm -rf ./dist ./build ./python/dist ./python/build ./python/src/*.egg-info ./src/*.egg-info *.egg-info
          
          # Build source distribution and wheel
          echo "  üî® Creating distribution packages..."
          python -m build --outdir ./python/dist
          
          echo "  ‚úÖ Distribution packages created:"
          ls -la ./python/dist/

      - name: Publish to PyPI via Trusted Publisher (OIDC)
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: python/dist/
          verbose: true
          print-hash: true
        # No username/password needed - uses OIDC trusted publishing automatically

      - name: Success notification
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          echo ""
          echo "############################################################"
          echo "#                                                          #"
          echo "#  üéâ Python SDK v$VERSION published via Trusted Publisher! üêç #"
          echo "#                                                          #"
          echo "#  Package: meshtrade==$VERSION                           #"
          echo "#  Registry: https://pypi.org/project/meshtrade/          #"
          echo "#                                                          #"
          echo "############################################################"