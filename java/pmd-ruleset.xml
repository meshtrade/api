<?xml version="1.0"?>
<!--
    PMD Ruleset configuration for Mesh API Java SDK

    Custom ruleset based on PMD best practices with project-specific tuning.
    Focuses on code quality, maintainability, and performance.

    See: https://pmd.github.io/latest/pmd_rules_java.html
-->
<ruleset name="Mesh API Java SDK Rules"
    xmlns="http://pmd.sourceforge.net/ruleset/2.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://pmd.sourceforge.net/ruleset/2.0.0 https://pmd.sourceforge.io/ruleset_2_0_0.xsd">

    <description>PMD rules for Mesh API Java SDK</description>

    <!-- Exclude generated protobuf code -->
    <exclude-pattern>.*/co/meshtrade/api/.*Grpc\.java</exclude-pattern>
    <exclude-pattern>.*/co/meshtrade/api/.*OuterClass\.java</exclude-pattern>
    <exclude-pattern>.*/co/meshtrade/api/.*Proto\.java</exclude-pattern>
    <exclude-pattern>.*/grpc/.*Stub\.java</exclude-pattern>

    <!-- ===== BEST PRACTICES ===== -->
    <rule ref="category/java/bestpractices.xml">
        <!-- Allow test classes to access private fields for testing -->
        <exclude name="AccessorMethodGeneration"/>

        <!-- Allow JUnit assertions without messages in simple cases -->
        <exclude name="JUnitAssertionsShouldIncludeMessage"/>

        <!-- Allow multiple test classes in one file for related tests -->
        <exclude name="JUnitTestsShouldIncludeAssert"/>
    </rule>

    <!-- ===== CODE STYLE ===== -->
    <rule ref="category/java/codestyle.xml">
        <!-- Variable naming handled by Checkstyle -->
        <exclude name="LongVariable"/>
        <exclude name="ShortVariable"/>
        <exclude name="ShortMethodName"/>

        <!-- Allow default package for generated code -->
        <exclude name="CommentDefaultAccessModifier"/>

        <!-- CallSuperInConstructor not always needed -->
        <exclude name="CallSuperInConstructor"/>

        <!-- OnlyOneReturn can make code less readable -->
        <exclude name="OnlyOneReturn"/>

        <!-- At least one constructor is recommended but not mandatory -->
        <exclude name="AtLeastOneConstructor"/>
    </rule>

    <!-- Custom rule: Class naming convention -->
    <rule ref="category/java/codestyle.xml/ClassNamingConventions">
        <properties>
            <property name="utilityClassPattern" value="[A-Z][a-zA-Z0-9]+(Utils|Helper|Constants|Converter)"/>
        </properties>
    </rule>

    <!-- ===== DESIGN ===== -->
    <rule ref="category/java/design.xml">
        <!-- Allow high complexity in test utilities -->
        <exclude name="CyclomaticComplexity"/>
        <exclude name="NPathComplexity"/>
        <exclude name="ExcessiveMethodLength"/>
        <exclude name="ExcessiveClassLength"/>
        <exclude name="TooManyMethods"/>

        <!-- Data classes can have many fields -->
        <exclude name="TooManyFields"/>
        <exclude name="DataClass"/>

        <!-- Law of Demeter can be too strict -->
        <exclude name="LawOfDemeter"/>

        <!-- Immutable field can be good practice -->
        <exclude name="ImmutableField"/>

        <!-- LoosePackageCoupling can be too restrictive -->
        <exclude name="LoosePackageCoupling"/>
    </rule>

    <!-- Custom complexity rules with higher thresholds for utility classes -->
    <rule ref="category/java/design.xml/CyclomaticComplexity">
        <properties>
            <property name="classReportLevel" value="80"/>
            <property name="methodReportLevel" value="15"/>
        </properties>
    </rule>

    <rule ref="category/java/design.xml/NPathComplexity">
        <properties>
            <property name="reportLevel" value="300"/>
        </properties>
    </rule>

    <rule ref="category/java/design.xml/ExcessiveMethodLength">
        <properties>
            <property name="minimum" value="150"/>
        </properties>
    </rule>

    <rule ref="category/java/design.xml/TooManyMethods">
        <properties>
            <property name="maxmethods" value="25"/>
        </properties>
    </rule>

    <!-- ===== DOCUMENTATION ===== -->
    <rule ref="category/java/documentation.xml">
        <!-- JavaDoc handled by Checkstyle -->
        <exclude name="CommentRequired"/>
        <exclude name="CommentSize"/>
    </rule>

    <!-- ===== ERROR PRONE ===== -->
    <rule ref="category/java/errorprone.xml">
        <!-- Allow null assignment for initialization -->
        <exclude name="NullAssignment"/>

        <!-- Bean member names are fine -->
        <exclude name="BeanMembersShouldSerialize"/>

        <!-- Data flow anomaly can have false positives -->
        <exclude name="DataflowAnomalyAnalysis"/>

        <!-- Test methods don't need to be static -->
        <exclude name="TestClassWithoutTestCases"/>
    </rule>

    <!-- ===== MULTITHREADING ===== -->
    <rule ref="category/java/multithreading.xml">
        <!-- Double-checked locking is used correctly in our code -->
        <exclude name="DoubleCheckedLocking"/>
    </rule>

    <!-- ===== PERFORMANCE ===== -->
    <rule ref="category/java/performance.xml">
        <!-- String instantiation warnings handled by SpotBugs -->
        <exclude name="RedundantFieldInitializer"/>
    </rule>

    <!-- ===== SECURITY ===== -->
    <rule ref="category/java/security.xml"/>

</ruleset>
