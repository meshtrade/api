// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: meshtrade/reporting/account_report/v1/fee_entry.proto
// Protobuf Java Version: 4.31.1

package meshtrade.reporting.account_report.v1;

@com.google.protobuf.Generated
public final class FeeEntryOuterClass {
  private FeeEntryOuterClass() {}
  static {
    com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
      com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
      /* major= */ 4,
      /* minor= */ 31,
      /* patch= */ 1,
      /* suffix= */ "",
      FeeEntryOuterClass.class.getName());
  }
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface FeeEntryOrBuilder extends
      // @@protoc_insertion_point(interface_extends:meshtrade.reporting.account_report.v1.FeeEntry)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     *
     * The date and time of the transaction.
     * Using google.protobuf.Timestamp is the standard way to handle timestamps.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp transaction_date = 1 [json_name = "transactionDate"];</code>
     * @return Whether the transactionDate field is set.
     */
    boolean hasTransactionDate();
    /**
     * <pre>
     *
     * The date and time of the transaction.
     * Using google.protobuf.Timestamp is the standard way to handle timestamps.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp transaction_date = 1 [json_name = "transactionDate"];</code>
     * @return The transactionDate.
     */
    com.google.protobuf.Timestamp getTransactionDate();
    /**
     * <pre>
     *
     * The date and time of the transaction.
     * Using google.protobuf.Timestamp is the standard way to handle timestamps.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp transaction_date = 1 [json_name = "transactionDate"];</code>
     */
    com.google.protobuf.TimestampOrBuilder getTransactionDateOrBuilder();

    /**
     * <pre>
     *
     * The unique identifier for the transaction.
     * </pre>
     *
     * <code>string transaction_id = 2 [json_name = "transactionId"];</code>
     * @return The transactionId.
     */
    java.lang.String getTransactionId();
    /**
     * <pre>
     *
     * The unique identifier for the transaction.
     * </pre>
     *
     * <code>string transaction_id = 2 [json_name = "transactionId"];</code>
     * @return The bytes for transactionId.
     */
    com.google.protobuf.ByteString
        getTransactionIdBytes();

    /**
     * <pre>
     *
     * A description of the transaction type.
     * </pre>
     *
     * <code>string description = 3 [json_name = "description"];</code>
     * @return The description.
     */
    java.lang.String getDescription();
    /**
     * <pre>
     *
     * A description of the transaction type.
     * </pre>
     *
     * <code>string description = 3 [json_name = "description"];</code>
     * @return The bytes for description.
     */
    com.google.protobuf.ByteString
        getDescriptionBytes();

    /**
     * <pre>
     *
     * The transaction amount.
     * Using 'double' for simplicity. For financial calculations, it's often better
     * to use an integer type (e.g., int64) representing the smallest currency unit
     * (like cents) to avoid floating-point inaccuracies.
     * </pre>
     *
     * <code>.meshtrade.type.v1.Amount amount = 4 [json_name = "amount"];</code>
     * @return Whether the amount field is set.
     */
    boolean hasAmount();
    /**
     * <pre>
     *
     * The transaction amount.
     * Using 'double' for simplicity. For financial calculations, it's often better
     * to use an integer type (e.g., int64) representing the smallest currency unit
     * (like cents) to avoid floating-point inaccuracies.
     * </pre>
     *
     * <code>.meshtrade.type.v1.Amount amount = 4 [json_name = "amount"];</code>
     * @return The amount.
     */
    co.meshtrade.api.type.v1.AmountOuterClass.Amount getAmount();
    /**
     * <pre>
     *
     * The transaction amount.
     * Using 'double' for simplicity. For financial calculations, it's often better
     * to use an integer type (e.g., int64) representing the smallest currency unit
     * (like cents) to avoid floating-point inaccuracies.
     * </pre>
     *
     * <code>.meshtrade.type.v1.Amount amount = 4 [json_name = "amount"];</code>
     */
    co.meshtrade.api.type.v1.AmountOuterClass.AmountOrBuilder getAmountOrBuilder();

    /**
     * <pre>
     *
     * The value of the transaction in the reported currency.
     * </pre>
     *
     * <code>.meshtrade.type.v1.Amount reported_currency_value = 5 [json_name = "reportedCurrencyValue"];</code>
     * @return Whether the reportedCurrencyValue field is set.
     */
    boolean hasReportedCurrencyValue();
    /**
     * <pre>
     *
     * The value of the transaction in the reported currency.
     * </pre>
     *
     * <code>.meshtrade.type.v1.Amount reported_currency_value = 5 [json_name = "reportedCurrencyValue"];</code>
     * @return The reportedCurrencyValue.
     */
    co.meshtrade.api.type.v1.AmountOuterClass.Amount getReportedCurrencyValue();
    /**
     * <pre>
     *
     * The value of the transaction in the reported currency.
     * </pre>
     *
     * <code>.meshtrade.type.v1.Amount reported_currency_value = 5 [json_name = "reportedCurrencyValue"];</code>
     */
    co.meshtrade.api.type.v1.AmountOuterClass.AmountOrBuilder getReportedCurrencyValueOrBuilder();

    /**
     * <pre>
     *
     * The currency of the token (e.g., "mZAR").
     * </pre>
     *
     * <code>string token_currency = 6 [json_name = "tokenCurrency"];</code>
     * @return The tokenCurrency.
     */
    java.lang.String getTokenCurrency();
    /**
     * <pre>
     *
     * The currency of the token (e.g., "mZAR").
     * </pre>
     *
     * <code>string token_currency = 6 [json_name = "tokenCurrency"];</code>
     * @return The bytes for tokenCurrency.
     */
    com.google.protobuf.ByteString
        getTokenCurrencyBytes();
  }
  /**
   * <pre>
   *
   * FeeEntry defines the structure for a single fee entry, corresponding to one
   * row in the Excel sheet.
   * </pre>
   *
   * Protobuf type {@code meshtrade.reporting.account_report.v1.FeeEntry}
   */
  public static final class FeeEntry extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:meshtrade.reporting.account_report.v1.FeeEntry)
      FeeEntryOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 31,
        /* patch= */ 1,
        /* suffix= */ "",
        FeeEntry.class.getName());
    }
    // Use FeeEntry.newBuilder() to construct.
    private FeeEntry(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private FeeEntry() {
      transactionId_ = "";
      description_ = "";
      tokenCurrency_ = "";
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return meshtrade.reporting.account_report.v1.FeeEntryOuterClass.internal_static_meshtrade_reporting_account_report_v1_FeeEntry_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return meshtrade.reporting.account_report.v1.FeeEntryOuterClass.internal_static_meshtrade_reporting_account_report_v1_FeeEntry_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              meshtrade.reporting.account_report.v1.FeeEntryOuterClass.FeeEntry.class, meshtrade.reporting.account_report.v1.FeeEntryOuterClass.FeeEntry.Builder.class);
    }

    private int bitField0_;
    public static final int TRANSACTION_DATE_FIELD_NUMBER = 1;
    private com.google.protobuf.Timestamp transactionDate_;
    /**
     * <pre>
     *
     * The date and time of the transaction.
     * Using google.protobuf.Timestamp is the standard way to handle timestamps.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp transaction_date = 1 [json_name = "transactionDate"];</code>
     * @return Whether the transactionDate field is set.
     */
    @java.lang.Override
    public boolean hasTransactionDate() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     *
     * The date and time of the transaction.
     * Using google.protobuf.Timestamp is the standard way to handle timestamps.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp transaction_date = 1 [json_name = "transactionDate"];</code>
     * @return The transactionDate.
     */
    @java.lang.Override
    public com.google.protobuf.Timestamp getTransactionDate() {
      return transactionDate_ == null ? com.google.protobuf.Timestamp.getDefaultInstance() : transactionDate_;
    }
    /**
     * <pre>
     *
     * The date and time of the transaction.
     * Using google.protobuf.Timestamp is the standard way to handle timestamps.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp transaction_date = 1 [json_name = "transactionDate"];</code>
     */
    @java.lang.Override
    public com.google.protobuf.TimestampOrBuilder getTransactionDateOrBuilder() {
      return transactionDate_ == null ? com.google.protobuf.Timestamp.getDefaultInstance() : transactionDate_;
    }

    public static final int TRANSACTION_ID_FIELD_NUMBER = 2;
    @SuppressWarnings("serial")
    private volatile java.lang.Object transactionId_ = "";
    /**
     * <pre>
     *
     * The unique identifier for the transaction.
     * </pre>
     *
     * <code>string transaction_id = 2 [json_name = "transactionId"];</code>
     * @return The transactionId.
     */
    @java.lang.Override
    public java.lang.String getTransactionId() {
      java.lang.Object ref = transactionId_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        transactionId_ = s;
        return s;
      }
    }
    /**
     * <pre>
     *
     * The unique identifier for the transaction.
     * </pre>
     *
     * <code>string transaction_id = 2 [json_name = "transactionId"];</code>
     * @return The bytes for transactionId.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getTransactionIdBytes() {
      java.lang.Object ref = transactionId_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        transactionId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int DESCRIPTION_FIELD_NUMBER = 3;
    @SuppressWarnings("serial")
    private volatile java.lang.Object description_ = "";
    /**
     * <pre>
     *
     * A description of the transaction type.
     * </pre>
     *
     * <code>string description = 3 [json_name = "description"];</code>
     * @return The description.
     */
    @java.lang.Override
    public java.lang.String getDescription() {
      java.lang.Object ref = description_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        description_ = s;
        return s;
      }
    }
    /**
     * <pre>
     *
     * A description of the transaction type.
     * </pre>
     *
     * <code>string description = 3 [json_name = "description"];</code>
     * @return The bytes for description.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getDescriptionBytes() {
      java.lang.Object ref = description_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        description_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int AMOUNT_FIELD_NUMBER = 4;
    private co.meshtrade.api.type.v1.AmountOuterClass.Amount amount_;
    /**
     * <pre>
     *
     * The transaction amount.
     * Using 'double' for simplicity. For financial calculations, it's often better
     * to use an integer type (e.g., int64) representing the smallest currency unit
     * (like cents) to avoid floating-point inaccuracies.
     * </pre>
     *
     * <code>.meshtrade.type.v1.Amount amount = 4 [json_name = "amount"];</code>
     * @return Whether the amount field is set.
     */
    @java.lang.Override
    public boolean hasAmount() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     *
     * The transaction amount.
     * Using 'double' for simplicity. For financial calculations, it's often better
     * to use an integer type (e.g., int64) representing the smallest currency unit
     * (like cents) to avoid floating-point inaccuracies.
     * </pre>
     *
     * <code>.meshtrade.type.v1.Amount amount = 4 [json_name = "amount"];</code>
     * @return The amount.
     */
    @java.lang.Override
    public co.meshtrade.api.type.v1.AmountOuterClass.Amount getAmount() {
      return amount_ == null ? co.meshtrade.api.type.v1.AmountOuterClass.Amount.getDefaultInstance() : amount_;
    }
    /**
     * <pre>
     *
     * The transaction amount.
     * Using 'double' for simplicity. For financial calculations, it's often better
     * to use an integer type (e.g., int64) representing the smallest currency unit
     * (like cents) to avoid floating-point inaccuracies.
     * </pre>
     *
     * <code>.meshtrade.type.v1.Amount amount = 4 [json_name = "amount"];</code>
     */
    @java.lang.Override
    public co.meshtrade.api.type.v1.AmountOuterClass.AmountOrBuilder getAmountOrBuilder() {
      return amount_ == null ? co.meshtrade.api.type.v1.AmountOuterClass.Amount.getDefaultInstance() : amount_;
    }

    public static final int REPORTED_CURRENCY_VALUE_FIELD_NUMBER = 5;
    private co.meshtrade.api.type.v1.AmountOuterClass.Amount reportedCurrencyValue_;
    /**
     * <pre>
     *
     * The value of the transaction in the reported currency.
     * </pre>
     *
     * <code>.meshtrade.type.v1.Amount reported_currency_value = 5 [json_name = "reportedCurrencyValue"];</code>
     * @return Whether the reportedCurrencyValue field is set.
     */
    @java.lang.Override
    public boolean hasReportedCurrencyValue() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     *
     * The value of the transaction in the reported currency.
     * </pre>
     *
     * <code>.meshtrade.type.v1.Amount reported_currency_value = 5 [json_name = "reportedCurrencyValue"];</code>
     * @return The reportedCurrencyValue.
     */
    @java.lang.Override
    public co.meshtrade.api.type.v1.AmountOuterClass.Amount getReportedCurrencyValue() {
      return reportedCurrencyValue_ == null ? co.meshtrade.api.type.v1.AmountOuterClass.Amount.getDefaultInstance() : reportedCurrencyValue_;
    }
    /**
     * <pre>
     *
     * The value of the transaction in the reported currency.
     * </pre>
     *
     * <code>.meshtrade.type.v1.Amount reported_currency_value = 5 [json_name = "reportedCurrencyValue"];</code>
     */
    @java.lang.Override
    public co.meshtrade.api.type.v1.AmountOuterClass.AmountOrBuilder getReportedCurrencyValueOrBuilder() {
      return reportedCurrencyValue_ == null ? co.meshtrade.api.type.v1.AmountOuterClass.Amount.getDefaultInstance() : reportedCurrencyValue_;
    }

    public static final int TOKEN_CURRENCY_FIELD_NUMBER = 6;
    @SuppressWarnings("serial")
    private volatile java.lang.Object tokenCurrency_ = "";
    /**
     * <pre>
     *
     * The currency of the token (e.g., "mZAR").
     * </pre>
     *
     * <code>string token_currency = 6 [json_name = "tokenCurrency"];</code>
     * @return The tokenCurrency.
     */
    @java.lang.Override
    public java.lang.String getTokenCurrency() {
      java.lang.Object ref = tokenCurrency_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        tokenCurrency_ = s;
        return s;
      }
    }
    /**
     * <pre>
     *
     * The currency of the token (e.g., "mZAR").
     * </pre>
     *
     * <code>string token_currency = 6 [json_name = "tokenCurrency"];</code>
     * @return The bytes for tokenCurrency.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getTokenCurrencyBytes() {
      java.lang.Object ref = tokenCurrency_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        tokenCurrency_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeMessage(1, getTransactionDate());
      }
      if (!com.google.protobuf.GeneratedMessage.isStringEmpty(transactionId_)) {
        com.google.protobuf.GeneratedMessage.writeString(output, 2, transactionId_);
      }
      if (!com.google.protobuf.GeneratedMessage.isStringEmpty(description_)) {
        com.google.protobuf.GeneratedMessage.writeString(output, 3, description_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeMessage(4, getAmount());
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        output.writeMessage(5, getReportedCurrencyValue());
      }
      if (!com.google.protobuf.GeneratedMessage.isStringEmpty(tokenCurrency_)) {
        com.google.protobuf.GeneratedMessage.writeString(output, 6, tokenCurrency_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getTransactionDate());
      }
      if (!com.google.protobuf.GeneratedMessage.isStringEmpty(transactionId_)) {
        size += com.google.protobuf.GeneratedMessage.computeStringSize(2, transactionId_);
      }
      if (!com.google.protobuf.GeneratedMessage.isStringEmpty(description_)) {
        size += com.google.protobuf.GeneratedMessage.computeStringSize(3, description_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, getAmount());
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, getReportedCurrencyValue());
      }
      if (!com.google.protobuf.GeneratedMessage.isStringEmpty(tokenCurrency_)) {
        size += com.google.protobuf.GeneratedMessage.computeStringSize(6, tokenCurrency_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof meshtrade.reporting.account_report.v1.FeeEntryOuterClass.FeeEntry)) {
        return super.equals(obj);
      }
      meshtrade.reporting.account_report.v1.FeeEntryOuterClass.FeeEntry other = (meshtrade.reporting.account_report.v1.FeeEntryOuterClass.FeeEntry) obj;

      if (hasTransactionDate() != other.hasTransactionDate()) return false;
      if (hasTransactionDate()) {
        if (!getTransactionDate()
            .equals(other.getTransactionDate())) return false;
      }
      if (!getTransactionId()
          .equals(other.getTransactionId())) return false;
      if (!getDescription()
          .equals(other.getDescription())) return false;
      if (hasAmount() != other.hasAmount()) return false;
      if (hasAmount()) {
        if (!getAmount()
            .equals(other.getAmount())) return false;
      }
      if (hasReportedCurrencyValue() != other.hasReportedCurrencyValue()) return false;
      if (hasReportedCurrencyValue()) {
        if (!getReportedCurrencyValue()
            .equals(other.getReportedCurrencyValue())) return false;
      }
      if (!getTokenCurrency()
          .equals(other.getTokenCurrency())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasTransactionDate()) {
        hash = (37 * hash) + TRANSACTION_DATE_FIELD_NUMBER;
        hash = (53 * hash) + getTransactionDate().hashCode();
      }
      hash = (37 * hash) + TRANSACTION_ID_FIELD_NUMBER;
      hash = (53 * hash) + getTransactionId().hashCode();
      hash = (37 * hash) + DESCRIPTION_FIELD_NUMBER;
      hash = (53 * hash) + getDescription().hashCode();
      if (hasAmount()) {
        hash = (37 * hash) + AMOUNT_FIELD_NUMBER;
        hash = (53 * hash) + getAmount().hashCode();
      }
      if (hasReportedCurrencyValue()) {
        hash = (37 * hash) + REPORTED_CURRENCY_VALUE_FIELD_NUMBER;
        hash = (53 * hash) + getReportedCurrencyValue().hashCode();
      }
      hash = (37 * hash) + TOKEN_CURRENCY_FIELD_NUMBER;
      hash = (53 * hash) + getTokenCurrency().hashCode();
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static meshtrade.reporting.account_report.v1.FeeEntryOuterClass.FeeEntry parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static meshtrade.reporting.account_report.v1.FeeEntryOuterClass.FeeEntry parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static meshtrade.reporting.account_report.v1.FeeEntryOuterClass.FeeEntry parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static meshtrade.reporting.account_report.v1.FeeEntryOuterClass.FeeEntry parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static meshtrade.reporting.account_report.v1.FeeEntryOuterClass.FeeEntry parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static meshtrade.reporting.account_report.v1.FeeEntryOuterClass.FeeEntry parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static meshtrade.reporting.account_report.v1.FeeEntryOuterClass.FeeEntry parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static meshtrade.reporting.account_report.v1.FeeEntryOuterClass.FeeEntry parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static meshtrade.reporting.account_report.v1.FeeEntryOuterClass.FeeEntry parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static meshtrade.reporting.account_report.v1.FeeEntryOuterClass.FeeEntry parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static meshtrade.reporting.account_report.v1.FeeEntryOuterClass.FeeEntry parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static meshtrade.reporting.account_report.v1.FeeEntryOuterClass.FeeEntry parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(meshtrade.reporting.account_report.v1.FeeEntryOuterClass.FeeEntry prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     *
     * FeeEntry defines the structure for a single fee entry, corresponding to one
     * row in the Excel sheet.
     * </pre>
     *
     * Protobuf type {@code meshtrade.reporting.account_report.v1.FeeEntry}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:meshtrade.reporting.account_report.v1.FeeEntry)
        meshtrade.reporting.account_report.v1.FeeEntryOuterClass.FeeEntryOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return meshtrade.reporting.account_report.v1.FeeEntryOuterClass.internal_static_meshtrade_reporting_account_report_v1_FeeEntry_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return meshtrade.reporting.account_report.v1.FeeEntryOuterClass.internal_static_meshtrade_reporting_account_report_v1_FeeEntry_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                meshtrade.reporting.account_report.v1.FeeEntryOuterClass.FeeEntry.class, meshtrade.reporting.account_report.v1.FeeEntryOuterClass.FeeEntry.Builder.class);
      }

      // Construct using meshtrade.reporting.account_report.v1.FeeEntryOuterClass.FeeEntry.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage
                .alwaysUseFieldBuilders) {
          internalGetTransactionDateFieldBuilder();
          internalGetAmountFieldBuilder();
          internalGetReportedCurrencyValueFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        transactionDate_ = null;
        if (transactionDateBuilder_ != null) {
          transactionDateBuilder_.dispose();
          transactionDateBuilder_ = null;
        }
        transactionId_ = "";
        description_ = "";
        amount_ = null;
        if (amountBuilder_ != null) {
          amountBuilder_.dispose();
          amountBuilder_ = null;
        }
        reportedCurrencyValue_ = null;
        if (reportedCurrencyValueBuilder_ != null) {
          reportedCurrencyValueBuilder_.dispose();
          reportedCurrencyValueBuilder_ = null;
        }
        tokenCurrency_ = "";
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return meshtrade.reporting.account_report.v1.FeeEntryOuterClass.internal_static_meshtrade_reporting_account_report_v1_FeeEntry_descriptor;
      }

      @java.lang.Override
      public meshtrade.reporting.account_report.v1.FeeEntryOuterClass.FeeEntry getDefaultInstanceForType() {
        return meshtrade.reporting.account_report.v1.FeeEntryOuterClass.FeeEntry.getDefaultInstance();
      }

      @java.lang.Override
      public meshtrade.reporting.account_report.v1.FeeEntryOuterClass.FeeEntry build() {
        meshtrade.reporting.account_report.v1.FeeEntryOuterClass.FeeEntry result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public meshtrade.reporting.account_report.v1.FeeEntryOuterClass.FeeEntry buildPartial() {
        meshtrade.reporting.account_report.v1.FeeEntryOuterClass.FeeEntry result = new meshtrade.reporting.account_report.v1.FeeEntryOuterClass.FeeEntry(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(meshtrade.reporting.account_report.v1.FeeEntryOuterClass.FeeEntry result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.transactionDate_ = transactionDateBuilder_ == null
              ? transactionDate_
              : transactionDateBuilder_.build();
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.transactionId_ = transactionId_;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.description_ = description_;
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.amount_ = amountBuilder_ == null
              ? amount_
              : amountBuilder_.build();
          to_bitField0_ |= 0x00000002;
        }
        if (((from_bitField0_ & 0x00000010) != 0)) {
          result.reportedCurrencyValue_ = reportedCurrencyValueBuilder_ == null
              ? reportedCurrencyValue_
              : reportedCurrencyValueBuilder_.build();
          to_bitField0_ |= 0x00000004;
        }
        if (((from_bitField0_ & 0x00000020) != 0)) {
          result.tokenCurrency_ = tokenCurrency_;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof meshtrade.reporting.account_report.v1.FeeEntryOuterClass.FeeEntry) {
          return mergeFrom((meshtrade.reporting.account_report.v1.FeeEntryOuterClass.FeeEntry)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(meshtrade.reporting.account_report.v1.FeeEntryOuterClass.FeeEntry other) {
        if (other == meshtrade.reporting.account_report.v1.FeeEntryOuterClass.FeeEntry.getDefaultInstance()) return this;
        if (other.hasTransactionDate()) {
          mergeTransactionDate(other.getTransactionDate());
        }
        if (!other.getTransactionId().isEmpty()) {
          transactionId_ = other.transactionId_;
          bitField0_ |= 0x00000002;
          onChanged();
        }
        if (!other.getDescription().isEmpty()) {
          description_ = other.description_;
          bitField0_ |= 0x00000004;
          onChanged();
        }
        if (other.hasAmount()) {
          mergeAmount(other.getAmount());
        }
        if (other.hasReportedCurrencyValue()) {
          mergeReportedCurrencyValue(other.getReportedCurrencyValue());
        }
        if (!other.getTokenCurrency().isEmpty()) {
          tokenCurrency_ = other.tokenCurrency_;
          bitField0_ |= 0x00000020;
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                input.readMessage(
                    internalGetTransactionDateFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 18: {
                transactionId_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000002;
                break;
              } // case 18
              case 26: {
                description_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000004;
                break;
              } // case 26
              case 34: {
                input.readMessage(
                    internalGetAmountFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000008;
                break;
              } // case 34
              case 42: {
                input.readMessage(
                    internalGetReportedCurrencyValueFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000010;
                break;
              } // case 42
              case 50: {
                tokenCurrency_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000020;
                break;
              } // case 50
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private com.google.protobuf.Timestamp transactionDate_;
      private com.google.protobuf.SingleFieldBuilder<
          com.google.protobuf.Timestamp, com.google.protobuf.Timestamp.Builder, com.google.protobuf.TimestampOrBuilder> transactionDateBuilder_;
      /**
       * <pre>
       *
       * The date and time of the transaction.
       * Using google.protobuf.Timestamp is the standard way to handle timestamps.
       * </pre>
       *
       * <code>.google.protobuf.Timestamp transaction_date = 1 [json_name = "transactionDate"];</code>
       * @return Whether the transactionDate field is set.
       */
      public boolean hasTransactionDate() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       *
       * The date and time of the transaction.
       * Using google.protobuf.Timestamp is the standard way to handle timestamps.
       * </pre>
       *
       * <code>.google.protobuf.Timestamp transaction_date = 1 [json_name = "transactionDate"];</code>
       * @return The transactionDate.
       */
      public com.google.protobuf.Timestamp getTransactionDate() {
        if (transactionDateBuilder_ == null) {
          return transactionDate_ == null ? com.google.protobuf.Timestamp.getDefaultInstance() : transactionDate_;
        } else {
          return transactionDateBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       *
       * The date and time of the transaction.
       * Using google.protobuf.Timestamp is the standard way to handle timestamps.
       * </pre>
       *
       * <code>.google.protobuf.Timestamp transaction_date = 1 [json_name = "transactionDate"];</code>
       */
      public Builder setTransactionDate(com.google.protobuf.Timestamp value) {
        if (transactionDateBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          transactionDate_ = value;
        } else {
          transactionDateBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *
       * The date and time of the transaction.
       * Using google.protobuf.Timestamp is the standard way to handle timestamps.
       * </pre>
       *
       * <code>.google.protobuf.Timestamp transaction_date = 1 [json_name = "transactionDate"];</code>
       */
      public Builder setTransactionDate(
          com.google.protobuf.Timestamp.Builder builderForValue) {
        if (transactionDateBuilder_ == null) {
          transactionDate_ = builderForValue.build();
        } else {
          transactionDateBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *
       * The date and time of the transaction.
       * Using google.protobuf.Timestamp is the standard way to handle timestamps.
       * </pre>
       *
       * <code>.google.protobuf.Timestamp transaction_date = 1 [json_name = "transactionDate"];</code>
       */
      public Builder mergeTransactionDate(com.google.protobuf.Timestamp value) {
        if (transactionDateBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0) &&
            transactionDate_ != null &&
            transactionDate_ != com.google.protobuf.Timestamp.getDefaultInstance()) {
            getTransactionDateBuilder().mergeFrom(value);
          } else {
            transactionDate_ = value;
          }
        } else {
          transactionDateBuilder_.mergeFrom(value);
        }
        if (transactionDate_ != null) {
          bitField0_ |= 0x00000001;
          onChanged();
        }
        return this;
      }
      /**
       * <pre>
       *
       * The date and time of the transaction.
       * Using google.protobuf.Timestamp is the standard way to handle timestamps.
       * </pre>
       *
       * <code>.google.protobuf.Timestamp transaction_date = 1 [json_name = "transactionDate"];</code>
       */
      public Builder clearTransactionDate() {
        bitField0_ = (bitField0_ & ~0x00000001);
        transactionDate_ = null;
        if (transactionDateBuilder_ != null) {
          transactionDateBuilder_.dispose();
          transactionDateBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       *
       * The date and time of the transaction.
       * Using google.protobuf.Timestamp is the standard way to handle timestamps.
       * </pre>
       *
       * <code>.google.protobuf.Timestamp transaction_date = 1 [json_name = "transactionDate"];</code>
       */
      public com.google.protobuf.Timestamp.Builder getTransactionDateBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return internalGetTransactionDateFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       *
       * The date and time of the transaction.
       * Using google.protobuf.Timestamp is the standard way to handle timestamps.
       * </pre>
       *
       * <code>.google.protobuf.Timestamp transaction_date = 1 [json_name = "transactionDate"];</code>
       */
      public com.google.protobuf.TimestampOrBuilder getTransactionDateOrBuilder() {
        if (transactionDateBuilder_ != null) {
          return transactionDateBuilder_.getMessageOrBuilder();
        } else {
          return transactionDate_ == null ?
              com.google.protobuf.Timestamp.getDefaultInstance() : transactionDate_;
        }
      }
      /**
       * <pre>
       *
       * The date and time of the transaction.
       * Using google.protobuf.Timestamp is the standard way to handle timestamps.
       * </pre>
       *
       * <code>.google.protobuf.Timestamp transaction_date = 1 [json_name = "transactionDate"];</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.google.protobuf.Timestamp, com.google.protobuf.Timestamp.Builder, com.google.protobuf.TimestampOrBuilder> 
          internalGetTransactionDateFieldBuilder() {
        if (transactionDateBuilder_ == null) {
          transactionDateBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.google.protobuf.Timestamp, com.google.protobuf.Timestamp.Builder, com.google.protobuf.TimestampOrBuilder>(
                  getTransactionDate(),
                  getParentForChildren(),
                  isClean());
          transactionDate_ = null;
        }
        return transactionDateBuilder_;
      }

      private java.lang.Object transactionId_ = "";
      /**
       * <pre>
       *
       * The unique identifier for the transaction.
       * </pre>
       *
       * <code>string transaction_id = 2 [json_name = "transactionId"];</code>
       * @return The transactionId.
       */
      public java.lang.String getTransactionId() {
        java.lang.Object ref = transactionId_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          transactionId_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       *
       * The unique identifier for the transaction.
       * </pre>
       *
       * <code>string transaction_id = 2 [json_name = "transactionId"];</code>
       * @return The bytes for transactionId.
       */
      public com.google.protobuf.ByteString
          getTransactionIdBytes() {
        java.lang.Object ref = transactionId_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          transactionId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       *
       * The unique identifier for the transaction.
       * </pre>
       *
       * <code>string transaction_id = 2 [json_name = "transactionId"];</code>
       * @param value The transactionId to set.
       * @return This builder for chaining.
       */
      public Builder setTransactionId(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        transactionId_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *
       * The unique identifier for the transaction.
       * </pre>
       *
       * <code>string transaction_id = 2 [json_name = "transactionId"];</code>
       * @return This builder for chaining.
       */
      public Builder clearTransactionId() {
        transactionId_ = getDefaultInstance().getTransactionId();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }
      /**
       * <pre>
       *
       * The unique identifier for the transaction.
       * </pre>
       *
       * <code>string transaction_id = 2 [json_name = "transactionId"];</code>
       * @param value The bytes for transactionId to set.
       * @return This builder for chaining.
       */
      public Builder setTransactionIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        transactionId_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }

      private java.lang.Object description_ = "";
      /**
       * <pre>
       *
       * A description of the transaction type.
       * </pre>
       *
       * <code>string description = 3 [json_name = "description"];</code>
       * @return The description.
       */
      public java.lang.String getDescription() {
        java.lang.Object ref = description_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          description_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       *
       * A description of the transaction type.
       * </pre>
       *
       * <code>string description = 3 [json_name = "description"];</code>
       * @return The bytes for description.
       */
      public com.google.protobuf.ByteString
          getDescriptionBytes() {
        java.lang.Object ref = description_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          description_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       *
       * A description of the transaction type.
       * </pre>
       *
       * <code>string description = 3 [json_name = "description"];</code>
       * @param value The description to set.
       * @return This builder for chaining.
       */
      public Builder setDescription(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        description_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *
       * A description of the transaction type.
       * </pre>
       *
       * <code>string description = 3 [json_name = "description"];</code>
       * @return This builder for chaining.
       */
      public Builder clearDescription() {
        description_ = getDefaultInstance().getDescription();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }
      /**
       * <pre>
       *
       * A description of the transaction type.
       * </pre>
       *
       * <code>string description = 3 [json_name = "description"];</code>
       * @param value The bytes for description to set.
       * @return This builder for chaining.
       */
      public Builder setDescriptionBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        description_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }

      private co.meshtrade.api.type.v1.AmountOuterClass.Amount amount_;
      private com.google.protobuf.SingleFieldBuilder<
          co.meshtrade.api.type.v1.AmountOuterClass.Amount, co.meshtrade.api.type.v1.AmountOuterClass.Amount.Builder, co.meshtrade.api.type.v1.AmountOuterClass.AmountOrBuilder> amountBuilder_;
      /**
       * <pre>
       *
       * The transaction amount.
       * Using 'double' for simplicity. For financial calculations, it's often better
       * to use an integer type (e.g., int64) representing the smallest currency unit
       * (like cents) to avoid floating-point inaccuracies.
       * </pre>
       *
       * <code>.meshtrade.type.v1.Amount amount = 4 [json_name = "amount"];</code>
       * @return Whether the amount field is set.
       */
      public boolean hasAmount() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <pre>
       *
       * The transaction amount.
       * Using 'double' for simplicity. For financial calculations, it's often better
       * to use an integer type (e.g., int64) representing the smallest currency unit
       * (like cents) to avoid floating-point inaccuracies.
       * </pre>
       *
       * <code>.meshtrade.type.v1.Amount amount = 4 [json_name = "amount"];</code>
       * @return The amount.
       */
      public co.meshtrade.api.type.v1.AmountOuterClass.Amount getAmount() {
        if (amountBuilder_ == null) {
          return amount_ == null ? co.meshtrade.api.type.v1.AmountOuterClass.Amount.getDefaultInstance() : amount_;
        } else {
          return amountBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       *
       * The transaction amount.
       * Using 'double' for simplicity. For financial calculations, it's often better
       * to use an integer type (e.g., int64) representing the smallest currency unit
       * (like cents) to avoid floating-point inaccuracies.
       * </pre>
       *
       * <code>.meshtrade.type.v1.Amount amount = 4 [json_name = "amount"];</code>
       */
      public Builder setAmount(co.meshtrade.api.type.v1.AmountOuterClass.Amount value) {
        if (amountBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          amount_ = value;
        } else {
          amountBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *
       * The transaction amount.
       * Using 'double' for simplicity. For financial calculations, it's often better
       * to use an integer type (e.g., int64) representing the smallest currency unit
       * (like cents) to avoid floating-point inaccuracies.
       * </pre>
       *
       * <code>.meshtrade.type.v1.Amount amount = 4 [json_name = "amount"];</code>
       */
      public Builder setAmount(
          co.meshtrade.api.type.v1.AmountOuterClass.Amount.Builder builderForValue) {
        if (amountBuilder_ == null) {
          amount_ = builderForValue.build();
        } else {
          amountBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *
       * The transaction amount.
       * Using 'double' for simplicity. For financial calculations, it's often better
       * to use an integer type (e.g., int64) representing the smallest currency unit
       * (like cents) to avoid floating-point inaccuracies.
       * </pre>
       *
       * <code>.meshtrade.type.v1.Amount amount = 4 [json_name = "amount"];</code>
       */
      public Builder mergeAmount(co.meshtrade.api.type.v1.AmountOuterClass.Amount value) {
        if (amountBuilder_ == null) {
          if (((bitField0_ & 0x00000008) != 0) &&
            amount_ != null &&
            amount_ != co.meshtrade.api.type.v1.AmountOuterClass.Amount.getDefaultInstance()) {
            getAmountBuilder().mergeFrom(value);
          } else {
            amount_ = value;
          }
        } else {
          amountBuilder_.mergeFrom(value);
        }
        if (amount_ != null) {
          bitField0_ |= 0x00000008;
          onChanged();
        }
        return this;
      }
      /**
       * <pre>
       *
       * The transaction amount.
       * Using 'double' for simplicity. For financial calculations, it's often better
       * to use an integer type (e.g., int64) representing the smallest currency unit
       * (like cents) to avoid floating-point inaccuracies.
       * </pre>
       *
       * <code>.meshtrade.type.v1.Amount amount = 4 [json_name = "amount"];</code>
       */
      public Builder clearAmount() {
        bitField0_ = (bitField0_ & ~0x00000008);
        amount_ = null;
        if (amountBuilder_ != null) {
          amountBuilder_.dispose();
          amountBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       *
       * The transaction amount.
       * Using 'double' for simplicity. For financial calculations, it's often better
       * to use an integer type (e.g., int64) representing the smallest currency unit
       * (like cents) to avoid floating-point inaccuracies.
       * </pre>
       *
       * <code>.meshtrade.type.v1.Amount amount = 4 [json_name = "amount"];</code>
       */
      public co.meshtrade.api.type.v1.AmountOuterClass.Amount.Builder getAmountBuilder() {
        bitField0_ |= 0x00000008;
        onChanged();
        return internalGetAmountFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       *
       * The transaction amount.
       * Using 'double' for simplicity. For financial calculations, it's often better
       * to use an integer type (e.g., int64) representing the smallest currency unit
       * (like cents) to avoid floating-point inaccuracies.
       * </pre>
       *
       * <code>.meshtrade.type.v1.Amount amount = 4 [json_name = "amount"];</code>
       */
      public co.meshtrade.api.type.v1.AmountOuterClass.AmountOrBuilder getAmountOrBuilder() {
        if (amountBuilder_ != null) {
          return amountBuilder_.getMessageOrBuilder();
        } else {
          return amount_ == null ?
              co.meshtrade.api.type.v1.AmountOuterClass.Amount.getDefaultInstance() : amount_;
        }
      }
      /**
       * <pre>
       *
       * The transaction amount.
       * Using 'double' for simplicity. For financial calculations, it's often better
       * to use an integer type (e.g., int64) representing the smallest currency unit
       * (like cents) to avoid floating-point inaccuracies.
       * </pre>
       *
       * <code>.meshtrade.type.v1.Amount amount = 4 [json_name = "amount"];</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          co.meshtrade.api.type.v1.AmountOuterClass.Amount, co.meshtrade.api.type.v1.AmountOuterClass.Amount.Builder, co.meshtrade.api.type.v1.AmountOuterClass.AmountOrBuilder> 
          internalGetAmountFieldBuilder() {
        if (amountBuilder_ == null) {
          amountBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              co.meshtrade.api.type.v1.AmountOuterClass.Amount, co.meshtrade.api.type.v1.AmountOuterClass.Amount.Builder, co.meshtrade.api.type.v1.AmountOuterClass.AmountOrBuilder>(
                  getAmount(),
                  getParentForChildren(),
                  isClean());
          amount_ = null;
        }
        return amountBuilder_;
      }

      private co.meshtrade.api.type.v1.AmountOuterClass.Amount reportedCurrencyValue_;
      private com.google.protobuf.SingleFieldBuilder<
          co.meshtrade.api.type.v1.AmountOuterClass.Amount, co.meshtrade.api.type.v1.AmountOuterClass.Amount.Builder, co.meshtrade.api.type.v1.AmountOuterClass.AmountOrBuilder> reportedCurrencyValueBuilder_;
      /**
       * <pre>
       *
       * The value of the transaction in the reported currency.
       * </pre>
       *
       * <code>.meshtrade.type.v1.Amount reported_currency_value = 5 [json_name = "reportedCurrencyValue"];</code>
       * @return Whether the reportedCurrencyValue field is set.
       */
      public boolean hasReportedCurrencyValue() {
        return ((bitField0_ & 0x00000010) != 0);
      }
      /**
       * <pre>
       *
       * The value of the transaction in the reported currency.
       * </pre>
       *
       * <code>.meshtrade.type.v1.Amount reported_currency_value = 5 [json_name = "reportedCurrencyValue"];</code>
       * @return The reportedCurrencyValue.
       */
      public co.meshtrade.api.type.v1.AmountOuterClass.Amount getReportedCurrencyValue() {
        if (reportedCurrencyValueBuilder_ == null) {
          return reportedCurrencyValue_ == null ? co.meshtrade.api.type.v1.AmountOuterClass.Amount.getDefaultInstance() : reportedCurrencyValue_;
        } else {
          return reportedCurrencyValueBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       *
       * The value of the transaction in the reported currency.
       * </pre>
       *
       * <code>.meshtrade.type.v1.Amount reported_currency_value = 5 [json_name = "reportedCurrencyValue"];</code>
       */
      public Builder setReportedCurrencyValue(co.meshtrade.api.type.v1.AmountOuterClass.Amount value) {
        if (reportedCurrencyValueBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          reportedCurrencyValue_ = value;
        } else {
          reportedCurrencyValueBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *
       * The value of the transaction in the reported currency.
       * </pre>
       *
       * <code>.meshtrade.type.v1.Amount reported_currency_value = 5 [json_name = "reportedCurrencyValue"];</code>
       */
      public Builder setReportedCurrencyValue(
          co.meshtrade.api.type.v1.AmountOuterClass.Amount.Builder builderForValue) {
        if (reportedCurrencyValueBuilder_ == null) {
          reportedCurrencyValue_ = builderForValue.build();
        } else {
          reportedCurrencyValueBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *
       * The value of the transaction in the reported currency.
       * </pre>
       *
       * <code>.meshtrade.type.v1.Amount reported_currency_value = 5 [json_name = "reportedCurrencyValue"];</code>
       */
      public Builder mergeReportedCurrencyValue(co.meshtrade.api.type.v1.AmountOuterClass.Amount value) {
        if (reportedCurrencyValueBuilder_ == null) {
          if (((bitField0_ & 0x00000010) != 0) &&
            reportedCurrencyValue_ != null &&
            reportedCurrencyValue_ != co.meshtrade.api.type.v1.AmountOuterClass.Amount.getDefaultInstance()) {
            getReportedCurrencyValueBuilder().mergeFrom(value);
          } else {
            reportedCurrencyValue_ = value;
          }
        } else {
          reportedCurrencyValueBuilder_.mergeFrom(value);
        }
        if (reportedCurrencyValue_ != null) {
          bitField0_ |= 0x00000010;
          onChanged();
        }
        return this;
      }
      /**
       * <pre>
       *
       * The value of the transaction in the reported currency.
       * </pre>
       *
       * <code>.meshtrade.type.v1.Amount reported_currency_value = 5 [json_name = "reportedCurrencyValue"];</code>
       */
      public Builder clearReportedCurrencyValue() {
        bitField0_ = (bitField0_ & ~0x00000010);
        reportedCurrencyValue_ = null;
        if (reportedCurrencyValueBuilder_ != null) {
          reportedCurrencyValueBuilder_.dispose();
          reportedCurrencyValueBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       *
       * The value of the transaction in the reported currency.
       * </pre>
       *
       * <code>.meshtrade.type.v1.Amount reported_currency_value = 5 [json_name = "reportedCurrencyValue"];</code>
       */
      public co.meshtrade.api.type.v1.AmountOuterClass.Amount.Builder getReportedCurrencyValueBuilder() {
        bitField0_ |= 0x00000010;
        onChanged();
        return internalGetReportedCurrencyValueFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       *
       * The value of the transaction in the reported currency.
       * </pre>
       *
       * <code>.meshtrade.type.v1.Amount reported_currency_value = 5 [json_name = "reportedCurrencyValue"];</code>
       */
      public co.meshtrade.api.type.v1.AmountOuterClass.AmountOrBuilder getReportedCurrencyValueOrBuilder() {
        if (reportedCurrencyValueBuilder_ != null) {
          return reportedCurrencyValueBuilder_.getMessageOrBuilder();
        } else {
          return reportedCurrencyValue_ == null ?
              co.meshtrade.api.type.v1.AmountOuterClass.Amount.getDefaultInstance() : reportedCurrencyValue_;
        }
      }
      /**
       * <pre>
       *
       * The value of the transaction in the reported currency.
       * </pre>
       *
       * <code>.meshtrade.type.v1.Amount reported_currency_value = 5 [json_name = "reportedCurrencyValue"];</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          co.meshtrade.api.type.v1.AmountOuterClass.Amount, co.meshtrade.api.type.v1.AmountOuterClass.Amount.Builder, co.meshtrade.api.type.v1.AmountOuterClass.AmountOrBuilder> 
          internalGetReportedCurrencyValueFieldBuilder() {
        if (reportedCurrencyValueBuilder_ == null) {
          reportedCurrencyValueBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              co.meshtrade.api.type.v1.AmountOuterClass.Amount, co.meshtrade.api.type.v1.AmountOuterClass.Amount.Builder, co.meshtrade.api.type.v1.AmountOuterClass.AmountOrBuilder>(
                  getReportedCurrencyValue(),
                  getParentForChildren(),
                  isClean());
          reportedCurrencyValue_ = null;
        }
        return reportedCurrencyValueBuilder_;
      }

      private java.lang.Object tokenCurrency_ = "";
      /**
       * <pre>
       *
       * The currency of the token (e.g., "mZAR").
       * </pre>
       *
       * <code>string token_currency = 6 [json_name = "tokenCurrency"];</code>
       * @return The tokenCurrency.
       */
      public java.lang.String getTokenCurrency() {
        java.lang.Object ref = tokenCurrency_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          tokenCurrency_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       *
       * The currency of the token (e.g., "mZAR").
       * </pre>
       *
       * <code>string token_currency = 6 [json_name = "tokenCurrency"];</code>
       * @return The bytes for tokenCurrency.
       */
      public com.google.protobuf.ByteString
          getTokenCurrencyBytes() {
        java.lang.Object ref = tokenCurrency_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          tokenCurrency_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       *
       * The currency of the token (e.g., "mZAR").
       * </pre>
       *
       * <code>string token_currency = 6 [json_name = "tokenCurrency"];</code>
       * @param value The tokenCurrency to set.
       * @return This builder for chaining.
       */
      public Builder setTokenCurrency(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        tokenCurrency_ = value;
        bitField0_ |= 0x00000020;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *
       * The currency of the token (e.g., "mZAR").
       * </pre>
       *
       * <code>string token_currency = 6 [json_name = "tokenCurrency"];</code>
       * @return This builder for chaining.
       */
      public Builder clearTokenCurrency() {
        tokenCurrency_ = getDefaultInstance().getTokenCurrency();
        bitField0_ = (bitField0_ & ~0x00000020);
        onChanged();
        return this;
      }
      /**
       * <pre>
       *
       * The currency of the token (e.g., "mZAR").
       * </pre>
       *
       * <code>string token_currency = 6 [json_name = "tokenCurrency"];</code>
       * @param value The bytes for tokenCurrency to set.
       * @return This builder for chaining.
       */
      public Builder setTokenCurrencyBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        tokenCurrency_ = value;
        bitField0_ |= 0x00000020;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:meshtrade.reporting.account_report.v1.FeeEntry)
    }

    // @@protoc_insertion_point(class_scope:meshtrade.reporting.account_report.v1.FeeEntry)
    private static final meshtrade.reporting.account_report.v1.FeeEntryOuterClass.FeeEntry DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new meshtrade.reporting.account_report.v1.FeeEntryOuterClass.FeeEntry();
    }

    public static meshtrade.reporting.account_report.v1.FeeEntryOuterClass.FeeEntry getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<FeeEntry>
        PARSER = new com.google.protobuf.AbstractParser<FeeEntry>() {
      @java.lang.Override
      public FeeEntry parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<FeeEntry> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<FeeEntry> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public meshtrade.reporting.account_report.v1.FeeEntryOuterClass.FeeEntry getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_meshtrade_reporting_account_report_v1_FeeEntry_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_meshtrade_reporting_account_report_v1_FeeEntry_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n5meshtrade/reporting/account_report/v1/" +
      "fee_entry.proto\022%meshtrade.reporting.acc" +
      "ount_report.v1\032\037google/protobuf/timestam" +
      "p.proto\032\036meshtrade/type/v1/amount.proto\"" +
      "\307\002\n\010FeeEntry\022E\n\020transaction_date\030\001 \001(\0132\032" +
      ".google.protobuf.TimestampR\017transactionD" +
      "ate\022%\n\016transaction_id\030\002 \001(\tR\rtransaction" +
      "Id\022 \n\013description\030\003 \001(\tR\013description\0221\n\006" +
      "amount\030\004 \001(\0132\031.meshtrade.type.v1.AmountR" +
      "\006amount\022Q\n\027reported_currency_value\030\005 \001(\013" +
      "2\031.meshtrade.type.v1.AmountR\025reportedCur" +
      "rencyValue\022%\n\016token_currency\030\006 \001(\tR\rtoke" +
      "nCurrencyBJZHgithub.com/meshtrade/api/go" +
      "/reporting/account_report/v1;account_rep" +
      "ortv1b\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          com.google.protobuf.TimestampProto.getDescriptor(),
          co.meshtrade.api.type.v1.AmountOuterClass.getDescriptor(),
        });
    internal_static_meshtrade_reporting_account_report_v1_FeeEntry_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_meshtrade_reporting_account_report_v1_FeeEntry_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_meshtrade_reporting_account_report_v1_FeeEntry_descriptor,
        new java.lang.String[] { "TransactionDate", "TransactionId", "Description", "Amount", "ReportedCurrencyValue", "TokenCurrency", });
    descriptor.resolveAllFeaturesImmutable();
    com.google.protobuf.TimestampProto.getDescriptor();
    co.meshtrade.api.type.v1.AmountOuterClass.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
