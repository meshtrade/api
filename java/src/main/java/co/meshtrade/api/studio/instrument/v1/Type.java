// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: meshtrade/studio/instrument/v1/type.proto
// Protobuf Java Version: 4.31.1

package co.meshtrade.api.studio.instrument.v1;

@com.google.protobuf.Generated
public final class Type {
  private Type() {}
  static {
    com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
      com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
      /* major= */ 4,
      /* minor= */ 31,
      /* patch= */ 1,
      /* suffix= */ "",
      Type.class.getName());
  }
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  /**
   * <pre>
   *
   * The type of an instrument structured in Mesh Studio. This enum categorizes
   * various financial instruments and assets available on the platform, providing
   * a standardized way to identify them.
   * </pre>
   *
   * Protobuf enum {@code meshtrade.studio.instrument.v1.InstrumentType}
   */
  public enum InstrumentType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * The instrument type is not specified. This is the default value and
     * should be treated as an error or an uninitialized state.
     * </pre>
     *
     * <code>INSTRUMENT_TYPE_UNSPECIFIED = 0;</code>
     */
    INSTRUMENT_TYPE_UNSPECIFIED(0),
    /**
     * <pre>
     * A catch-all for any instrument type not explicitly listed in this enum.
     * Use this for miscellaneous or newly introduced asset types.
     * </pre>
     *
     * <code>INSTRUMENT_TYPE_OTHER = 1;</code>
     */
    INSTRUMENT_TYPE_OTHER(1),
    /**
     * <pre>
     * Common equity in a corporation, also known as ordinary shares.
     * Holders have ownership rights, including voting rights, and are entitled
     * to a portion of profits through dividends and capital gains.
     * </pre>
     *
     * <code>INSTRUMENT_TYPE_SHARE = 2;</code>
     */
    INSTRUMENT_TYPE_SHARE(2),
    /**
     * <pre>
     * A class of share ownership with a higher claim on assets and earnings
     * than common shares. Preference shares generally have a fixed dividend that
     * must be paid out before dividends to common shareholders.
     * </pre>
     *
     * <code>INSTRUMENT_TYPE_PREFERENCE_SHARE = 3;</code>
     */
    INSTRUMENT_TYPE_PREFERENCE_SHARE(3),
    /**
     * <pre>
     * A fixed-income instrument representing a loan made by an investor to a
     * borrower (typically corporate or governmental). The borrower pays interest
     * (coupon) and repays the principal amount at a later date (maturity).
     * </pre>
     *
     * <code>INSTRUMENT_TYPE_BOND = 4;</code>
     */
    INSTRUMENT_TYPE_BOND(4),
    /**
     * <pre>
     * Exchange-Traded Fund. A type of pooled investment security that operates
     * much like a mutual fund but trades like a stock on an exchange. ETFs
     * hold assets such as stocks, commodities, or bonds and are typically
     * designed to track an underlying index.
     * </pre>
     *
     * <code>INSTRUMENT_TYPE_ETF = 5;</code>
     */
    INSTRUMENT_TYPE_ETF(5),
    /**
     * <pre>
     * Exchange-Traded Note. A type of senior, unsecured debt security that
     * tracks an underlying index of securities. ETNs do not own the underlying
     * assets and are subject to the credit risk of the issuing institution.
     * </pre>
     *
     * <code>INSTRUMENT_TYPE_ETN = 6;</code>
     */
    INSTRUMENT_TYPE_ETN(6),
    /**
     * <pre>
     * Actively Managed Certificate. A structured product linked to an
     * underlying portfolio or strategy. Unlike a typical index-tracking ETF,
     * its portfolio is actively managed by an investment advisor.
     * </pre>
     *
     * <code>INSTRUMENT_TYPE_AMC = 7;</code>
     */
    INSTRUMENT_TYPE_AMC(7),
    /**
     * <pre>
     * An open-ended investment vehicle where funds from multiple investors are
     * pooled to invest in a diversified portfolio of securities. Common in
     * collective investment schemes.
     * </pre>
     *
     * <code>INSTRUMENT_TYPE_UNIT_TRUST = 8;</code>
     */
    INSTRUMENT_TYPE_UNIT_TRUST(8),
    /**
     * <pre>
     * A digital or virtual currency secured by cryptography.
     * Examples include Bitcoin (BTC) and Ethereum (ETH).
     * </pre>
     *
     * <code>INSTRUMENT_TYPE_CRYPTO_CURRENCY = 9;</code>
     */
    INSTRUMENT_TYPE_CRYPTO_CURRENCY(9),
    /**
     * <pre>
     * Government-issued currency that is not backed by a physical commodity
     * but by the government that issued it. Examples include the US Dollar
     * (USD) and the Euro (EUR).
     * </pre>
     *
     * <code>INSTRUMENT_TYPE_FIAT_CURRENCY = 10;</code>
     */
    INSTRUMENT_TYPE_FIAT_CURRENCY(10),
    /**
     * <pre>
     * Rights to the financial value of a linked underlying.
     * </pre>
     *
     * <code>INSTRUMENT_TYPE_RIGHTS = 11;</code>
     */
    INSTRUMENT_TYPE_RIGHTS(11),
    /**
     * <pre>
     * Gold as a commodity. Can be invested in via physical bullion, futures,
     * or other financial products tracking its price.
     * </pre>
     *
     * <code>INSTRUMENT_TYPE_GOLD = 12;</code>
     */
    INSTRUMENT_TYPE_GOLD(12),
    /**
     * <pre>
     * Silver as a commodity.
     * </pre>
     *
     * <code>INSTRUMENT_TYPE_SILVER = 13;</code>
     */
    INSTRUMENT_TYPE_SILVER(13),
    /**
     * <pre>
     * Platinum as a commodity.
     * </pre>
     *
     * <code>INSTRUMENT_TYPE_PLATINUM = 14;</code>
     */
    INSTRUMENT_TYPE_PLATINUM(14),
    /**
     * <pre>
     * Palladium as a commodity.
     * </pre>
     *
     * <code>INSTRUMENT_TYPE_PALLADIUM = 15;</code>
     */
    INSTRUMENT_TYPE_PALLADIUM(15),
    /**
     * <pre>
     * Crude oil, a key global energy commodity.
     * </pre>
     *
     * <code>INSTRUMENT_TYPE_CRUDE_OIL = 16;</code>
     */
    INSTRUMENT_TYPE_CRUDE_OIL(16),
    /**
     * <pre>
     * Natural gas, a major energy commodity.
     * </pre>
     *
     * <code>INSTRUMENT_TYPE_NATURAL_GAS = 17;</code>
     */
    INSTRUMENT_TYPE_NATURAL_GAS(17),
    /**
     * <pre>
     * Copper, an important industrial metal.
     * </pre>
     *
     * <code>INSTRUMENT_TYPE_COPPER = 18;</code>
     */
    INSTRUMENT_TYPE_COPPER(18),
    /**
     * <pre>
     * Corn, a major agricultural commodity.
     * </pre>
     *
     * <code>INSTRUMENT_TYPE_CORN = 19;</code>
     */
    INSTRUMENT_TYPE_CORN(19),
    /**
     * <pre>
     * Wheat, a staple agricultural commodity.
     * </pre>
     *
     * <code>INSTRUMENT_TYPE_WHEAT = 20;</code>
     */
    INSTRUMENT_TYPE_WHEAT(20),
    /**
     * <pre>
     * Soybeans, a key agricultural commodity used for food and animal feed.
     * </pre>
     *
     * <code>INSTRUMENT_TYPE_SOYBEANS = 21;</code>
     */
    INSTRUMENT_TYPE_SOYBEANS(21),
    /**
     * <pre>
     * A type of cryptocurrency designed to maintain a stable value by being
     * pegged to a reference asset, such as a fiat currency (e.g., USD).
     * </pre>
     *
     * <code>INSTRUMENT_TYPE_FIAT_STABLECOIN = 22;</code>
     */
    INSTRUMENT_TYPE_FIAT_STABLECOIN(22),
    /**
     * <pre>
     * A type of mutual fund that invests in highly liquid, short-term
     * instruments such as cash, cash equivalents, and high-credit-rating
     * debt securities.
     * </pre>
     *
     * <code>INSTRUMENT_TYPE_MONEY_MARKET_FUND = 23;</code>
     */
    INSTRUMENT_TYPE_MONEY_MARKET_FUND(23),
    /**
     * <pre>
     * A tax-structured investment vehicle, typically a life insurance policy,
     * that combines investment growth with a small amount of life cover.
     * </pre>
     *
     * <code>INSTRUMENT_TYPE_ENDOWMENT_WRAPPER = 24;</code>
     */
    INSTRUMENT_TYPE_ENDOWMENT_WRAPPER(24),
    UNRECOGNIZED(-1),
    ;

    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 31,
        /* patch= */ 1,
        /* suffix= */ "",
        InstrumentType.class.getName());
    }
    /**
     * <pre>
     * The instrument type is not specified. This is the default value and
     * should be treated as an error or an uninitialized state.
     * </pre>
     *
     * <code>INSTRUMENT_TYPE_UNSPECIFIED = 0;</code>
     */
    public static final int INSTRUMENT_TYPE_UNSPECIFIED_VALUE = 0;
    /**
     * <pre>
     * A catch-all for any instrument type not explicitly listed in this enum.
     * Use this for miscellaneous or newly introduced asset types.
     * </pre>
     *
     * <code>INSTRUMENT_TYPE_OTHER = 1;</code>
     */
    public static final int INSTRUMENT_TYPE_OTHER_VALUE = 1;
    /**
     * <pre>
     * Common equity in a corporation, also known as ordinary shares.
     * Holders have ownership rights, including voting rights, and are entitled
     * to a portion of profits through dividends and capital gains.
     * </pre>
     *
     * <code>INSTRUMENT_TYPE_SHARE = 2;</code>
     */
    public static final int INSTRUMENT_TYPE_SHARE_VALUE = 2;
    /**
     * <pre>
     * A class of share ownership with a higher claim on assets and earnings
     * than common shares. Preference shares generally have a fixed dividend that
     * must be paid out before dividends to common shareholders.
     * </pre>
     *
     * <code>INSTRUMENT_TYPE_PREFERENCE_SHARE = 3;</code>
     */
    public static final int INSTRUMENT_TYPE_PREFERENCE_SHARE_VALUE = 3;
    /**
     * <pre>
     * A fixed-income instrument representing a loan made by an investor to a
     * borrower (typically corporate or governmental). The borrower pays interest
     * (coupon) and repays the principal amount at a later date (maturity).
     * </pre>
     *
     * <code>INSTRUMENT_TYPE_BOND = 4;</code>
     */
    public static final int INSTRUMENT_TYPE_BOND_VALUE = 4;
    /**
     * <pre>
     * Exchange-Traded Fund. A type of pooled investment security that operates
     * much like a mutual fund but trades like a stock on an exchange. ETFs
     * hold assets such as stocks, commodities, or bonds and are typically
     * designed to track an underlying index.
     * </pre>
     *
     * <code>INSTRUMENT_TYPE_ETF = 5;</code>
     */
    public static final int INSTRUMENT_TYPE_ETF_VALUE = 5;
    /**
     * <pre>
     * Exchange-Traded Note. A type of senior, unsecured debt security that
     * tracks an underlying index of securities. ETNs do not own the underlying
     * assets and are subject to the credit risk of the issuing institution.
     * </pre>
     *
     * <code>INSTRUMENT_TYPE_ETN = 6;</code>
     */
    public static final int INSTRUMENT_TYPE_ETN_VALUE = 6;
    /**
     * <pre>
     * Actively Managed Certificate. A structured product linked to an
     * underlying portfolio or strategy. Unlike a typical index-tracking ETF,
     * its portfolio is actively managed by an investment advisor.
     * </pre>
     *
     * <code>INSTRUMENT_TYPE_AMC = 7;</code>
     */
    public static final int INSTRUMENT_TYPE_AMC_VALUE = 7;
    /**
     * <pre>
     * An open-ended investment vehicle where funds from multiple investors are
     * pooled to invest in a diversified portfolio of securities. Common in
     * collective investment schemes.
     * </pre>
     *
     * <code>INSTRUMENT_TYPE_UNIT_TRUST = 8;</code>
     */
    public static final int INSTRUMENT_TYPE_UNIT_TRUST_VALUE = 8;
    /**
     * <pre>
     * A digital or virtual currency secured by cryptography.
     * Examples include Bitcoin (BTC) and Ethereum (ETH).
     * </pre>
     *
     * <code>INSTRUMENT_TYPE_CRYPTO_CURRENCY = 9;</code>
     */
    public static final int INSTRUMENT_TYPE_CRYPTO_CURRENCY_VALUE = 9;
    /**
     * <pre>
     * Government-issued currency that is not backed by a physical commodity
     * but by the government that issued it. Examples include the US Dollar
     * (USD) and the Euro (EUR).
     * </pre>
     *
     * <code>INSTRUMENT_TYPE_FIAT_CURRENCY = 10;</code>
     */
    public static final int INSTRUMENT_TYPE_FIAT_CURRENCY_VALUE = 10;
    /**
     * <pre>
     * Rights to the financial value of a linked underlying.
     * </pre>
     *
     * <code>INSTRUMENT_TYPE_RIGHTS = 11;</code>
     */
    public static final int INSTRUMENT_TYPE_RIGHTS_VALUE = 11;
    /**
     * <pre>
     * Gold as a commodity. Can be invested in via physical bullion, futures,
     * or other financial products tracking its price.
     * </pre>
     *
     * <code>INSTRUMENT_TYPE_GOLD = 12;</code>
     */
    public static final int INSTRUMENT_TYPE_GOLD_VALUE = 12;
    /**
     * <pre>
     * Silver as a commodity.
     * </pre>
     *
     * <code>INSTRUMENT_TYPE_SILVER = 13;</code>
     */
    public static final int INSTRUMENT_TYPE_SILVER_VALUE = 13;
    /**
     * <pre>
     * Platinum as a commodity.
     * </pre>
     *
     * <code>INSTRUMENT_TYPE_PLATINUM = 14;</code>
     */
    public static final int INSTRUMENT_TYPE_PLATINUM_VALUE = 14;
    /**
     * <pre>
     * Palladium as a commodity.
     * </pre>
     *
     * <code>INSTRUMENT_TYPE_PALLADIUM = 15;</code>
     */
    public static final int INSTRUMENT_TYPE_PALLADIUM_VALUE = 15;
    /**
     * <pre>
     * Crude oil, a key global energy commodity.
     * </pre>
     *
     * <code>INSTRUMENT_TYPE_CRUDE_OIL = 16;</code>
     */
    public static final int INSTRUMENT_TYPE_CRUDE_OIL_VALUE = 16;
    /**
     * <pre>
     * Natural gas, a major energy commodity.
     * </pre>
     *
     * <code>INSTRUMENT_TYPE_NATURAL_GAS = 17;</code>
     */
    public static final int INSTRUMENT_TYPE_NATURAL_GAS_VALUE = 17;
    /**
     * <pre>
     * Copper, an important industrial metal.
     * </pre>
     *
     * <code>INSTRUMENT_TYPE_COPPER = 18;</code>
     */
    public static final int INSTRUMENT_TYPE_COPPER_VALUE = 18;
    /**
     * <pre>
     * Corn, a major agricultural commodity.
     * </pre>
     *
     * <code>INSTRUMENT_TYPE_CORN = 19;</code>
     */
    public static final int INSTRUMENT_TYPE_CORN_VALUE = 19;
    /**
     * <pre>
     * Wheat, a staple agricultural commodity.
     * </pre>
     *
     * <code>INSTRUMENT_TYPE_WHEAT = 20;</code>
     */
    public static final int INSTRUMENT_TYPE_WHEAT_VALUE = 20;
    /**
     * <pre>
     * Soybeans, a key agricultural commodity used for food and animal feed.
     * </pre>
     *
     * <code>INSTRUMENT_TYPE_SOYBEANS = 21;</code>
     */
    public static final int INSTRUMENT_TYPE_SOYBEANS_VALUE = 21;
    /**
     * <pre>
     * A type of cryptocurrency designed to maintain a stable value by being
     * pegged to a reference asset, such as a fiat currency (e.g., USD).
     * </pre>
     *
     * <code>INSTRUMENT_TYPE_FIAT_STABLECOIN = 22;</code>
     */
    public static final int INSTRUMENT_TYPE_FIAT_STABLECOIN_VALUE = 22;
    /**
     * <pre>
     * A type of mutual fund that invests in highly liquid, short-term
     * instruments such as cash, cash equivalents, and high-credit-rating
     * debt securities.
     * </pre>
     *
     * <code>INSTRUMENT_TYPE_MONEY_MARKET_FUND = 23;</code>
     */
    public static final int INSTRUMENT_TYPE_MONEY_MARKET_FUND_VALUE = 23;
    /**
     * <pre>
     * A tax-structured investment vehicle, typically a life insurance policy,
     * that combines investment growth with a small amount of life cover.
     * </pre>
     *
     * <code>INSTRUMENT_TYPE_ENDOWMENT_WRAPPER = 24;</code>
     */
    public static final int INSTRUMENT_TYPE_ENDOWMENT_WRAPPER_VALUE = 24;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static InstrumentType valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static InstrumentType forNumber(int value) {
      switch (value) {
        case 0: return INSTRUMENT_TYPE_UNSPECIFIED;
        case 1: return INSTRUMENT_TYPE_OTHER;
        case 2: return INSTRUMENT_TYPE_SHARE;
        case 3: return INSTRUMENT_TYPE_PREFERENCE_SHARE;
        case 4: return INSTRUMENT_TYPE_BOND;
        case 5: return INSTRUMENT_TYPE_ETF;
        case 6: return INSTRUMENT_TYPE_ETN;
        case 7: return INSTRUMENT_TYPE_AMC;
        case 8: return INSTRUMENT_TYPE_UNIT_TRUST;
        case 9: return INSTRUMENT_TYPE_CRYPTO_CURRENCY;
        case 10: return INSTRUMENT_TYPE_FIAT_CURRENCY;
        case 11: return INSTRUMENT_TYPE_RIGHTS;
        case 12: return INSTRUMENT_TYPE_GOLD;
        case 13: return INSTRUMENT_TYPE_SILVER;
        case 14: return INSTRUMENT_TYPE_PLATINUM;
        case 15: return INSTRUMENT_TYPE_PALLADIUM;
        case 16: return INSTRUMENT_TYPE_CRUDE_OIL;
        case 17: return INSTRUMENT_TYPE_NATURAL_GAS;
        case 18: return INSTRUMENT_TYPE_COPPER;
        case 19: return INSTRUMENT_TYPE_CORN;
        case 20: return INSTRUMENT_TYPE_WHEAT;
        case 21: return INSTRUMENT_TYPE_SOYBEANS;
        case 22: return INSTRUMENT_TYPE_FIAT_STABLECOIN;
        case 23: return INSTRUMENT_TYPE_MONEY_MARKET_FUND;
        case 24: return INSTRUMENT_TYPE_ENDOWMENT_WRAPPER;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<InstrumentType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        InstrumentType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<InstrumentType>() {
            public InstrumentType findValueByNumber(int number) {
              return InstrumentType.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return co.meshtrade.api.studio.instrument.v1.Type.getDescriptor().getEnumTypes().get(0);
    }

    private static final InstrumentType[] VALUES = values();

    public static InstrumentType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private InstrumentType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:meshtrade.studio.instrument.v1.InstrumentType)
  }


  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n)meshtrade/studio/instrument/v1/type.pr" +
      "oto\022\036meshtrade.studio.instrument.v1*\213\006\n\016" +
      "InstrumentType\022\037\n\033INSTRUMENT_TYPE_UNSPEC" +
      "IFIED\020\000\022\031\n\025INSTRUMENT_TYPE_OTHER\020\001\022\031\n\025IN" +
      "STRUMENT_TYPE_SHARE\020\002\022$\n INSTRUMENT_TYPE" +
      "_PREFERENCE_SHARE\020\003\022\030\n\024INSTRUMENT_TYPE_B" +
      "OND\020\004\022\027\n\023INSTRUMENT_TYPE_ETF\020\005\022\027\n\023INSTRU" +
      "MENT_TYPE_ETN\020\006\022\027\n\023INSTRUMENT_TYPE_AMC\020\007" +
      "\022\036\n\032INSTRUMENT_TYPE_UNIT_TRUST\020\010\022#\n\037INST" +
      "RUMENT_TYPE_CRYPTO_CURRENCY\020\t\022!\n\035INSTRUM" +
      "ENT_TYPE_FIAT_CURRENCY\020\n\022\032\n\026INSTRUMENT_T" +
      "YPE_RIGHTS\020\013\022\030\n\024INSTRUMENT_TYPE_GOLD\020\014\022\032" +
      "\n\026INSTRUMENT_TYPE_SILVER\020\r\022\034\n\030INSTRUMENT" +
      "_TYPE_PLATINUM\020\016\022\035\n\031INSTRUMENT_TYPE_PALL" +
      "ADIUM\020\017\022\035\n\031INSTRUMENT_TYPE_CRUDE_OIL\020\020\022\037" +
      "\n\033INSTRUMENT_TYPE_NATURAL_GAS\020\021\022\032\n\026INSTR" +
      "UMENT_TYPE_COPPER\020\022\022\030\n\024INSTRUMENT_TYPE_C" +
      "ORN\020\023\022\031\n\025INSTRUMENT_TYPE_WHEAT\020\024\022\034\n\030INST" +
      "RUMENT_TYPE_SOYBEANS\020\025\022#\n\037INSTRUMENT_TYP" +
      "E_FIAT_STABLECOIN\020\026\022%\n!INSTRUMENT_TYPE_M" +
      "ONEY_MARKET_FUND\020\027\022%\n!INSTRUMENT_TYPE_EN" +
      "DOWMENT_WRAPPER\020\030Bg\n%co.meshtrade.api.st" +
      "udio.instrument.v1Z>github.com/meshtrade" +
      "/api/go/studio/instrument/v1;instrument_" +
      "v1b\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        });
    descriptor.resolveAllFeaturesImmutable();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
