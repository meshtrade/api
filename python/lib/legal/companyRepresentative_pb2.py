# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: api/proto/legal/companyRepresentative.proto
# Protobuf Python Version: 5.29.0
"""Generated protocol buffer code."""
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import runtime_version as _runtime_version
from google.protobuf import symbol_database as _symbol_database
from google.protobuf.internal import builder as _builder
_runtime_version.ValidateProtobufRuntimeVersion(
    _runtime_version.Domain.PUBLIC,
    5,
    29,
    0,
    '',
    'api/proto/legal/companyRepresentative.proto'
)
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from api.python.lib.location import address_pb2 as api_dot_proto_dot_location_dot_address__pb2


DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n+api/proto/legal/companyRepresentative.proto\x12\tapi.legal\x1a api/proto/location/address.proto\"\xf7\x01\n\x15\x43ompanyRepresentative\x12\x11\n\tfirstName\x18\x01 \x01(\t\x12\x13\n\x0bmiddleNames\x18\x02 \x01(\t\x12\x10\n\x08lastName\x18\x03 \x01(\t\x12\x17\n\x0ftelephoneNumber\x18\x04 \x01(\t\x12\x17\n\x0f\x63\x65llphoneNumber\x18\x05 \x01(\t\x12\x14\n\x0c\x65mailAddress\x18\x06 \x01(\t\x12.\n\x0fphysicalAddress\x18\x07 \x01(\x0b\x32\x15.api.location.Address\x12,\n\rpostalAddress\x18\x08 \x01(\x0b\x32\x15.api.location.AddressB#Z!github.com/meshtrade/api/go/legalb\x06proto3')

_globals = globals()
_builder.BuildMessageAndEnumDescriptors(DESCRIPTOR, _globals)
_builder.BuildTopDescriptorsAndMessages(DESCRIPTOR, 'api.python.lib.legal.companyRepresentative_pb2', _globals)
if not _descriptor._USE_C_DESCRIPTORS:
  _globals['DESCRIPTOR']._loaded_options = None
  _globals['DESCRIPTOR']._serialized_options = b'Z!github.com/meshtrade/api/go/legal'
  _globals['_COMPANYREPRESENTATIVE']._serialized_start=93
  _globals['_COMPANYREPRESENTATIVE']._serialized_end=340
# @@protoc_insertion_point(module_scope)
