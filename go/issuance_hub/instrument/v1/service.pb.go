// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: meshtrade/issuance_hub/instrument/v1/service.proto

package instrumentv1

import (
	v1 "github.com/meshtrade/api/go/type/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetInstrumentRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The unique name of the instrument resource to fetch.
	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetInstrumentRequest) Reset() {
	*x = GetInstrumentRequest{}
	mi := &file_meshtrade_issuance_hub_instrument_v1_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetInstrumentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInstrumentRequest) ProtoMessage() {}

func (x *GetInstrumentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_meshtrade_issuance_hub_instrument_v1_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInstrumentRequest.ProtoReflect.Descriptor instead.
func (*GetInstrumentRequest) Descriptor() ([]byte, []int) {
	return file_meshtrade_issuance_hub_instrument_v1_service_proto_rawDescGZIP(), []int{0}
}

func (x *GetInstrumentRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetInstrumentResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The instrument resource.
	Instrument    *Instrument `protobuf:"bytes,1,opt,name=instrument,proto3" json:"instrument,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetInstrumentResponse) Reset() {
	*x = GetInstrumentResponse{}
	mi := &file_meshtrade_issuance_hub_instrument_v1_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetInstrumentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInstrumentResponse) ProtoMessage() {}

func (x *GetInstrumentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_meshtrade_issuance_hub_instrument_v1_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInstrumentResponse.ProtoReflect.Descriptor instead.
func (*GetInstrumentResponse) Descriptor() ([]byte, []int) {
	return file_meshtrade_issuance_hub_instrument_v1_service_proto_rawDescGZIP(), []int{1}
}

func (x *GetInstrumentResponse) GetInstrument() *Instrument {
	if x != nil {
		return x.Instrument
	}
	return nil
}

type MintInstrumentRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The quantity of the instrument to mint (denominated in token of the instrument).
	Amount *v1.Amount `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount,omitempty"`
	// The account identifier that will pay the transaction fees for the mint operation.
	FeeAccount string `protobuf:"bytes,2,opt,name=fee_account,json=feeAccount,proto3" json:"fee_account,omitempty"`
	// The account identifier that will receive the newly created instrument units.
	DestinationAccount string `protobuf:"bytes,3,opt,name=destination_account,json=destinationAccount,proto3" json:"destination_account,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *MintInstrumentRequest) Reset() {
	*x = MintInstrumentRequest{}
	mi := &file_meshtrade_issuance_hub_instrument_v1_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MintInstrumentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MintInstrumentRequest) ProtoMessage() {}

func (x *MintInstrumentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_meshtrade_issuance_hub_instrument_v1_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MintInstrumentRequest.ProtoReflect.Descriptor instead.
func (*MintInstrumentRequest) Descriptor() ([]byte, []int) {
	return file_meshtrade_issuance_hub_instrument_v1_service_proto_rawDescGZIP(), []int{2}
}

func (x *MintInstrumentRequest) GetAmount() *v1.Amount {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *MintInstrumentRequest) GetFeeAccount() string {
	if x != nil {
		return x.FeeAccount
	}
	return ""
}

func (x *MintInstrumentRequest) GetDestinationAccount() string {
	if x != nil {
		return x.DestinationAccount
	}
	return ""
}

type MintInstrumentResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The unique identifier for the minting transaction. This ID can be used to
	// query a transaction monitoring service to check for completion and success.
	TransactionId string `protobuf:"bytes,1,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MintInstrumentResponse) Reset() {
	*x = MintInstrumentResponse{}
	mi := &file_meshtrade_issuance_hub_instrument_v1_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MintInstrumentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MintInstrumentResponse) ProtoMessage() {}

func (x *MintInstrumentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_meshtrade_issuance_hub_instrument_v1_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MintInstrumentResponse.ProtoReflect.Descriptor instead.
func (*MintInstrumentResponse) Descriptor() ([]byte, []int) {
	return file_meshtrade_issuance_hub_instrument_v1_service_proto_rawDescGZIP(), []int{3}
}

func (x *MintInstrumentResponse) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

type BurnInstrumentRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The quantity of the instrument to burn (denominated in token of the instrument).
	Amount *v1.Amount `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount,omitempty"`
	// The account identifier that will pay the transaction fees for the burn operation.
	FeeAccount string `protobuf:"bytes,2,opt,name=fee_account,json=feeAccount,proto3" json:"fee_account,omitempty"`
	// The account from which the instrument units will be burned. This account
	// must have a sufficient balance.
	SourceAccount string `protobuf:"bytes,3,opt,name=source_account,json=sourceAccount,proto3" json:"source_account,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BurnInstrumentRequest) Reset() {
	*x = BurnInstrumentRequest{}
	mi := &file_meshtrade_issuance_hub_instrument_v1_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BurnInstrumentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BurnInstrumentRequest) ProtoMessage() {}

func (x *BurnInstrumentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_meshtrade_issuance_hub_instrument_v1_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BurnInstrumentRequest.ProtoReflect.Descriptor instead.
func (*BurnInstrumentRequest) Descriptor() ([]byte, []int) {
	return file_meshtrade_issuance_hub_instrument_v1_service_proto_rawDescGZIP(), []int{4}
}

func (x *BurnInstrumentRequest) GetAmount() *v1.Amount {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *BurnInstrumentRequest) GetFeeAccount() string {
	if x != nil {
		return x.FeeAccount
	}
	return ""
}

func (x *BurnInstrumentRequest) GetSourceAccount() string {
	if x != nil {
		return x.SourceAccount
	}
	return ""
}

type BurnInstrumentResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The unique identifier for the burning transaction. This ID can be used to
	// query a transaction monitoring service to check for completion and success.
	TransactionId string `protobuf:"bytes,1,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BurnInstrumentResponse) Reset() {
	*x = BurnInstrumentResponse{}
	mi := &file_meshtrade_issuance_hub_instrument_v1_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BurnInstrumentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BurnInstrumentResponse) ProtoMessage() {}

func (x *BurnInstrumentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_meshtrade_issuance_hub_instrument_v1_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BurnInstrumentResponse.ProtoReflect.Descriptor instead.
func (*BurnInstrumentResponse) Descriptor() ([]byte, []int) {
	return file_meshtrade_issuance_hub_instrument_v1_service_proto_rawDescGZIP(), []int{5}
}

func (x *BurnInstrumentResponse) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

var File_meshtrade_issuance_hub_instrument_v1_service_proto protoreflect.FileDescriptor

const file_meshtrade_issuance_hub_instrument_v1_service_proto_rawDesc = "" +
	"\n" +
	"2meshtrade/issuance_hub/instrument/v1/service.proto\x12$meshtrade.issuance_hub.instrument.v1\x1a5meshtrade/issuance_hub/instrument/v1/instrument.proto\x1a\x1emeshtrade/type/v1/amount.proto\"*\n" +
	"\x14GetInstrumentRequest\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\"i\n" +
	"\x15GetInstrumentResponse\x12P\n" +
	"\n" +
	"instrument\x18\x01 \x01(\v20.meshtrade.issuance_hub.instrument.v1.InstrumentR\n" +
	"instrument\"\x9c\x01\n" +
	"\x15MintInstrumentRequest\x121\n" +
	"\x06amount\x18\x01 \x01(\v2\x19.meshtrade.type.v1.AmountR\x06amount\x12\x1f\n" +
	"\vfee_account\x18\x02 \x01(\tR\n" +
	"feeAccount\x12/\n" +
	"\x13destination_account\x18\x03 \x01(\tR\x12destinationAccount\"?\n" +
	"\x16MintInstrumentResponse\x12%\n" +
	"\x0etransaction_id\x18\x01 \x01(\tR\rtransactionId\"\x92\x01\n" +
	"\x15BurnInstrumentRequest\x121\n" +
	"\x06amount\x18\x01 \x01(\v2\x19.meshtrade.type.v1.AmountR\x06amount\x12\x1f\n" +
	"\vfee_account\x18\x02 \x01(\tR\n" +
	"feeAccount\x12%\n" +
	"\x0esource_account\x18\x03 \x01(\tR\rsourceAccount\"?\n" +
	"\x16BurnInstrumentResponse\x12%\n" +
	"\x0etransaction_id\x18\x01 \x01(\tR\rtransactionId2\x9b\x03\n" +
	"\x11InstrumentService\x12~\n" +
	"\x03Get\x12:.meshtrade.issuance_hub.instrument.v1.GetInstrumentRequest\x1a;.meshtrade.issuance_hub.instrument.v1.GetInstrumentResponse\x12\x81\x01\n" +
	"\x04Mint\x12;.meshtrade.issuance_hub.instrument.v1.MintInstrumentRequest\x1a<.meshtrade.issuance_hub.instrument.v1.MintInstrumentResponse\x12\x81\x01\n" +
	"\x04Burn\x12;.meshtrade.issuance_hub.instrument.v1.BurnInstrumentRequest\x1a<.meshtrade.issuance_hub.instrument.v1.BurnInstrumentResponseBEZCgithub.com/meshtrade/api/go/issuance_hub/instrument/v1;instrumentv1b\x06proto3"

var (
	file_meshtrade_issuance_hub_instrument_v1_service_proto_rawDescOnce sync.Once
	file_meshtrade_issuance_hub_instrument_v1_service_proto_rawDescData []byte
)

func file_meshtrade_issuance_hub_instrument_v1_service_proto_rawDescGZIP() []byte {
	file_meshtrade_issuance_hub_instrument_v1_service_proto_rawDescOnce.Do(func() {
		file_meshtrade_issuance_hub_instrument_v1_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_meshtrade_issuance_hub_instrument_v1_service_proto_rawDesc), len(file_meshtrade_issuance_hub_instrument_v1_service_proto_rawDesc)))
	})
	return file_meshtrade_issuance_hub_instrument_v1_service_proto_rawDescData
}

var file_meshtrade_issuance_hub_instrument_v1_service_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_meshtrade_issuance_hub_instrument_v1_service_proto_goTypes = []any{
	(*GetInstrumentRequest)(nil),   // 0: meshtrade.issuance_hub.instrument.v1.GetInstrumentRequest
	(*GetInstrumentResponse)(nil),  // 1: meshtrade.issuance_hub.instrument.v1.GetInstrumentResponse
	(*MintInstrumentRequest)(nil),  // 2: meshtrade.issuance_hub.instrument.v1.MintInstrumentRequest
	(*MintInstrumentResponse)(nil), // 3: meshtrade.issuance_hub.instrument.v1.MintInstrumentResponse
	(*BurnInstrumentRequest)(nil),  // 4: meshtrade.issuance_hub.instrument.v1.BurnInstrumentRequest
	(*BurnInstrumentResponse)(nil), // 5: meshtrade.issuance_hub.instrument.v1.BurnInstrumentResponse
	(*Instrument)(nil),             // 6: meshtrade.issuance_hub.instrument.v1.Instrument
	(*v1.Amount)(nil),              // 7: meshtrade.type.v1.Amount
}
var file_meshtrade_issuance_hub_instrument_v1_service_proto_depIdxs = []int32{
	6, // 0: meshtrade.issuance_hub.instrument.v1.GetInstrumentResponse.instrument:type_name -> meshtrade.issuance_hub.instrument.v1.Instrument
	7, // 1: meshtrade.issuance_hub.instrument.v1.MintInstrumentRequest.amount:type_name -> meshtrade.type.v1.Amount
	7, // 2: meshtrade.issuance_hub.instrument.v1.BurnInstrumentRequest.amount:type_name -> meshtrade.type.v1.Amount
	0, // 3: meshtrade.issuance_hub.instrument.v1.InstrumentService.Get:input_type -> meshtrade.issuance_hub.instrument.v1.GetInstrumentRequest
	2, // 4: meshtrade.issuance_hub.instrument.v1.InstrumentService.Mint:input_type -> meshtrade.issuance_hub.instrument.v1.MintInstrumentRequest
	4, // 5: meshtrade.issuance_hub.instrument.v1.InstrumentService.Burn:input_type -> meshtrade.issuance_hub.instrument.v1.BurnInstrumentRequest
	1, // 6: meshtrade.issuance_hub.instrument.v1.InstrumentService.Get:output_type -> meshtrade.issuance_hub.instrument.v1.GetInstrumentResponse
	3, // 7: meshtrade.issuance_hub.instrument.v1.InstrumentService.Mint:output_type -> meshtrade.issuance_hub.instrument.v1.MintInstrumentResponse
	5, // 8: meshtrade.issuance_hub.instrument.v1.InstrumentService.Burn:output_type -> meshtrade.issuance_hub.instrument.v1.BurnInstrumentResponse
	6, // [6:9] is the sub-list for method output_type
	3, // [3:6] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_meshtrade_issuance_hub_instrument_v1_service_proto_init() }
func file_meshtrade_issuance_hub_instrument_v1_service_proto_init() {
	if File_meshtrade_issuance_hub_instrument_v1_service_proto != nil {
		return
	}
	file_meshtrade_issuance_hub_instrument_v1_instrument_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_meshtrade_issuance_hub_instrument_v1_service_proto_rawDesc), len(file_meshtrade_issuance_hub_instrument_v1_service_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_meshtrade_issuance_hub_instrument_v1_service_proto_goTypes,
		DependencyIndexes: file_meshtrade_issuance_hub_instrument_v1_service_proto_depIdxs,
		MessageInfos:      file_meshtrade_issuance_hub_instrument_v1_service_proto_msgTypes,
	}.Build()
	File_meshtrade_issuance_hub_instrument_v1_service_proto = out.File
	file_meshtrade_issuance_hub_instrument_v1_service_proto_goTypes = nil
	file_meshtrade_issuance_hub_instrument_v1_service_proto_depIdxs = nil
}
