// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: meshtrade/issuance_hub/instrument/v1/service.proto

package instrumentv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	InstrumentService_GetInstrument_FullMethodName  = "/meshtrade.issuance_hub.instrument.v1.InstrumentService/GetInstrument"
	InstrumentService_MintInstrument_FullMethodName = "/meshtrade.issuance_hub.instrument.v1.InstrumentService/MintInstrument"
	InstrumentService_BurnInstrument_FullMethodName = "/meshtrade.issuance_hub.instrument.v1.InstrumentService/BurnInstrument"
)

// InstrumentServiceClient is the client API for InstrumentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service defines the RPC methods for interacting with the instrument resource,
// such as creating, updating, minting or burning it.
type InstrumentServiceClient interface {
	// Retrieve a specific instrument.
	GetInstrument(ctx context.Context, in *GetInstrumentRequest, opts ...grpc.CallOption) (*Instrument, error)
	// Mints new units of an instrument into a given destination account.
	MintInstrument(ctx context.Context, in *MintInstrumentRequest, opts ...grpc.CallOption) (*MintInstrumentResponse, error)
	// Burns a specified amount of an instrument from a source account.
	BurnInstrument(ctx context.Context, in *BurnInstrumentRequest, opts ...grpc.CallOption) (*BurnInstrumentResponse, error)
}

type instrumentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInstrumentServiceClient(cc grpc.ClientConnInterface) InstrumentServiceClient {
	return &instrumentServiceClient{cc}
}

func (c *instrumentServiceClient) GetInstrument(ctx context.Context, in *GetInstrumentRequest, opts ...grpc.CallOption) (*Instrument, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Instrument)
	err := c.cc.Invoke(ctx, InstrumentService_GetInstrument_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *instrumentServiceClient) MintInstrument(ctx context.Context, in *MintInstrumentRequest, opts ...grpc.CallOption) (*MintInstrumentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MintInstrumentResponse)
	err := c.cc.Invoke(ctx, InstrumentService_MintInstrument_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *instrumentServiceClient) BurnInstrument(ctx context.Context, in *BurnInstrumentRequest, opts ...grpc.CallOption) (*BurnInstrumentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BurnInstrumentResponse)
	err := c.cc.Invoke(ctx, InstrumentService_BurnInstrument_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InstrumentServiceServer is the server API for InstrumentService service.
// All implementations must embed UnimplementedInstrumentServiceServer
// for forward compatibility.
//
// Service defines the RPC methods for interacting with the instrument resource,
// such as creating, updating, minting or burning it.
type InstrumentServiceServer interface {
	// Retrieve a specific instrument.
	GetInstrument(context.Context, *GetInstrumentRequest) (*Instrument, error)
	// Mints new units of an instrument into a given destination account.
	MintInstrument(context.Context, *MintInstrumentRequest) (*MintInstrumentResponse, error)
	// Burns a specified amount of an instrument from a source account.
	BurnInstrument(context.Context, *BurnInstrumentRequest) (*BurnInstrumentResponse, error)
	mustEmbedUnimplementedInstrumentServiceServer()
}

// UnimplementedInstrumentServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedInstrumentServiceServer struct{}

func (UnimplementedInstrumentServiceServer) GetInstrument(context.Context, *GetInstrumentRequest) (*Instrument, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInstrument not implemented")
}
func (UnimplementedInstrumentServiceServer) MintInstrument(context.Context, *MintInstrumentRequest) (*MintInstrumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MintInstrument not implemented")
}
func (UnimplementedInstrumentServiceServer) BurnInstrument(context.Context, *BurnInstrumentRequest) (*BurnInstrumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BurnInstrument not implemented")
}
func (UnimplementedInstrumentServiceServer) mustEmbedUnimplementedInstrumentServiceServer() {}
func (UnimplementedInstrumentServiceServer) testEmbeddedByValue()                           {}

// UnsafeInstrumentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InstrumentServiceServer will
// result in compilation errors.
type UnsafeInstrumentServiceServer interface {
	mustEmbedUnimplementedInstrumentServiceServer()
}

func RegisterInstrumentServiceServer(s grpc.ServiceRegistrar, srv InstrumentServiceServer) {
	// If the following call pancis, it indicates UnimplementedInstrumentServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&InstrumentService_ServiceDesc, srv)
}

func _InstrumentService_GetInstrument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInstrumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstrumentServiceServer).GetInstrument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InstrumentService_GetInstrument_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstrumentServiceServer).GetInstrument(ctx, req.(*GetInstrumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstrumentService_MintInstrument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MintInstrumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstrumentServiceServer).MintInstrument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InstrumentService_MintInstrument_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstrumentServiceServer).MintInstrument(ctx, req.(*MintInstrumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstrumentService_BurnInstrument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BurnInstrumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstrumentServiceServer).BurnInstrument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InstrumentService_BurnInstrument_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstrumentServiceServer).BurnInstrument(ctx, req.(*BurnInstrumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InstrumentService_ServiceDesc is the grpc.ServiceDesc for InstrumentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InstrumentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "meshtrade.issuance_hub.instrument.v1.InstrumentService",
	HandlerType: (*InstrumentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetInstrument",
			Handler:    _InstrumentService_GetInstrument_Handler,
		},
		{
			MethodName: "MintInstrument",
			Handler:    _InstrumentService_MintInstrument_Handler,
		},
		{
			MethodName: "BurnInstrument",
			Handler:    _InstrumentService_BurnInstrument_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "meshtrade/issuance_hub/instrument/v1/service.proto",
}
