// Code generated by protoc-gen-meshgo. DO NOT EDIT.
// source: meshtrade/issuance_hub/instrument/v1/service.proto
package instrumentv1

import (
	context "context"
	fmt "fmt"
	log "github.com/rs/zerolog/log"
	trace "go.opentelemetry.io/otel/trace"
	grpc "google.golang.org/grpc"
)

// Ensure that GRPCClientInstrumentService implements the InstrumentService interface
var _ InstrumentService = &GRPCClientInstrumentService{}

// GRPCClientInstrumentService is a gRPC client implementation of the InstrumentService interface.
type GRPCClientInstrumentService struct {
	tracer     trace.Tracer
	grpcClient InstrumentServiceClient
}

func NewGRPCClientInstrumentService(
	tracer trace.Tracer,
	grpcClientConnection *grpc.ClientConn,
) *GRPCClientInstrumentService {
	return &GRPCClientInstrumentService{
		tracer:     tracer,
		grpcClient: NewInstrumentServiceClient(grpcClientConnection),
	}
}

func (g *GRPCClientInstrumentService) GetInstrument(ctx context.Context, request *GetInstrumentRequest) (*Instrument, error) {
	ctx, span := g.tracer.Start(
		ctx,
		InstrumentServiceServiceProviderName+"GetInstrument",
	)
	defer span.End()

	// call given implementation of the adapted service provider interface
	getInstrumentResponse, err := g.grpcClient.GetInstrument(ctx, request)
	if err != nil {
		log.Ctx(ctx).Error().Err(err).Msg("could not GetInstrument")
		return nil, fmt.Errorf("could not GetInstrument: %s", err)
	}

	return getInstrumentResponse, nil
}

func (g *GRPCClientInstrumentService) MintInstrument(ctx context.Context, request *MintInstrumentRequest) (*MintInstrumentResponse, error) {
	ctx, span := g.tracer.Start(
		ctx,
		InstrumentServiceServiceProviderName+"MintInstrument",
	)
	defer span.End()

	// call given implementation of the adapted service provider interface
	mintInstrumentResponse, err := g.grpcClient.MintInstrument(ctx, request)
	if err != nil {
		log.Ctx(ctx).Error().Err(err).Msg("could not MintInstrument")
		return nil, fmt.Errorf("could not MintInstrument: %s", err)
	}

	return mintInstrumentResponse, nil
}

func (g *GRPCClientInstrumentService) BurnInstrument(ctx context.Context, request *BurnInstrumentRequest) (*BurnInstrumentResponse, error) {
	ctx, span := g.tracer.Start(
		ctx,
		InstrumentServiceServiceProviderName+"BurnInstrument",
	)
	defer span.End()

	// call given implementation of the adapted service provider interface
	burnInstrumentResponse, err := g.grpcClient.BurnInstrument(ctx, request)
	if err != nil {
		log.Ctx(ctx).Error().Err(err).Msg("could not BurnInstrument")
		return nil, fmt.Errorf("could not BurnInstrument: %s", err)
	}

	return burnInstrumentResponse, nil
}
