// Code generated by protoc-gen-meshgo. DO NOT EDIT.
// source: meshtrade/issuance_hub/instrument/v1/service.proto
package instrumentv1

import (
	context "context"
	sync "sync"
	testing "testing"
)

// Ensure that MockInstrumentService implements the InstrumentService interface
var _ InstrumentService = &MockInstrumentService{}

// MockInstrumentService is a mock implementation of the InstrumentService interface.
type MockInstrumentService struct {
	mutex               sync.Mutex
	T                   *testing.T
	GetFunc             func(t *testing.T, m *MockInstrumentService, ctx context.Context, request *GetInstrumentRequest) (*GetInstrumentResponse, error)
	GetFuncInvocations  int
	MintFunc            func(t *testing.T, m *MockInstrumentService, ctx context.Context, request *MintInstrumentRequest) (*MintInstrumentResponse, error)
	MintFuncInvocations int
	BurnFunc            func(t *testing.T, m *MockInstrumentService, ctx context.Context, request *BurnInstrumentRequest) (*BurnInstrumentResponse, error)
	BurnFuncInvocations int
}

func (m *MockInstrumentService) Get(ctx context.Context, request *GetInstrumentRequest) (*GetInstrumentResponse, error) {
	m.mutex.Lock()
	m.GetFuncInvocations++
	m.mutex.Unlock()
	if m.GetFunc == nil {
		return nil, nil
	}
	return m.GetFunc(m.T, m, ctx, request)
}

func (m *MockInstrumentService) Mint(ctx context.Context, request *MintInstrumentRequest) (*MintInstrumentResponse, error) {
	m.mutex.Lock()
	m.MintFuncInvocations++
	m.mutex.Unlock()
	if m.MintFunc == nil {
		return nil, nil
	}
	return m.MintFunc(m.T, m, ctx, request)
}

func (m *MockInstrumentService) Burn(ctx context.Context, request *BurnInstrumentRequest) (*BurnInstrumentResponse, error) {
	m.mutex.Lock()
	m.BurnFuncInvocations++
	m.mutex.Unlock()
	if m.BurnFunc == nil {
		return nil, nil
	}
	return m.BurnFunc(m.T, m, ctx, request)
}
