// Code generated by protoc-gen-meshgo. DO NOT EDIT.
// source: meshtrade/issuance_hub/instrument/v1/service.proto
package instrumentv1

import (
	context "context"
	grpc "github.com/meshtrade/api/go/grpc"
	config "github.com/meshtrade/api/go/grpc/config"
)

// InstrumentServiceClientInterface is a gRPC service for the InstrumentService service.
// It combines the service interface with resource management capabilities using
// the common BaseGRPCClient for consistent authentication, timeouts, and tracing.
//
// Example usage:
//
//	service, err := NewInstrumentService(
//		config.WithAPIKey("your-api-key"),
//		config.WithGroup("groups/your-group-id"),
//		config.WithTimeout(30 * time.Second),
//	)
//	if err != nil {
//		log.Fatal(err)
//	}
//	defer service.Close()
type InstrumentServiceClientInterface interface {
	InstrumentService
	grpc.GRPCClient
}

// instrumentService is the internal implementation of the InstrumentServiceClientInterface interface.
// It embeds BaseGRPCClient to provide all common gRPC functionality.
type instrumentService struct {
	*grpc.BaseGRPCClient[InstrumentServiceClient]
}

// ensure instrumentService implements the InstrumentServiceClientInterface interface
var _ InstrumentServiceClientInterface = &instrumentService{}

// NewInstrumentService creates a new gRPC service for the InstrumentService service.
// The service uses the common BaseGRPCClient for all functionality including
// connection management, authentication, timeouts, and distributed tracing.
//
// Parameters:
//   - opts: Functional options to configure the client
//
// Returns:
//   - InstrumentServiceClientInterface: Configured service instance
//   - error: Configuration or connection error
func NewInstrumentService(opts ...config.ServiceOption) (InstrumentServiceClientInterface, error) {
	base, err := grpc.NewBaseGRPCClient(
		InstrumentServiceServiceProviderName,
		NewInstrumentServiceClient,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return &instrumentService{BaseGRPCClient: base}, nil
}

// GetInstrument executes the GetInstrument RPC method with automatic
// timeout handling, distributed tracing, and authentication.
func (s *instrumentService) GetInstrument(ctx context.Context, request *GetInstrumentRequest) (*Instrument, error) {
	return grpc.Execute(s.Executor(), ctx, "GetInstrument", func(ctx context.Context) (*Instrument, error) {
		return s.GrpcClient().GetInstrument(ctx, request)
	})
}

// MintInstrument executes the MintInstrument RPC method with automatic
// timeout handling, distributed tracing, and authentication.
func (s *instrumentService) MintInstrument(ctx context.Context, request *MintInstrumentRequest) (*MintInstrumentResponse, error) {
	return grpc.Execute(s.Executor(), ctx, "MintInstrument", func(ctx context.Context) (*MintInstrumentResponse, error) {
		return s.GrpcClient().MintInstrument(ctx, request)
	})
}

// BurnInstrument executes the BurnInstrument RPC method with automatic
// timeout handling, distributed tracing, and authentication.
func (s *instrumentService) BurnInstrument(ctx context.Context, request *BurnInstrumentRequest) (*BurnInstrumentResponse, error) {
	return grpc.Execute(s.Executor(), ctx, "BurnInstrument", func(ctx context.Context) (*BurnInstrumentResponse, error) {
		return s.GrpcClient().BurnInstrument(ctx, request)
	})
}
