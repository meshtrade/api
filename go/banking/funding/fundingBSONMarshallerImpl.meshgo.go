// Code generated by protoc-gen-meshgo. DO NOT EDIT.
// source: api/proto/banking/funding/funding.proto
package funding

import (
	fmt "fmt"
	bson "go.mongodb.org/mongo-driver/bson"
	bsontype "go.mongodb.org/mongo-driver/bson/bsontype"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	time "time"
)

// fundingBSONAtTypeName is the annotation used when marshalling a Funding to BSON for mongo db persistence
const fundingBSONAtTypeName = "mesh::funding/Funding"

// Ensure that Funding implements the bson.Marshaler interface
var _ bson.Marshaler = &Funding{}

// MarshalBSONValue is called to marshal Funding when it is embedded as a field in another struct.
// This behaviour is overridden to get desired nil behaviour.
func (f *Funding) MarshalBSONValue() (bsontype.Type, []byte, error) {
	// if this Funding is nil then return the bson null type and no data
	if f == nil {
		return bson.TypeNull, nil, nil
	}

	// otherwise call the MarshalBSON method to get data and a possible error
	bsonData, err := f.MarshalBSON()

	// then return the bson embedded document type along with the associated data and error
	return bson.TypeEmbeddedDocument, bsonData, err
}

// MarshalBSON controls the marshalling of a Funding to BSON for persistence to mongo db
func (f *Funding) MarshalBSON() ([]byte, error) {
	type Alias Funding
	return bson.Marshal(struct {
		AtType    string `bson:"@type"`
		Alias     `bson:"inline"`
		ValueDate *time.Time
	}{
		AtType: fundingBSONAtTypeName,
		Alias:  Alias(*f),
		// convert protobuf time to go native time for better bson marshalled representation
		ValueDate: func() *time.Time {
			if f.ValueDate == nil {
				return nil
			} else {
				t := f.ValueDate.AsTime()
				return &t
			}
		}(),
	})
}

// Ensure that Funding implements the bson.Unmarshaler interface
var _ bson.Unmarshaler = &Funding{}

// MarshalBSON controls the unmarshalling of a Funding from BSON
func (f *Funding) UnmarshalBSON(data []byte) error {
	// prepare marshalled type to unmarshall into
	type Alias Funding
	var marshalled = struct {
		Alias     `bson:"inline"`
		ValueDate *time.Time
	}{}

	// perform unmarshal
	if err := bson.Unmarshal(data, &marshalled); err != nil {
		return fmt.Errorf("error unmarshalling Funding: %w", err)
	}

	// set alias fields
	*f = Funding(marshalled.Alias)

	// set overridden fields
	if marshalled.ValueDate == nil {
		f.ValueDate = nil
	} else {
		f.ValueDate = timestamppb.New(*marshalled.ValueDate)
	}

	return nil
}
