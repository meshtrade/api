// Code generated by protoc-gen-meshgo. DO NOT EDIT.
// source: api/proto/banking/funding/peachSettlementMetadata.proto
package funding

import (
	fmt "fmt"
	bson "go.mongodb.org/mongo-driver/bson"
	bsontype "go.mongodb.org/mongo-driver/bson/bsontype"
)

// peachSettlementMetaDataBSONAtTypeName is the annotation used when marshalling a PeachSettlementMetaData to BSON for mongo db persistence
const peachSettlementMetaDataBSONAtTypeName = "mesh::funding/PeachSettlementMetaData"

// Ensure that PeachSettlementMetaData implements the bson.Marshaler interface
var _ bson.Marshaler = &PeachSettlementMetaData{}

// MarshalBSONValue is called to marshal PeachSettlementMetaData when it is embedded as a field in another struct.
// This behaviour is overridden to get desired nil behaviour.
func (p *PeachSettlementMetaData) MarshalBSONValue() (bsontype.Type, []byte, error) {
	// if this PeachSettlementMetaData is nil then return the bson null type and no data
	if p == nil {
		return bson.TypeNull, nil, nil
	}

	// otherwise call the MarshalBSON method to get data and a possible error
	bsonData, err := p.MarshalBSON()

	// then return the bson embedded document type along with the associated data and error
	return bson.TypeEmbeddedDocument, bsonData, err
}

// MarshalBSON controls the marshalling of a PeachSettlementMetaData to BSON for persistence to mongo db
func (p *PeachSettlementMetaData) MarshalBSON() ([]byte, error) {
	type Alias PeachSettlementMetaData
	return bson.Marshal(struct {
		AtType string `bson:"@type"`
		Alias  `bson:"inline"`
	}{
		AtType: peachSettlementMetaDataBSONAtTypeName,
		Alias:  Alias(*p),
	})
}

// Ensure that PeachSettlementMetaData implements the bson.Unmarshaler interface
var _ bson.Unmarshaler = &PeachSettlementMetaData{}

// MarshalBSON controls the unmarshalling of a PeachSettlementMetaData from BSON
func (p *PeachSettlementMetaData) UnmarshalBSON(data []byte) error {
	// prepare marshalled type to unmarshall into
	type Alias PeachSettlementMetaData
	var marshalled = struct {
		Alias `bson:"inline"`
	}{}

	// perform unmarshal
	if err := bson.Unmarshal(data, &marshalled); err != nil {
		return fmt.Errorf("error unmarshalling PeachSettlementMetaData: %w", err)
	}

	// set alias fields
	*p = PeachSettlementMetaData(marshalled.Alias)

	// set overridden fields

	return nil
}
