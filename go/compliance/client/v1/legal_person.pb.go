// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: meshtrade/compliance/client/v1/legal_person.proto

package clientv1

import (
	v1 "github.com/meshtrade/api/go/type/v1"
	date "google.golang.org/genproto/googleapis/type/date"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// LegalPerson represents the identity of a business, trust, or other non-individual entity.
// It contains the core, verifiable components of the entity's identity used during
// Know Your Business (KYB) checks.
//
// Note on Field Requirements: Fields marked as 'Required for verification' are essential
// for a successful compliance check, but are not mandatory for creation.
type LegalPerson struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The official, registered name of the legal person (e.g., the company or trust name
	// as specified in its articles of incorporation).
	//
	// Required for verification.
	RegisteredName string `protobuf:"bytes,1,opt,name=registered_name,json=registeredName,proto3" json:"registered_name,omitempty"`
	// The legal form of the entity (e.g., LTD, PLC, BV).
	//
	// Required for verification.
	LegalForm LegalPersonForm `protobuf:"varint,2,opt,name=legal_form,json=legalForm,proto3,enum=meshtrade.compliance.client.v1.LegalPersonForm" json:"legal_form,omitempty"`
	// The official registration number assigned by the relevant companies registry.
	// e.g., UK Companies House number, NL KVK-nummer, US EIN, or
	// ZA CIPC Company Registration Number (e.g., 2024/123456/07).
	//
	// Conditionally required for verification, especially for corporate entities.
	RegistrationNumber *string `protobuf:"bytes,3,opt,name=registration_number,json=registrationNumber,proto3,oneof" json:"registration_number,omitempty"`
	// The primary tax identifier for the legal person.
	// e.g., VAT number in the EU, TIN in the US, or
	// ZA SARS Income Tax Reference Number (e.g., 9123456789).
	//
	// Optional for verification.
	TaxIdentifier *string `protobuf:"bytes,4,opt,name=tax_identifier,json=taxIdentifier,proto3,oneof" json:"tax_identifier,omitempty"`
	// The ISO 3166-1 alpha-2 country code of incorporation. This is the two-letter
	// country code (e.g., "ZA" for South Africa, "NL" for the Netherlands).
	// The value should be in uppercase.
	//
	// See https://www.iso.org/iso-3166-country-codes.html for a full list.
	//
	// Required for verification.
	CountryOfIncorporation string `protobuf:"bytes,5,opt,name=country_of_incorporation,json=countryOfIncorporation,proto3" json:"country_of_incorporation,omitempty"`
	// The date of incorporation or registration of the legal person.
	//
	// Required for verification.
	DateOfIncorporation *date.Date `protobuf:"bytes,6,opt,name=date_of_incorporation,json=dateOfIncorporation,proto3" json:"date_of_incorporation,omitempty"`
	// The official, legal address of the entity as recorded with the incorporation registry.
	// This is the most critical address for verification purposes.
	//
	// Required for verification.
	RegisteredAddress *v1.Address `protobuf:"bytes,7,opt,name=registered_address,json=registeredAddress,proto3" json:"registered_address,omitempty"`
	// The principal physical location where the business operates from (principal place of business).
	// Provide this if it is different from the registered address.
	PrincipalPhysicalAddress *v1.Address `protobuf:"bytes,8,opt,name=principal_physical_address,json=principalPhysicalAddress,proto3,oneof" json:"principal_physical_address,omitempty"`
	// The preferred address for receiving mail and correspondence.
	// Provide this if it is different from the registered address.
	PostalAddress *v1.Address `protobuf:"bytes,9,opt,name=postal_address,json=postalAddress,proto3,oneof" json:"postal_address,omitempty"`
	// The address of the head office of a business.
	// Provide this if it is different from the registered address.
	HeadOfficeAddress *v1.Address `protobuf:"bytes,10,opt,name=head_office_address,json=headOfficeAddress,proto3,oneof" json:"head_office_address,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *LegalPerson) Reset() {
	*x = LegalPerson{}
	mi := &file_meshtrade_compliance_client_v1_legal_person_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LegalPerson) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LegalPerson) ProtoMessage() {}

func (x *LegalPerson) ProtoReflect() protoreflect.Message {
	mi := &file_meshtrade_compliance_client_v1_legal_person_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LegalPerson.ProtoReflect.Descriptor instead.
func (*LegalPerson) Descriptor() ([]byte, []int) {
	return file_meshtrade_compliance_client_v1_legal_person_proto_rawDescGZIP(), []int{0}
}

func (x *LegalPerson) GetRegisteredName() string {
	if x != nil {
		return x.RegisteredName
	}
	return ""
}

func (x *LegalPerson) GetLegalForm() LegalPersonForm {
	if x != nil {
		return x.LegalForm
	}
	return LegalPersonForm_LEGAL_PERSON_FORM_UNSPECIFIED
}

func (x *LegalPerson) GetRegistrationNumber() string {
	if x != nil && x.RegistrationNumber != nil {
		return *x.RegistrationNumber
	}
	return ""
}

func (x *LegalPerson) GetTaxIdentifier() string {
	if x != nil && x.TaxIdentifier != nil {
		return *x.TaxIdentifier
	}
	return ""
}

func (x *LegalPerson) GetCountryOfIncorporation() string {
	if x != nil {
		return x.CountryOfIncorporation
	}
	return ""
}

func (x *LegalPerson) GetDateOfIncorporation() *date.Date {
	if x != nil {
		return x.DateOfIncorporation
	}
	return nil
}

func (x *LegalPerson) GetRegisteredAddress() *v1.Address {
	if x != nil {
		return x.RegisteredAddress
	}
	return nil
}

func (x *LegalPerson) GetPrincipalPhysicalAddress() *v1.Address {
	if x != nil {
		return x.PrincipalPhysicalAddress
	}
	return nil
}

func (x *LegalPerson) GetPostalAddress() *v1.Address {
	if x != nil {
		return x.PostalAddress
	}
	return nil
}

func (x *LegalPerson) GetHeadOfficeAddress() *v1.Address {
	if x != nil {
		return x.HeadOfficeAddress
	}
	return nil
}

var File_meshtrade_compliance_client_v1_legal_person_proto protoreflect.FileDescriptor

const file_meshtrade_compliance_client_v1_legal_person_proto_rawDesc = "" +
	"\n" +
	"1meshtrade/compliance/client/v1/legal_person.proto\x12\x1emeshtrade.compliance.client.v1\x1a\x16google/type/date.proto\x1a6meshtrade/compliance/client/v1/legal_person_form.proto\x1a\x1fmeshtrade/type/v1/address.proto\"\xa1\x06\n" +
	"\vLegalPerson\x12'\n" +
	"\x0fregistered_name\x18\x01 \x01(\tR\x0eregisteredName\x12N\n" +
	"\n" +
	"legal_form\x18\x02 \x01(\x0e2/.meshtrade.compliance.client.v1.LegalPersonFormR\tlegalForm\x124\n" +
	"\x13registration_number\x18\x03 \x01(\tH\x00R\x12registrationNumber\x88\x01\x01\x12*\n" +
	"\x0etax_identifier\x18\x04 \x01(\tH\x01R\rtaxIdentifier\x88\x01\x01\x128\n" +
	"\x18country_of_incorporation\x18\x05 \x01(\tR\x16countryOfIncorporation\x12E\n" +
	"\x15date_of_incorporation\x18\x06 \x01(\v2\x11.google.type.DateR\x13dateOfIncorporation\x12I\n" +
	"\x12registered_address\x18\a \x01(\v2\x1a.meshtrade.type.v1.AddressR\x11registeredAddress\x12]\n" +
	"\x1aprincipal_physical_address\x18\b \x01(\v2\x1a.meshtrade.type.v1.AddressH\x02R\x18principalPhysicalAddress\x88\x01\x01\x12F\n" +
	"\x0epostal_address\x18\t \x01(\v2\x1a.meshtrade.type.v1.AddressH\x03R\rpostalAddress\x88\x01\x01\x12O\n" +
	"\x13head_office_address\x18\n" +
	" \x01(\v2\x1a.meshtrade.type.v1.AddressH\x04R\x11headOfficeAddress\x88\x01\x01B\x16\n" +
	"\x14_registration_numberB\x11\n" +
	"\x0f_tax_identifierB\x1d\n" +
	"\x1b_principal_physical_addressB\x11\n" +
	"\x0f_postal_addressB\x16\n" +
	"\x14_head_office_addressB;Z9github.com/meshtrade/api/go/compliance/client/v1;clientv1b\x06proto3"

var (
	file_meshtrade_compliance_client_v1_legal_person_proto_rawDescOnce sync.Once
	file_meshtrade_compliance_client_v1_legal_person_proto_rawDescData []byte
)

func file_meshtrade_compliance_client_v1_legal_person_proto_rawDescGZIP() []byte {
	file_meshtrade_compliance_client_v1_legal_person_proto_rawDescOnce.Do(func() {
		file_meshtrade_compliance_client_v1_legal_person_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_meshtrade_compliance_client_v1_legal_person_proto_rawDesc), len(file_meshtrade_compliance_client_v1_legal_person_proto_rawDesc)))
	})
	return file_meshtrade_compliance_client_v1_legal_person_proto_rawDescData
}

var file_meshtrade_compliance_client_v1_legal_person_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_meshtrade_compliance_client_v1_legal_person_proto_goTypes = []any{
	(*LegalPerson)(nil),  // 0: meshtrade.compliance.client.v1.LegalPerson
	(LegalPersonForm)(0), // 1: meshtrade.compliance.client.v1.LegalPersonForm
	(*date.Date)(nil),    // 2: google.type.Date
	(*v1.Address)(nil),   // 3: meshtrade.type.v1.Address
}
var file_meshtrade_compliance_client_v1_legal_person_proto_depIdxs = []int32{
	1, // 0: meshtrade.compliance.client.v1.LegalPerson.legal_form:type_name -> meshtrade.compliance.client.v1.LegalPersonForm
	2, // 1: meshtrade.compliance.client.v1.LegalPerson.date_of_incorporation:type_name -> google.type.Date
	3, // 2: meshtrade.compliance.client.v1.LegalPerson.registered_address:type_name -> meshtrade.type.v1.Address
	3, // 3: meshtrade.compliance.client.v1.LegalPerson.principal_physical_address:type_name -> meshtrade.type.v1.Address
	3, // 4: meshtrade.compliance.client.v1.LegalPerson.postal_address:type_name -> meshtrade.type.v1.Address
	3, // 5: meshtrade.compliance.client.v1.LegalPerson.head_office_address:type_name -> meshtrade.type.v1.Address
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_meshtrade_compliance_client_v1_legal_person_proto_init() }
func file_meshtrade_compliance_client_v1_legal_person_proto_init() {
	if File_meshtrade_compliance_client_v1_legal_person_proto != nil {
		return
	}
	file_meshtrade_compliance_client_v1_legal_person_form_proto_init()
	file_meshtrade_compliance_client_v1_legal_person_proto_msgTypes[0].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_meshtrade_compliance_client_v1_legal_person_proto_rawDesc), len(file_meshtrade_compliance_client_v1_legal_person_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_meshtrade_compliance_client_v1_legal_person_proto_goTypes,
		DependencyIndexes: file_meshtrade_compliance_client_v1_legal_person_proto_depIdxs,
		MessageInfos:      file_meshtrade_compliance_client_v1_legal_person_proto_msgTypes,
	}.Build()
	File_meshtrade_compliance_client_v1_legal_person_proto = out.File
	file_meshtrade_compliance_client_v1_legal_person_proto_goTypes = nil
	file_meshtrade_compliance_client_v1_legal_person_proto_depIdxs = nil
}
