// Code generated by protoc-gen-meshgo. DO NOT EDIT.
// source: meshtrade/compliance/client/v1/service.proto
package clientv1

import (
	"context"
	"errors"
	fmt "fmt"
	"time"

	"github.com/meshtrade/api/go/common"
	trace "go.opentelemetry.io/otel/trace"
	"go.opentelemetry.io/otel/trace/noop"
	grpc "google.golang.org/grpc"
	"google.golang.org/grpc/credentials"
	"google.golang.org/grpc/credentials/insecure"
	"google.golang.org/grpc/metadata"
)

// ClientServiceGRPCClient is a production-ready gRPC client for the ClientService service.
// It combines the service interface with resource management capabilities, providing
// enterprise-grade features including authentication, timeouts, tracing, and connection pooling.
//
// Features:
//   - Automatic authentication via API key or access token cookies
//   - Configurable request timeouts with smart deadline handling
//   - OpenTelemetry distributed tracing support
//   - TLS/mTLS support with configurable transport credentials
//   - Proper resource cleanup with Close() method
//   - Production-ready connection management
//
// Thread Safety:
//
//	This client is safe for concurrent use by multiple goroutines.
//
// Example usage:
//
//	client, err := NewClientServiceGRPCClient(
//		WithAPIKey("your-api-key"),
//		WithTimeout(30 * time.Second),
//	)
//	if err != nil {
//		log.Fatal(err)
//	}
//	defer client.Close()
//
//	response, err := client.SomeMethod(context.Background(), &request)
type ClientServiceGRPCClient interface {
	ClientService
	common.GRPCClient
}

// ensure clientServiceGRPCClient implements the ClientServiceGRPCClient interface
var _ ClientServiceGRPCClient = &clientServiceGRPCClient{}

// clientServiceGRPCClient is the internal implementation of the ClientServiceGRPCClient interface.
// This struct maintains the gRPC connection state, authentication credentials,
// and configuration options for the client.
type clientServiceGRPCClient struct {
	url                     string
	port                    int
	tls                     bool
	conn                    *grpc.ClientConn
	grpcClient              ClientServiceClient
	tracer                  trace.Tracer
	apiKey                  string
	accessTokenCookie       string
	timeout                 time.Duration
	unaryClientInterceptors []grpc.UnaryClientInterceptor
}

// NewClientServiceGRPCClient creates a new production-ready gRPC client for the ClientService service.
// The client is configured using functional options and automatically handles connection
// management, authentication, timeouts, and distributed tracing.
//
// Default Configuration:
//   - Server: Uses common.DefaultGRPCURL and common.DefaultGRPCPort
//   - TLS: Enabled by default (common.DefaultTLS)
//   - Timeout: 30 seconds for all method calls
//   - Authentication: Attempts to load API key from MESH_API_KEY environment variable
//   - Tracing: Disabled by default (no-op tracer)
//
// Parameters:
//   - opts: Functional options to configure the client (WithAPIKey, WithTimeout, etc.)
//
// Returns:
//   - ClientServiceGRPCClient: Configured client instance
//   - error: Configuration or connection error
//
// Example:
//
//	client, err := NewClientServiceGRPCClient(
//		WithAPIKey("your-api-key-here"),
//		WithAddress("api.example.com", 443),
//		WithTimeout(10 * time.Second),
//	)
//	if err != nil {
//		return fmt.Errorf("failed to create client: %w", err)
//	}
//	defer client.Close()
//
// Thread Safety:
//
//	The returned client is safe for concurrent use by multiple goroutines.
func NewClientServiceGRPCClient(opts ...ClientOption) (ClientServiceGRPCClient, error) {
	// prepare client with default configuration
	client := &clientServiceGRPCClient{
		url:     common.DefaultGRPCURL,
		port:    common.DefaultGRPCPort,
		tls:     common.DefaultTLS,
		tracer:  noop.NewTracerProvider().Tracer(""),
		apiKey:  common.APIKEYFromEnvironment(),
		timeout: 30 * time.Second, // default 30 second timeout

		// set once options are applied and connection opened
		grpcClient:              nil,
		unaryClientInterceptors: nil,
	}

	// apply options to the client
	for _, opt := range opts {
		opt(client)
	}

	// validate authentication credentials
	if err := client.validateAuth(); err != nil {
		return nil, err
	}

	// prepare authentication interceptor
	client.unaryClientInterceptors = []grpc.UnaryClientInterceptor{
		client.authInterceptor(),
	}

	// prepare dial options
	dialOpts := make([]grpc.DialOption, 0)

	// set transport credentials
	if client.tls {
		dialOpts = append(dialOpts, grpc.WithTransportCredentials(credentials.NewClientTLSFromCert(nil, "")))
	} else {
		dialOpts = append(dialOpts, grpc.WithTransportCredentials(insecure.NewCredentials()))
	}

	dialOpts = append(dialOpts, grpc.WithChainUnaryInterceptor(client.unaryClientInterceptors...))

	// construct gRPC client connection
	conn, err := grpc.NewClient(
		fmt.Sprintf("%s:%d", client.url, client.port),
		dialOpts...,
	)
	if err != nil {
		return nil, fmt.Errorf("error constructing grpc client connection: %w", err)
	}

	// set client connection and gRPC client
	client.conn = conn
	client.grpcClient = NewClientServiceClient(conn)

	// return constructed client
	return client, nil
}

// CreateClient executes the CreateClient RPC method on the ClientService service.
// This method automatically handles authentication, timeouts, distributed tracing, and error propagation.
//
// Timeout Behavior:
//   - If the context already has a deadline, it will be respected
//   - If no deadline is set, the client's configured timeout will be applied
//   - The method will be cancelled if the timeout is exceeded
//
// Authentication:
//   - Automatically includes API key or access token in request headers
//   - Authentication is configured during client creation
//
// Distributed Tracing:
//   - Creates a new span for this method call
//   - Span is automatically finished when the method returns
//   - Errors are recorded in the span
//
// Parameters:
//   - ctx: Context for the request (can include custom timeout, tracing, etc.)
//   - request: The CreateClientRequest containing the method parameters
//
// Returns:
//   - *Client: The successful response from the service
//   - error: Any error that occurred during the request
//
// Example:
//
//	resp, err := client.CreateClient(ctx, &CreateClientRequest{
//		// populate request fields
//	})
//	if err != nil {
//		return fmt.Errorf("createclient failed: %w", err)
//	}
func (s *clientServiceGRPCClient) CreateClient(ctx context.Context, request *CreateClientRequest) (*Client, error) {
	// apply timeout if no deadline is already set
	if _, hasDeadline := ctx.Deadline(); !hasDeadline {
		var cancel context.CancelFunc
		ctx, cancel = context.WithTimeout(ctx, s.timeout)
		defer cancel()
	}

	ctx, span := s.tracer.Start(
		ctx,
		ClientServiceServiceProviderName+"CreateClient",
	)
	defer span.End()

	// call given implementation of the adapted service provider interface
	createClientResponse, err := s.grpcClient.CreateClient(ctx, request)
	if err != nil {
		return nil, err
	}

	return createClientResponse, nil
}

// GetClient executes the GetClient RPC method on the ClientService service.
// This method automatically handles authentication, timeouts, distributed tracing, and error propagation.
//
// Timeout Behavior:
//   - If the context already has a deadline, it will be respected
//   - If no deadline is set, the client's configured timeout will be applied
//   - The method will be cancelled if the timeout is exceeded
//
// Authentication:
//   - Automatically includes API key or access token in request headers
//   - Authentication is configured during client creation
//
// Distributed Tracing:
//   - Creates a new span for this method call
//   - Span is automatically finished when the method returns
//   - Errors are recorded in the span
//
// Parameters:
//   - ctx: Context for the request (can include custom timeout, tracing, etc.)
//   - request: The GetClientRequest containing the method parameters
//
// Returns:
//   - *Client: The successful response from the service
//   - error: Any error that occurred during the request
//
// Example:
//
//	resp, err := client.GetClient(ctx, &GetClientRequest{
//		// populate request fields
//	})
//	if err != nil {
//		return fmt.Errorf("getclient failed: %w", err)
//	}
func (s *clientServiceGRPCClient) GetClient(ctx context.Context, request *GetClientRequest) (*Client, error) {
	// apply timeout if no deadline is already set
	if _, hasDeadline := ctx.Deadline(); !hasDeadline {
		var cancel context.CancelFunc
		ctx, cancel = context.WithTimeout(ctx, s.timeout)
		defer cancel()
	}

	ctx, span := s.tracer.Start(
		ctx,
		ClientServiceServiceProviderName+"GetClient",
	)
	defer span.End()

	// call given implementation of the adapted service provider interface
	getClientResponse, err := s.grpcClient.GetClient(ctx, request)
	if err != nil {
		return nil, err
	}

	return getClientResponse, nil
}

// ListClients executes the ListClients RPC method on the ClientService service.
// This method automatically handles authentication, timeouts, distributed tracing, and error propagation.
//
// Timeout Behavior:
//   - If the context already has a deadline, it will be respected
//   - If no deadline is set, the client's configured timeout will be applied
//   - The method will be cancelled if the timeout is exceeded
//
// Authentication:
//   - Automatically includes API key or access token in request headers
//   - Authentication is configured during client creation
//
// Distributed Tracing:
//   - Creates a new span for this method call
//   - Span is automatically finished when the method returns
//   - Errors are recorded in the span
//
// Parameters:
//   - ctx: Context for the request (can include custom timeout, tracing, etc.)
//   - request: The ListClientsRequest containing the method parameters
//
// Returns:
//   - *ListClientsResponse: The successful response from the service
//   - error: Any error that occurred during the request
//
// Example:
//
//	resp, err := client.ListClients(ctx, &ListClientsRequest{
//		// populate request fields
//	})
//	if err != nil {
//		return fmt.Errorf("listclients failed: %w", err)
//	}
func (s *clientServiceGRPCClient) ListClients(ctx context.Context, request *ListClientsRequest) (*ListClientsResponse, error) {
	// apply timeout if no deadline is already set
	if _, hasDeadline := ctx.Deadline(); !hasDeadline {
		var cancel context.CancelFunc
		ctx, cancel = context.WithTimeout(ctx, s.timeout)
		defer cancel()
	}

	ctx, span := s.tracer.Start(
		ctx,
		ClientServiceServiceProviderName+"ListClients",
	)
	defer span.End()

	// call given implementation of the adapted service provider interface
	listClientsResponse, err := s.grpcClient.ListClients(ctx, request)
	if err != nil {
		return nil, err
	}

	return listClientsResponse, nil
}

// Close gracefully shuts down the gRPC client connection and releases all associated resources.
// This method should be called when the client is no longer needed to prevent resource leaks.
// It's safe to call Close() multiple times - subsequent calls will be no-ops.
//
// Best Practices:
//   - Always call Close() when done with the client
//   - Use defer client.Close() immediately after successful client creation
//   - Do not use the client after calling Close()
//
// Example:
//
//	client, err := NewClientServiceGRPCClient(...)
//	if err != nil {
//		return err
//	}
//	defer client.Close() // Ensure cleanup
//
// Returns:
//   - error: Any error that occurred while closing the connection
func (s *clientServiceGRPCClient) Close() error {
	if s.conn != nil {
		return s.conn.Close()
	}
	return nil
}

// validateAuth ensures that at least one authentication method is properly configured.
// This method is called during client initialization to prevent runtime authentication failures.
//
// Supported Authentication Methods:
//   - API Key: Set via WithAPIKey() option or MESH_API_KEY environment variable
//   - Access Token Cookie: Set via WithAccessTokenCookie() option
//
// Returns:
//   - nil: If authentication is properly configured
//   - error: If no authentication method is available
func (c *clientServiceGRPCClient) validateAuth() error {
	if c.apiKey == "" && c.accessTokenCookie == "" {
		return errors.New("neither api key nor access token cookie set. set api key via WithAPIKey option or as MESH_API_KEY environment variable. set access token cookie via WithAccessTokenCookie option")
	}
	return nil
}

// authInterceptor creates and returns the appropriate gRPC unary interceptor for authentication.
// This interceptor automatically adds authentication headers to all outgoing requests based
// on the configured authentication method (API key takes precedence over access token cookie).
//
// Authentication Methods:
//   - API Key: Added as "Authorization: Bearer <api-key>" header
//   - Access Token Cookie: Added as "Cookie: AccessToken=<token>" header
//
// The interceptor is automatically applied to all method calls and handles the
// authentication transparently without requiring manual header management.
//
// Returns:
//   - grpc.UnaryClientInterceptor: Configured authentication interceptor
func (c *clientServiceGRPCClient) authInterceptor() grpc.UnaryClientInterceptor {
	if c.apiKey != "" {
		return func(ctx context.Context, method string, req, reply any, cc *grpc.ClientConn, invoker grpc.UnaryInvoker, opts ...grpc.CallOption) error {
			ctx = metadata.AppendToOutgoingContext(
				ctx,
				common.AuthorizationHeaderKey,
				common.BearerPrefix+c.apiKey,
			)
			return invoker(ctx, method, req, reply, cc, opts...)
		}
	}

	return func(ctx context.Context, method string, req, reply any, cc *grpc.ClientConn, invoker grpc.UnaryInvoker, opts ...grpc.CallOption) error {
		ctx = metadata.AppendToOutgoingContext(
			ctx,
			common.CookieHeaderKey,
			common.AccessTokenPrefix+c.accessTokenCookie,
		)
		return invoker(ctx, method, req, reply, cc, opts...)
	}
}
