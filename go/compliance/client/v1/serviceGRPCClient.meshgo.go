// Code generated by protoc-gen-meshgo. DO NOT EDIT.
// source: meshtrade/compliance/client/v1/service.proto
package clientv1

import (
	context "context"
	fmt "fmt"
	log "github.com/rs/zerolog/log"
	trace "go.opentelemetry.io/otel/trace"
	grpc "google.golang.org/grpc"
)

// Ensure that GRPCClientClientService implements the ClientService interface
var _ ClientService = &GRPCClientClientService{}

// GRPCClientClientService is a gRPC client implementation of the ClientService interface.
type GRPCClientClientService struct {
	tracer     trace.Tracer
	grpcClient ClientServiceClient
}

func NewGRPCClientClientService(
	tracer trace.Tracer,
	grpcClientConnection *grpc.ClientConn,
) *GRPCClientClientService {
	return &GRPCClientClientService{
		tracer:     tracer,
		grpcClient: NewClientServiceClient(grpcClientConnection),
	}
}

func (g *GRPCClientClientService) GetClient(ctx context.Context, request *GetClientRequest) (*Client, error) {
	ctx, span := g.tracer.Start(
		ctx,
		ClientServiceServiceProviderName+"GetClient",
	)
	defer span.End()

	// call given implementation of the adapted service provider interface
	getClientResponse, err := g.grpcClient.GetClient(ctx, request)
	if err != nil {
		log.Ctx(ctx).Error().Err(err).Msg("could not GetClient")
		return nil, fmt.Errorf("could not GetClient: %s", err)
	}

	return getClientResponse, nil
}

func (g *GRPCClientClientService) ListClients(ctx context.Context, request *ListClientsRequest) (*ListClientsResponse, error) {
	ctx, span := g.tracer.Start(
		ctx,
		ClientServiceServiceProviderName+"ListClients",
	)
	defer span.End()

	// call given implementation of the adapted service provider interface
	listClientsResponse, err := g.grpcClient.ListClients(ctx, request)
	if err != nil {
		log.Ctx(ctx).Error().Err(err).Msg("could not ListClients")
		return nil, fmt.Errorf("could not ListClients: %s", err)
	}

	return listClientsResponse, nil
}
