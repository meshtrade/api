// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: meshtrade/compliance/client/v1/tax_residency.proto

package client_v1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Holds tax residency information for a single jurisdiction.
// Note on Required Fields: Fields marked as 'Required' are essential
// for a successful compliance check, but are not mandatory for creation.
type TaxResidency struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The ISO 3166-1 alpha-2 country code of the tax jurisdiction.
	// This is the two-letter country code (e.g., "ZA" for South Africa,
	// "NL" for the Netherlands). The value should be in uppercase.
	// See https://www.iso.org/iso-3166-country-codes.html for a full list.
	// Required for verification.
	CountryCode string `protobuf:"bytes,1,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"`
	// The Tax Identification Number (TIN) for the client in that jurisdiction.
	// Required for verification.
	Tin           string `protobuf:"bytes,2,opt,name=tin,proto3" json:"tin,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaxResidency) Reset() {
	*x = TaxResidency{}
	mi := &file_meshtrade_compliance_client_v1_tax_residency_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaxResidency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaxResidency) ProtoMessage() {}

func (x *TaxResidency) ProtoReflect() protoreflect.Message {
	mi := &file_meshtrade_compliance_client_v1_tax_residency_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaxResidency.ProtoReflect.Descriptor instead.
func (*TaxResidency) Descriptor() ([]byte, []int) {
	return file_meshtrade_compliance_client_v1_tax_residency_proto_rawDescGZIP(), []int{0}
}

func (x *TaxResidency) GetCountryCode() string {
	if x != nil {
		return x.CountryCode
	}
	return ""
}

func (x *TaxResidency) GetTin() string {
	if x != nil {
		return x.Tin
	}
	return ""
}

var File_meshtrade_compliance_client_v1_tax_residency_proto protoreflect.FileDescriptor

const file_meshtrade_compliance_client_v1_tax_residency_proto_rawDesc = "" +
	"\n" +
	"2meshtrade/compliance/client/v1/tax_residency.proto\x12\x1emeshtrade.compliance.client.v1\x1a\x1bbuf/validate/validate.proto\"\xec\x01\n" +
	"\fTaxResidency\x12\xc0\x01\n" +
	"\fcountry_code\x18\x01 \x01(\tB\x9c\x01\xbaH\x98\x01\xba\x01\x94\x01\n" +
	"\x1ccountry_code.format.optional\x12Ecountry_code must be empty or a valid ISO 3166-1 alpha-2 country code\x1a-size(this) == 0 || this.matches('^[A-Z]{2}$')R\vcountryCode\x12\x19\n" +
	"\x03tin\x18\x02 \x01(\tB\a\xbaH\x04r\x02\x18dR\x03tinBc\n" +
	"%co.meshtrade.api.compliance.client.v1Z:github.com/meshtrade/api/go/compliance/client/v1;client_v1b\x06proto3"

var (
	file_meshtrade_compliance_client_v1_tax_residency_proto_rawDescOnce sync.Once
	file_meshtrade_compliance_client_v1_tax_residency_proto_rawDescData []byte
)

func file_meshtrade_compliance_client_v1_tax_residency_proto_rawDescGZIP() []byte {
	file_meshtrade_compliance_client_v1_tax_residency_proto_rawDescOnce.Do(func() {
		file_meshtrade_compliance_client_v1_tax_residency_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_meshtrade_compliance_client_v1_tax_residency_proto_rawDesc), len(file_meshtrade_compliance_client_v1_tax_residency_proto_rawDesc)))
	})
	return file_meshtrade_compliance_client_v1_tax_residency_proto_rawDescData
}

var file_meshtrade_compliance_client_v1_tax_residency_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_meshtrade_compliance_client_v1_tax_residency_proto_goTypes = []any{
	(*TaxResidency)(nil), // 0: meshtrade.compliance.client.v1.TaxResidency
}
var file_meshtrade_compliance_client_v1_tax_residency_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_meshtrade_compliance_client_v1_tax_residency_proto_init() }
func file_meshtrade_compliance_client_v1_tax_residency_proto_init() {
	if File_meshtrade_compliance_client_v1_tax_residency_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_meshtrade_compliance_client_v1_tax_residency_proto_rawDesc), len(file_meshtrade_compliance_client_v1_tax_residency_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_meshtrade_compliance_client_v1_tax_residency_proto_goTypes,
		DependencyIndexes: file_meshtrade_compliance_client_v1_tax_residency_proto_depIdxs,
		MessageInfos:      file_meshtrade_compliance_client_v1_tax_residency_proto_msgTypes,
	}.Build()
	File_meshtrade_compliance_client_v1_tax_residency_proto = out.File
	file_meshtrade_compliance_client_v1_tax_residency_proto_goTypes = nil
	file_meshtrade_compliance_client_v1_tax_residency_proto_depIdxs = nil
}
