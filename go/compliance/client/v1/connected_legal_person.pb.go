// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: meshtrade/compliance/client/v1/connected_legal_person.proto

package clientv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ConnectedLegalPerson is a legal person and how they are connected to the company.
//
// Note on Field Requirements: Fields marked as 'Required for verification' are essential
// for a successful compliance check, but are not mandatory for creation.
type ConnectedLegalPerson struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The core identity of the connected legal person.
	// Required for verification.
	LegalPerson *LegalPerson `protobuf:"bytes,1,opt,name=legal_person,json=legalPerson,proto3" json:"legal_person,omitempty"`
	// The nature of the connection(s) of the legal person to the company.
	// (e.g., Shareholder, Guarantor etc.).
	// Required for verification.
	ConnectionTypes []LegalPersonConnectionType `protobuf:"varint,2,rep,packed,name=connection_types,json=connectionTypes,proto3,enum=meshtrade.compliance.client.v1.LegalPersonConnectionType" json:"connection_types,omitempty"`
	// The percentage of direct or indirect ownership this person holds.
	// e.g. a value of 25.5 represents 25.5% ownership.
	// Required for verification (if the connection_types includes LEGAL_PERSON_CONNECTION_TYPE_SHAREHOLDER or similar ownership role)
	OwnershipPercentage *float32 `protobuf:"fixed32,3,opt,name=ownership_percentage,json=ownershipPercentage,proto3,oneof" json:"ownership_percentage,omitempty"`
	// The percentage of voting rights this person holds, which can differ from ownership.
	// e.g. a value of 25.5 represents 25.5% ownership.
	// Optional for verification.
	VotingRightsPercentage *float32 `protobuf:"fixed32,4,opt,name=voting_rights_percentage,json=votingRightsPercentage,proto3,oneof" json:"voting_rights_percentage,omitempty"`
	// A plain text description of the relationship.
	// Optional for verification.
	ConnectionDescription string `protobuf:"bytes,5,opt,name=connection_description,json=connectionDescription,proto3" json:"connection_description,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *ConnectedLegalPerson) Reset() {
	*x = ConnectedLegalPerson{}
	mi := &file_meshtrade_compliance_client_v1_connected_legal_person_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConnectedLegalPerson) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectedLegalPerson) ProtoMessage() {}

func (x *ConnectedLegalPerson) ProtoReflect() protoreflect.Message {
	mi := &file_meshtrade_compliance_client_v1_connected_legal_person_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectedLegalPerson.ProtoReflect.Descriptor instead.
func (*ConnectedLegalPerson) Descriptor() ([]byte, []int) {
	return file_meshtrade_compliance_client_v1_connected_legal_person_proto_rawDescGZIP(), []int{0}
}

func (x *ConnectedLegalPerson) GetLegalPerson() *LegalPerson {
	if x != nil {
		return x.LegalPerson
	}
	return nil
}

func (x *ConnectedLegalPerson) GetConnectionTypes() []LegalPersonConnectionType {
	if x != nil {
		return x.ConnectionTypes
	}
	return nil
}

func (x *ConnectedLegalPerson) GetOwnershipPercentage() float32 {
	if x != nil && x.OwnershipPercentage != nil {
		return *x.OwnershipPercentage
	}
	return 0
}

func (x *ConnectedLegalPerson) GetVotingRightsPercentage() float32 {
	if x != nil && x.VotingRightsPercentage != nil {
		return *x.VotingRightsPercentage
	}
	return 0
}

func (x *ConnectedLegalPerson) GetConnectionDescription() string {
	if x != nil {
		return x.ConnectionDescription
	}
	return ""
}

var File_meshtrade_compliance_client_v1_connected_legal_person_proto protoreflect.FileDescriptor

const file_meshtrade_compliance_client_v1_connected_legal_person_proto_rawDesc = "" +
	"\n" +
	";meshtrade/compliance/client/v1/connected_legal_person.proto\x12\x1emeshtrade.compliance.client.v1\x1a1meshtrade/compliance/client/v1/legal_person.proto\x1aAmeshtrade/compliance/client/v1/legal_person_connection_type.proto\"\xb0\x03\n" +
	"\x14ConnectedLegalPerson\x12N\n" +
	"\flegal_person\x18\x01 \x01(\v2+.meshtrade.compliance.client.v1.LegalPersonR\vlegalPerson\x12d\n" +
	"\x10connection_types\x18\x02 \x03(\x0e29.meshtrade.compliance.client.v1.LegalPersonConnectionTypeR\x0fconnectionTypes\x126\n" +
	"\x14ownership_percentage\x18\x03 \x01(\x02H\x00R\x13ownershipPercentage\x88\x01\x01\x12=\n" +
	"\x18voting_rights_percentage\x18\x04 \x01(\x02H\x01R\x16votingRightsPercentage\x88\x01\x01\x125\n" +
	"\x16connection_description\x18\x05 \x01(\tR\x15connectionDescriptionB\x17\n" +
	"\x15_ownership_percentageB\x1b\n" +
	"\x19_voting_rights_percentageB;Z9github.com/meshtrade/api/go/compliance/client/v1;clientv1b\x06proto3"

var (
	file_meshtrade_compliance_client_v1_connected_legal_person_proto_rawDescOnce sync.Once
	file_meshtrade_compliance_client_v1_connected_legal_person_proto_rawDescData []byte
)

func file_meshtrade_compliance_client_v1_connected_legal_person_proto_rawDescGZIP() []byte {
	file_meshtrade_compliance_client_v1_connected_legal_person_proto_rawDescOnce.Do(func() {
		file_meshtrade_compliance_client_v1_connected_legal_person_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_meshtrade_compliance_client_v1_connected_legal_person_proto_rawDesc), len(file_meshtrade_compliance_client_v1_connected_legal_person_proto_rawDesc)))
	})
	return file_meshtrade_compliance_client_v1_connected_legal_person_proto_rawDescData
}

var file_meshtrade_compliance_client_v1_connected_legal_person_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_meshtrade_compliance_client_v1_connected_legal_person_proto_goTypes = []any{
	(*ConnectedLegalPerson)(nil),   // 0: meshtrade.compliance.client.v1.ConnectedLegalPerson
	(*LegalPerson)(nil),            // 1: meshtrade.compliance.client.v1.LegalPerson
	(LegalPersonConnectionType)(0), // 2: meshtrade.compliance.client.v1.LegalPersonConnectionType
}
var file_meshtrade_compliance_client_v1_connected_legal_person_proto_depIdxs = []int32{
	1, // 0: meshtrade.compliance.client.v1.ConnectedLegalPerson.legal_person:type_name -> meshtrade.compliance.client.v1.LegalPerson
	2, // 1: meshtrade.compliance.client.v1.ConnectedLegalPerson.connection_types:type_name -> meshtrade.compliance.client.v1.LegalPersonConnectionType
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_meshtrade_compliance_client_v1_connected_legal_person_proto_init() }
func file_meshtrade_compliance_client_v1_connected_legal_person_proto_init() {
	if File_meshtrade_compliance_client_v1_connected_legal_person_proto != nil {
		return
	}
	file_meshtrade_compliance_client_v1_legal_person_proto_init()
	file_meshtrade_compliance_client_v1_legal_person_connection_type_proto_init()
	file_meshtrade_compliance_client_v1_connected_legal_person_proto_msgTypes[0].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_meshtrade_compliance_client_v1_connected_legal_person_proto_rawDesc), len(file_meshtrade_compliance_client_v1_connected_legal_person_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_meshtrade_compliance_client_v1_connected_legal_person_proto_goTypes,
		DependencyIndexes: file_meshtrade_compliance_client_v1_connected_legal_person_proto_depIdxs,
		MessageInfos:      file_meshtrade_compliance_client_v1_connected_legal_person_proto_msgTypes,
	}.Build()
	File_meshtrade_compliance_client_v1_connected_legal_person_proto = out.File
	file_meshtrade_compliance_client_v1_connected_legal_person_proto_goTypes = nil
	file_meshtrade_compliance_client_v1_connected_legal_person_proto_depIdxs = nil
}
