// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: meshtrade/compliance/client/v1/fund.proto

package client_v1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	date "google.golang.org/genproto/googleapis/type/date"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Defines a Fund as a legal entity. It contains the core, verifiable components of a fund's
// identity required for Know Your Fund (KYF) compliance checks.
// Fields essential for verification are noted but are not strictly mandatory for creating the record.
type Fund struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The official, registered name of the fund as it appears in its prospectus or formation documents.
	// Required for verification.
	RegisteredName string `protobuf:"bytes,1,opt,name=registered_name,json=registeredName,proto3" json:"registered_name,omitempty"`
	// The unique registration or identification number assigned by a regulatory body or authority.
	// Examples: SEC CIK number, LEI (Legal Entity Identifier).
	// Required for verification.
	RegistrationNumber string `protobuf:"bytes,2,opt,name=registration_number,json=registrationNumber,proto3" json:"registration_number,omitempty"`
	// The primary tax identifier for the fund.
	// Example: TIN in the US.
	TaxIdentifier string `protobuf:"bytes,3,opt,name=tax_identifier,json=taxIdentifier,proto3" json:"tax_identifier,omitempty"`
	// The ISO 3166-1 alpha-2 country code where the fund is domiciled (e.g., "KY" for Cayman Islands, "LU" for Luxembourg).
	// The value must be the uppercase, two-letter code.
	// See: https://www.iso.org/iso-3166-country-codes.html
	// Required for verification.
	CountryOfDomicile string `protobuf:"bytes,4,opt,name=country_of_domicile,json=countryOfDomicile,proto3" json:"country_of_domicile,omitempty"`
	// The date on which the fund was established or began operations (inception date).
	// Required for verification.
	DateOfInception *date.Date `protobuf:"bytes,5,opt,name=date_of_inception,json=dateOfInception,proto3" json:"date_of_inception,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *Fund) Reset() {
	*x = Fund{}
	mi := &file_meshtrade_compliance_client_v1_fund_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Fund) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Fund) ProtoMessage() {}

func (x *Fund) ProtoReflect() protoreflect.Message {
	mi := &file_meshtrade_compliance_client_v1_fund_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Fund.ProtoReflect.Descriptor instead.
func (*Fund) Descriptor() ([]byte, []int) {
	return file_meshtrade_compliance_client_v1_fund_proto_rawDescGZIP(), []int{0}
}

func (x *Fund) GetRegisteredName() string {
	if x != nil {
		return x.RegisteredName
	}
	return ""
}

func (x *Fund) GetRegistrationNumber() string {
	if x != nil {
		return x.RegistrationNumber
	}
	return ""
}

func (x *Fund) GetTaxIdentifier() string {
	if x != nil {
		return x.TaxIdentifier
	}
	return ""
}

func (x *Fund) GetCountryOfDomicile() string {
	if x != nil {
		return x.CountryOfDomicile
	}
	return ""
}

func (x *Fund) GetDateOfInception() *date.Date {
	if x != nil {
		return x.DateOfInception
	}
	return nil
}

var File_meshtrade_compliance_client_v1_fund_proto protoreflect.FileDescriptor

const file_meshtrade_compliance_client_v1_fund_proto_rawDesc = "" +
	"\n" +
	")meshtrade/compliance/client/v1/fund.proto\x12\x1emeshtrade.compliance.client.v1\x1a\x1bbuf/validate/validate.proto\x1a\x16google/type/date.proto\"\xb9\x03\n" +
	"\x04Fund\x121\n" +
	"\x0fregistered_name\x18\x01 \x01(\tB\b\xbaH\x05r\x03\x18\xff\x01R\x0eregisteredName\x128\n" +
	"\x13registration_number\x18\x02 \x01(\tB\a\xbaH\x04r\x02\x18dR\x12registrationNumber\x12.\n" +
	"\x0etax_identifier\x18\x03 \x01(\tB\a\xbaH\x04r\x02\x182R\rtaxIdentifier\x12\xd4\x01\n" +
	"\x13country_of_domicile\x18\x04 \x01(\tB\xa3\x01\xbaH\x9f\x01\xba\x01\x9b\x01\n" +
	"\x1ccountry_code.format.optional\x12Lcountry_of_domicile must be empty or a valid ISO 3166-1 alpha-2 country code\x1a-size(this) == 0 || this.matches('^[A-Z]{2}$')R\x11countryOfDomicile\x12=\n" +
	"\x11date_of_inception\x18\x05 \x01(\v2\x11.google.type.DateR\x0fdateOfInceptionBc\n" +
	"%co.meshtrade.api.compliance.client.v1Z:github.com/meshtrade/api/go/compliance/client/v1;client_v1b\x06proto3"

var (
	file_meshtrade_compliance_client_v1_fund_proto_rawDescOnce sync.Once
	file_meshtrade_compliance_client_v1_fund_proto_rawDescData []byte
)

func file_meshtrade_compliance_client_v1_fund_proto_rawDescGZIP() []byte {
	file_meshtrade_compliance_client_v1_fund_proto_rawDescOnce.Do(func() {
		file_meshtrade_compliance_client_v1_fund_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_meshtrade_compliance_client_v1_fund_proto_rawDesc), len(file_meshtrade_compliance_client_v1_fund_proto_rawDesc)))
	})
	return file_meshtrade_compliance_client_v1_fund_proto_rawDescData
}

var file_meshtrade_compliance_client_v1_fund_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_meshtrade_compliance_client_v1_fund_proto_goTypes = []any{
	(*Fund)(nil),      // 0: meshtrade.compliance.client.v1.Fund
	(*date.Date)(nil), // 1: google.type.Date
}
var file_meshtrade_compliance_client_v1_fund_proto_depIdxs = []int32{
	1, // 0: meshtrade.compliance.client.v1.Fund.date_of_inception:type_name -> google.type.Date
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_meshtrade_compliance_client_v1_fund_proto_init() }
func file_meshtrade_compliance_client_v1_fund_proto_init() {
	if File_meshtrade_compliance_client_v1_fund_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_meshtrade_compliance_client_v1_fund_proto_rawDesc), len(file_meshtrade_compliance_client_v1_fund_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_meshtrade_compliance_client_v1_fund_proto_goTypes,
		DependencyIndexes: file_meshtrade_compliance_client_v1_fund_proto_depIdxs,
		MessageInfos:      file_meshtrade_compliance_client_v1_fund_proto_msgTypes,
	}.Build()
	File_meshtrade_compliance_client_v1_fund_proto = out.File
	file_meshtrade_compliance_client_v1_fund_proto_goTypes = nil
	file_meshtrade_compliance_client_v1_fund_proto_depIdxs = nil
}
