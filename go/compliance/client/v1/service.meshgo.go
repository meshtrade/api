// Code generated by protoc-gen-meshgo. DO NOT EDIT.
// source: meshtrade/compliance/client/v1/service.proto
package client_v1

import (
	context "context"
	grpc "github.com/meshtrade/api/go/grpc"
	config "github.com/meshtrade/api/go/grpc/config"
)

// ClientServiceClientInterface is a gRPC service for the ClientService service.
// It combines the service interface with resource management capabilities using
// the common BaseGRPCClient for consistent authentication, timeouts, and tracing.
//
// Full Service documentation: https://meshtrade.github.io/api/docs/api-reference/compliance/client/v1
//
// Basic service usage with default SDK Configuration:
//
//	service, err := NewClientService()
//	if err != nil {
//		log.Fatal(err)
//	}
//	defer service.Close() // ensures proper cleanup of underlying connection
//
// With default configuration API credentials are searched for using the standard discovery hierarchy:
//
// 1. MESH_API_CREDENTIALS environment variable
//
// 2. Default credential file location:
//
//   - Linux:   $XDG_CONFIG_HOME/mesh/credentials.json or fallback to $HOME/.config/mesh/credentials.json
//   - macOS:   $HOME/Library/Application Support/mesh/credentials.json
//   - Windows: C:\Users\<user>\AppData\Roaming\mesh\credentials.json
//
// For more information on authentication: https://meshtrade.github.io/api/docs/architecture/authentication
//
// The service may also be configured with custom options:
//
//	service, err := NewClientService(
//		config.WithURL("api.staging.example.com:443"),
//		config.WithAPIKey("your-api-key"),
//		config.WithGroup("groups/your-group-id"),
//		config.WithTimeout(30 * time.Second),
//	)
//	if err != nil {
//		log.Fatal(err)
//	}
//	defer service.Close() // ensures proper cleanup of underlying connection
//
// For more information on service configuration: https://meshtrade.github.io/api/docs/architecture/sdk-configuration
type ClientServiceClientInterface interface {
	ClientService
	grpc.GRPCClient
}

// clientService is the internal implementation of the ClientServiceClientInterface interface.
// It embeds BaseGRPCClient to provide all common gRPC functionality including validation.
type clientService struct {
	*grpc.BaseGRPCClient[ClientServiceClient]
}

// ensure clientService implements the ClientServiceClientInterface interface
var _ ClientServiceClientInterface = &clientService{}

// NewClientService creates and initializes the ClientService service.
// The service uses the common BaseGRPCClient for all functionality including
// connection management, authentication, timeouts, and distributed tracing.
//
// Full Service documentation: https://meshtrade.github.io/api/docs/api-reference/compliance/client/v1
//
// With default configuration API credentials are searched for using the standard discovery hierarchy:
//
// 1. MESH_API_CREDENTIALS environment variable
//
// 2. Default credential file location:
//
//   - Linux:   $XDG_CONFIG_HOME/mesh/credentials.json or fallback to $HOME/.config/mesh/credentials.json
//   - macOS:   $HOME/Library/Application Support/mesh/credentials.json
//   - Windows: C:\Users\<user>\AppData\Roaming\mesh\credentials.json
//
// For more information on authentication: https://meshtrade.github.io/api/docs/architecture/authentication
//
// For more information on service configuration: https://meshtrade.github.io/api/docs/architecture/sdk-configuration
//
// Examples:
//
//	// Create with default configuration
//	service, err := NewClientService()
//	if err != nil {
//		log.Fatal(err)
//	}
//	defer service.Close()
//
//	// Create with custom configuration
//	service, err := NewClientService(
//		config.WithURL("api.example.com:443"),
//		config.WithAPIKey("your-api-key"),
//		config.WithGroup("groups/your-group-id"),
//	)
//	if err != nil {
//		log.Fatal(err)
//	}
//	defer service.Close()
//
// Parameters:
//   - opts: Functional options to configure the client
//
// Returns:
//   - ClientServiceClientInterface: Configured service instance
//   - error: Configuration or connection error
func NewClientService(opts ...config.ServiceOption) (ClientServiceClientInterface, error) {
	base, err := grpc.NewBaseGRPCClient(
		ClientServiceServiceProviderName,
		NewClientServiceClient,
		opts...,
	)
	if err != nil {
		return nil, err
	}

	return &clientService{BaseGRPCClient: base}, nil
}

// WithGroup returns a new client instance configured with a different group context.
// This enables convenient group context switching without reconstructing the entire client.
// All other configuration (URL, port, timeout, tracer, API key, etc.) is preserved.
//
// The group parameter must be in the format 'groups/{group_id}' where group_id is a valid
// group identifier (typically a ULID). The new client instance shares no state with the
// original client, allowing safe concurrent usage across different goroutines.
//
// Example:
//
//	// Create initial client with default group from credentials
//	service, err := NewClientService()
//	if err != nil {
//		log.Fatal(err)
//	}
//	defer service.Close()
//
//	// Switch to a different group context
//	altService := service.WithGroup("groups/01ARZ3NDEKTSV4RRFFQ69G5FAV")
//	defer altService.Close()
//
//	// Both clients can be used independently
//	resp1, _ := service.SomeMethod(ctx, req)      // Uses original group
//	resp2, _ := altService.SomeMethod(ctx, req)   // Uses alternative group
//
// Parameters:
//   - group: The group resource name in format 'groups/{group_id}'
//
// Returns:
//   - ClientServiceClientInterface: New client instance with updated group context
func (s *clientService) WithGroup(group string) ClientServiceClientInterface {
	// Create new base client with copied configuration but new group
	newBase := s.BaseGRPCClient.WithGroup(group)

	// Return new service instance wrapping the new base client
	return &clientService{BaseGRPCClient: newBase}
}

// CreateClient executes the CreateClient RPC method with automatic
// client-side validation, timeout handling, distributed tracing, and authentication.
func (s *clientService) CreateClient(ctx context.Context, request *CreateClientRequest) (*Client, error) {
	return grpc.Execute(s.Executor(), ctx, "CreateClient", request, func(ctx context.Context) (*Client, error) {
		return s.GrpcClient().CreateClient(ctx, request)
	})
}

// GetClient executes the GetClient RPC method with automatic
// client-side validation, timeout handling, distributed tracing, and authentication.
func (s *clientService) GetClient(ctx context.Context, request *GetClientRequest) (*Client, error) {
	return grpc.Execute(s.Executor(), ctx, "GetClient", request, func(ctx context.Context) (*Client, error) {
		return s.GrpcClient().GetClient(ctx, request)
	})
}

// ListClients executes the ListClients RPC method with automatic
// client-side validation, timeout handling, distributed tracing, and authentication.
func (s *clientService) ListClients(ctx context.Context, request *ListClientsRequest) (*ListClientsResponse, error) {
	return grpc.Execute(s.Executor(), ctx, "ListClients", request, func(ctx context.Context) (*ListClientsResponse, error) {
		return s.GrpcClient().ListClients(ctx, request)
	})
}
