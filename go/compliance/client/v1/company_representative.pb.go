// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: meshtrade/compliance/client/v1/company_representative.proto

package clientv1

import (
	v1 "github.com/meshtrade/api/go/type/v1"
	date "google.golang.org/genproto/googleapis/type/date"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// CompanyRepresentative models an individual acting in an official capacity for a legal entity.
// This person is typically subject to KYC verification as part of the overall KYB process
// for the legal entity they represent.
// Note on Field Requirements: Fields marked as 'Required for verification' are essential
// for a successful compliance check, but are not mandatory for creation.
type CompanyRepresentative struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Details of the natural person that is the company representative.
	// This contains the core personal identity information (name, residential address,
	// ID document, personal contact details, etc.) required for their individual KYC check.
	// Required for verification.
	NaturalPerson *NaturalPerson `protobuf:"bytes,1,opt,name=natural_person,json=naturalPerson,proto3" json:"natural_person,omitempty"`
	// The official role this person holds in relation to the company.
	// Required for verification.
	Role CompanyRepresentativeRole `protobuf:"varint,2,opt,name=role,proto3,enum=meshtrade.compliance.client.v1.CompanyRepresentativeRole" json:"role,omitempty"`
	// The person's job title or position within the company (e.g., "CEO", "Managing Partner").
	// Optional for verification.
	Position string `protobuf:"bytes,3,opt,name=position,proto3" json:"position,omitempty"`
	// For UBOs and Shareholders, this specifies the percentage of ownership or voting rights.
	// Should be a value between 0.0 and 100.0.
	// Required by business logic if the role is ULTIMATE_BENEFICIAL_OWNER or SHAREHOLDER.
	// Optional for verification.
	OwnershipPercentage float32 `protobuf:"fixed32,4,opt,name=ownership_percentage,json=ownershipPercentage,proto3" json:"ownership_percentage,omitempty"`
	// The professional contact details for the representative in their capacity at the company
	// (e.g., work email, work phone).
	// Optional for verification.
	ProfessionalContactDetails *v1.ContactDetails `protobuf:"bytes,5,opt,name=professional_contact_details,json=professionalContactDetails,proto3" json:"professional_contact_details,omitempty"`
	// The date when the person was appointed to this role.
	// Optional for verification.
	DateOfAppointment *date.Date `protobuf:"bytes,6,opt,name=date_of_appointment,json=dateOfAppointment,proto3" json:"date_of_appointment,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *CompanyRepresentative) Reset() {
	*x = CompanyRepresentative{}
	mi := &file_meshtrade_compliance_client_v1_company_representative_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CompanyRepresentative) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompanyRepresentative) ProtoMessage() {}

func (x *CompanyRepresentative) ProtoReflect() protoreflect.Message {
	mi := &file_meshtrade_compliance_client_v1_company_representative_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompanyRepresentative.ProtoReflect.Descriptor instead.
func (*CompanyRepresentative) Descriptor() ([]byte, []int) {
	return file_meshtrade_compliance_client_v1_company_representative_proto_rawDescGZIP(), []int{0}
}

func (x *CompanyRepresentative) GetNaturalPerson() *NaturalPerson {
	if x != nil {
		return x.NaturalPerson
	}
	return nil
}

func (x *CompanyRepresentative) GetRole() CompanyRepresentativeRole {
	if x != nil {
		return x.Role
	}
	return CompanyRepresentativeRole_COMPANY_REPRESENTATIVE_ROLE_UNSPECIFIED
}

func (x *CompanyRepresentative) GetPosition() string {
	if x != nil {
		return x.Position
	}
	return ""
}

func (x *CompanyRepresentative) GetOwnershipPercentage() float32 {
	if x != nil {
		return x.OwnershipPercentage
	}
	return 0
}

func (x *CompanyRepresentative) GetProfessionalContactDetails() *v1.ContactDetails {
	if x != nil {
		return x.ProfessionalContactDetails
	}
	return nil
}

func (x *CompanyRepresentative) GetDateOfAppointment() *date.Date {
	if x != nil {
		return x.DateOfAppointment
	}
	return nil
}

var File_meshtrade_compliance_client_v1_company_representative_proto protoreflect.FileDescriptor

const file_meshtrade_compliance_client_v1_company_representative_proto_rawDesc = "" +
	"\n" +
	";meshtrade/compliance/client/v1/company_representative.proto\x12\x1emeshtrade.compliance.client.v1\x1a\x16google/type/date.proto\x1a@meshtrade/compliance/client/v1/company_representative_role.proto\x1a3meshtrade/compliance/client/v1/natural_person.proto\x1a'meshtrade/type/v1/contact_details.proto\"\xb3\x03\n" +
	"\x15CompanyRepresentative\x12T\n" +
	"\x0enatural_person\x18\x01 \x01(\v2-.meshtrade.compliance.client.v1.NaturalPersonR\rnaturalPerson\x12M\n" +
	"\x04role\x18\x02 \x01(\x0e29.meshtrade.compliance.client.v1.CompanyRepresentativeRoleR\x04role\x12\x1a\n" +
	"\bposition\x18\x03 \x01(\tR\bposition\x121\n" +
	"\x14ownership_percentage\x18\x04 \x01(\x02R\x13ownershipPercentage\x12c\n" +
	"\x1cprofessional_contact_details\x18\x05 \x01(\v2!.meshtrade.type.v1.ContactDetailsR\x1aprofessionalContactDetails\x12A\n" +
	"\x13date_of_appointment\x18\x06 \x01(\v2\x11.google.type.DateR\x11dateOfAppointmentB;Z9github.com/meshtrade/api/go/compliance/client/v1;clientv1b\x06proto3"

var (
	file_meshtrade_compliance_client_v1_company_representative_proto_rawDescOnce sync.Once
	file_meshtrade_compliance_client_v1_company_representative_proto_rawDescData []byte
)

func file_meshtrade_compliance_client_v1_company_representative_proto_rawDescGZIP() []byte {
	file_meshtrade_compliance_client_v1_company_representative_proto_rawDescOnce.Do(func() {
		file_meshtrade_compliance_client_v1_company_representative_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_meshtrade_compliance_client_v1_company_representative_proto_rawDesc), len(file_meshtrade_compliance_client_v1_company_representative_proto_rawDesc)))
	})
	return file_meshtrade_compliance_client_v1_company_representative_proto_rawDescData
}

var file_meshtrade_compliance_client_v1_company_representative_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_meshtrade_compliance_client_v1_company_representative_proto_goTypes = []any{
	(*CompanyRepresentative)(nil),  // 0: meshtrade.compliance.client.v1.CompanyRepresentative
	(*NaturalPerson)(nil),          // 1: meshtrade.compliance.client.v1.NaturalPerson
	(CompanyRepresentativeRole)(0), // 2: meshtrade.compliance.client.v1.CompanyRepresentativeRole
	(*v1.ContactDetails)(nil),      // 3: meshtrade.type.v1.ContactDetails
	(*date.Date)(nil),              // 4: google.type.Date
}
var file_meshtrade_compliance_client_v1_company_representative_proto_depIdxs = []int32{
	1, // 0: meshtrade.compliance.client.v1.CompanyRepresentative.natural_person:type_name -> meshtrade.compliance.client.v1.NaturalPerson
	2, // 1: meshtrade.compliance.client.v1.CompanyRepresentative.role:type_name -> meshtrade.compliance.client.v1.CompanyRepresentativeRole
	3, // 2: meshtrade.compliance.client.v1.CompanyRepresentative.professional_contact_details:type_name -> meshtrade.type.v1.ContactDetails
	4, // 3: meshtrade.compliance.client.v1.CompanyRepresentative.date_of_appointment:type_name -> google.type.Date
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_meshtrade_compliance_client_v1_company_representative_proto_init() }
func file_meshtrade_compliance_client_v1_company_representative_proto_init() {
	if File_meshtrade_compliance_client_v1_company_representative_proto != nil {
		return
	}
	file_meshtrade_compliance_client_v1_company_representative_role_proto_init()
	file_meshtrade_compliance_client_v1_natural_person_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_meshtrade_compliance_client_v1_company_representative_proto_rawDesc), len(file_meshtrade_compliance_client_v1_company_representative_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_meshtrade_compliance_client_v1_company_representative_proto_goTypes,
		DependencyIndexes: file_meshtrade_compliance_client_v1_company_representative_proto_depIdxs,
		MessageInfos:      file_meshtrade_compliance_client_v1_company_representative_proto_msgTypes,
	}.Build()
	File_meshtrade_compliance_client_v1_company_representative_proto = out.File
	file_meshtrade_compliance_client_v1_company_representative_proto_goTypes = nil
	file_meshtrade_compliance_client_v1_company_representative_proto_depIdxs = nil
}
