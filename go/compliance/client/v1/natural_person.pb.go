// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: meshtrade/compliance/client/v1/natural_person.proto

package clientv1

import (
	v1 "github.com/meshtrade/api/go/type/v1"
	date "google.golang.org/genproto/googleapis/type/date"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// NaturalPerson is the identity of an individual person.
// It contains the core, verifiable components of an individual's identity. which are
// verified against their passport, utility bills, government records etc. during Know Your Client (KYC) checks.
//
// Note on Required Fields: Fields marked as 'Required' are essential
// for a successful compliance check, but are not mandatory for creation.
type NaturalPerson struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The client's full legal name, as it appears on their official identification documents.
	//
	// Required for verification.
	FullName string `protobuf:"bytes,1,opt,name=full_name,json=fullName,proto3" json:"full_name,omitempty"`
	// The client's date of birth.
	//
	// Required for verification.
	DateOfBirth *date.Date `protobuf:"bytes,2,opt,name=date_of_birth,json=dateOfBirth,proto3" json:"date_of_birth,omitempty"`
	// The ISO 3166-1 alpha-2 country code of the client's nationality/citizenship.
	// This is the two-letter country code (e.g., "ZA" for South Africa,
	// "NL" for the Netherlands). The value should be in uppercase.
	//
	// See https://www.iso.org/iso-3166-country-codes.html for a full list.
	//
	// Required for verification.
	CountryOfCitizenship string `protobuf:"bytes,3,opt,name=country_of_citizenship,json=countryOfCitizenship,proto3" json:"country_of_citizenship,omitempty"`
	// An identification number for the client, as found on the provided document.
	// The format is dependent on the identification_document_type.
	//
	// Required for verification.
	IdentificationNumber string `protobuf:"bytes,4,opt,name=identification_number,json=identificationNumber,proto3" json:"identification_number,omitempty"`
	// The type of identification document provided to prove the correctness of the
	// given identification_number (e.g., Passport, Driver's License).
	//
	// Required for verification.
	IdentificationDocumentType IdentificationDocumentType `protobuf:"varint,5,opt,name=identification_document_type,json=identificationDocumentType,proto3,enum=meshtrade.compliance.client.v1.IdentificationDocumentType" json:"identification_document_type,omitempty"`
	// The expiration date of the identification document, if applicable.
	//
	// Required for verification if the document has an expiry date.
	IdentificationDocumentExpiryDate *date.Date `protobuf:"bytes,6,opt,name=identification_document_expiry_date,json=identificationDocumentExpiryDate,proto3" json:"identification_document_expiry_date,omitempty"`
	// The client's primary physical residential address.
	// If `postal_address` is not provided, this address will also be used for postal mail.
	//
	// Required for verification.
	PhysicalAddress *v1.Address `protobuf:"bytes,7,opt,name=physical_address,json=physicalAddress,proto3" json:"physical_address,omitempty"`
	// The client's status as a Politically Exposed Person (PEP).
	// This is a mandatory check for regulatory compliance.
	//
	// Required for verification.
	PepStatus PepStatus `protobuf:"varint,8,opt,name=pep_status,json=pepStatus,proto3,enum=meshtrade.compliance.client.v1.PepStatus" json:"pep_status,omitempty"`
	// The client's postal address, if it is different from the physical address.
	//
	// Optional for verification.
	PostalAddress *v1.Address `protobuf:"bytes,9,opt,name=postal_address,json=postalAddress,proto3" json:"postal_address,omitempty"`
	// The individual's personal contact details (personal email, personal mobile).
	//
	// Optional for verification.
	PersonalContactDetails *v1.ContactDetails `protobuf:"bytes,10,opt,name=personal_contact_details,json=personalContactDetails,proto3" json:"personal_contact_details,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *NaturalPerson) Reset() {
	*x = NaturalPerson{}
	mi := &file_meshtrade_compliance_client_v1_natural_person_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NaturalPerson) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NaturalPerson) ProtoMessage() {}

func (x *NaturalPerson) ProtoReflect() protoreflect.Message {
	mi := &file_meshtrade_compliance_client_v1_natural_person_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NaturalPerson.ProtoReflect.Descriptor instead.
func (*NaturalPerson) Descriptor() ([]byte, []int) {
	return file_meshtrade_compliance_client_v1_natural_person_proto_rawDescGZIP(), []int{0}
}

func (x *NaturalPerson) GetFullName() string {
	if x != nil {
		return x.FullName
	}
	return ""
}

func (x *NaturalPerson) GetDateOfBirth() *date.Date {
	if x != nil {
		return x.DateOfBirth
	}
	return nil
}

func (x *NaturalPerson) GetCountryOfCitizenship() string {
	if x != nil {
		return x.CountryOfCitizenship
	}
	return ""
}

func (x *NaturalPerson) GetIdentificationNumber() string {
	if x != nil {
		return x.IdentificationNumber
	}
	return ""
}

func (x *NaturalPerson) GetIdentificationDocumentType() IdentificationDocumentType {
	if x != nil {
		return x.IdentificationDocumentType
	}
	return IdentificationDocumentType_IDENTIFICATION_DOCUMENT_TYPE_UNSPECIFIED
}

func (x *NaturalPerson) GetIdentificationDocumentExpiryDate() *date.Date {
	if x != nil {
		return x.IdentificationDocumentExpiryDate
	}
	return nil
}

func (x *NaturalPerson) GetPhysicalAddress() *v1.Address {
	if x != nil {
		return x.PhysicalAddress
	}
	return nil
}

func (x *NaturalPerson) GetPepStatus() PepStatus {
	if x != nil {
		return x.PepStatus
	}
	return PepStatus_PEP_STATUS_UNSPECIFIED
}

func (x *NaturalPerson) GetPostalAddress() *v1.Address {
	if x != nil {
		return x.PostalAddress
	}
	return nil
}

func (x *NaturalPerson) GetPersonalContactDetails() *v1.ContactDetails {
	if x != nil {
		return x.PersonalContactDetails
	}
	return nil
}

var File_meshtrade_compliance_client_v1_natural_person_proto protoreflect.FileDescriptor

const file_meshtrade_compliance_client_v1_natural_person_proto_rawDesc = "" +
	"\n" +
	"3meshtrade/compliance/client/v1/natural_person.proto\x12\x1emeshtrade.compliance.client.v1\x1a\x16google/type/date.proto\x1aAmeshtrade/compliance/client/v1/identification_document_type.proto\x1a/meshtrade/compliance/client/v1/pep_status.proto\x1a\x1fmeshtrade/type/v1/address.proto\x1a'meshtrade/type/v1/contact_details.proto\"\xdf\x05\n" +
	"\rNaturalPerson\x12\x1b\n" +
	"\tfull_name\x18\x01 \x01(\tR\bfullName\x125\n" +
	"\rdate_of_birth\x18\x02 \x01(\v2\x11.google.type.DateR\vdateOfBirth\x124\n" +
	"\x16country_of_citizenship\x18\x03 \x01(\tR\x14countryOfCitizenship\x123\n" +
	"\x15identification_number\x18\x04 \x01(\tR\x14identificationNumber\x12|\n" +
	"\x1cidentification_document_type\x18\x05 \x01(\x0e2:.meshtrade.compliance.client.v1.IdentificationDocumentTypeR\x1aidentificationDocumentType\x12`\n" +
	"#identification_document_expiry_date\x18\x06 \x01(\v2\x11.google.type.DateR identificationDocumentExpiryDate\x12E\n" +
	"\x10physical_address\x18\a \x01(\v2\x1a.meshtrade.type.v1.AddressR\x0fphysicalAddress\x12H\n" +
	"\n" +
	"pep_status\x18\b \x01(\x0e2).meshtrade.compliance.client.v1.PepStatusR\tpepStatus\x12A\n" +
	"\x0epostal_address\x18\t \x01(\v2\x1a.meshtrade.type.v1.AddressR\rpostalAddress\x12[\n" +
	"\x18personal_contact_details\x18\n" +
	" \x01(\v2!.meshtrade.type.v1.ContactDetailsR\x16personalContactDetailsB;Z9github.com/meshtrade/api/go/compliance/client/v1;clientv1b\x06proto3"

var (
	file_meshtrade_compliance_client_v1_natural_person_proto_rawDescOnce sync.Once
	file_meshtrade_compliance_client_v1_natural_person_proto_rawDescData []byte
)

func file_meshtrade_compliance_client_v1_natural_person_proto_rawDescGZIP() []byte {
	file_meshtrade_compliance_client_v1_natural_person_proto_rawDescOnce.Do(func() {
		file_meshtrade_compliance_client_v1_natural_person_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_meshtrade_compliance_client_v1_natural_person_proto_rawDesc), len(file_meshtrade_compliance_client_v1_natural_person_proto_rawDesc)))
	})
	return file_meshtrade_compliance_client_v1_natural_person_proto_rawDescData
}

var file_meshtrade_compliance_client_v1_natural_person_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_meshtrade_compliance_client_v1_natural_person_proto_goTypes = []any{
	(*NaturalPerson)(nil),           // 0: meshtrade.compliance.client.v1.NaturalPerson
	(*date.Date)(nil),               // 1: google.type.Date
	(IdentificationDocumentType)(0), // 2: meshtrade.compliance.client.v1.IdentificationDocumentType
	(*v1.Address)(nil),              // 3: meshtrade.type.v1.Address
	(PepStatus)(0),                  // 4: meshtrade.compliance.client.v1.PepStatus
	(*v1.ContactDetails)(nil),       // 5: meshtrade.type.v1.ContactDetails
}
var file_meshtrade_compliance_client_v1_natural_person_proto_depIdxs = []int32{
	1, // 0: meshtrade.compliance.client.v1.NaturalPerson.date_of_birth:type_name -> google.type.Date
	2, // 1: meshtrade.compliance.client.v1.NaturalPerson.identification_document_type:type_name -> meshtrade.compliance.client.v1.IdentificationDocumentType
	1, // 2: meshtrade.compliance.client.v1.NaturalPerson.identification_document_expiry_date:type_name -> google.type.Date
	3, // 3: meshtrade.compliance.client.v1.NaturalPerson.physical_address:type_name -> meshtrade.type.v1.Address
	4, // 4: meshtrade.compliance.client.v1.NaturalPerson.pep_status:type_name -> meshtrade.compliance.client.v1.PepStatus
	3, // 5: meshtrade.compliance.client.v1.NaturalPerson.postal_address:type_name -> meshtrade.type.v1.Address
	5, // 6: meshtrade.compliance.client.v1.NaturalPerson.personal_contact_details:type_name -> meshtrade.type.v1.ContactDetails
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_meshtrade_compliance_client_v1_natural_person_proto_init() }
func file_meshtrade_compliance_client_v1_natural_person_proto_init() {
	if File_meshtrade_compliance_client_v1_natural_person_proto != nil {
		return
	}
	file_meshtrade_compliance_client_v1_identification_document_type_proto_init()
	file_meshtrade_compliance_client_v1_pep_status_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_meshtrade_compliance_client_v1_natural_person_proto_rawDesc), len(file_meshtrade_compliance_client_v1_natural_person_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_meshtrade_compliance_client_v1_natural_person_proto_goTypes,
		DependencyIndexes: file_meshtrade_compliance_client_v1_natural_person_proto_depIdxs,
		MessageInfos:      file_meshtrade_compliance_client_v1_natural_person_proto_msgTypes,
	}.Build()
	File_meshtrade_compliance_client_v1_natural_person_proto = out.File
	file_meshtrade_compliance_client_v1_natural_person_proto_goTypes = nil
	file_meshtrade_compliance_client_v1_natural_person_proto_depIdxs = nil
}
