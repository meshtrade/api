// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: meshtrade/compliance/client/v1/company.proto

package clientv1

import (
	v1 "github.com/meshtrade/api/go/type/v1"
	date "google.golang.org/genproto/googleapis/type/date"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// LegalPersonConnectionType describes how a legal person is connected to a business,
// which is essential for understanding corporate ownership and control structures in KYB.
type LegalPersonConnectionType int32

const (
	// Unknown or not specified.
	// This is a default value to prevent accidental assignment and should not be used.
	LegalPersonConnectionType_LEGAL_PERSON_CONNECTION_TYPE_UNSPECIFIED LegalPersonConnectionType = 0
	// The legal person is a direct shareholder in the company, but may not have
	// a controlling stake. This is a general ownership connection.
	LegalPersonConnectionType_LEGAL_PERSON_CONNECTION_TYPE_SHAREHOLDER LegalPersonConnectionType = 1
	// The legal person has a controlling ownership stake in the company, making
	// the company its subsidiary.
	LegalPersonConnectionType_LEGAL_PERSON_CONNECTION_TYPE_PARENT_COMPANY LegalPersonConnectionType = 2
	// The legal person (often a trust or specialized firm) acts as a director
	// on the board of the company. This represents a connection of control.
	LegalPersonConnectionType_LEGAL_PERSON_CONNECTION_TYPE_CORPORATE_DIRECTOR LegalPersonConnectionType = 3
	// The legal person is a trust that holds shares or has a controlling interest
	// in the company on behalf of its beneficiaries.
	LegalPersonConnectionType_LEGAL_PERSON_CONNECTION_TYPE_TRUST LegalPersonConnectionType = 4
	// The legal person is a general partner in a partnership structure (e.g., LP/LLP),
	// typically implying management control and unlimited liability.
	LegalPersonConnectionType_LEGAL_PERSON_CONNECTION_TYPE_GENERAL_PARTNER LegalPersonConnectionType = 5
	// The legal person guarantees the financial obligations or performance of the company,
	// indicating a significant financial connection.
	LegalPersonConnectionType_LEGAL_PERSON_CONNECTION_TYPE_GUARANTOR LegalPersonConnectionType = 6
)

// Enum value maps for LegalPersonConnectionType.
var (
	LegalPersonConnectionType_name = map[int32]string{
		0: "LEGAL_PERSON_CONNECTION_TYPE_UNSPECIFIED",
		1: "LEGAL_PERSON_CONNECTION_TYPE_SHAREHOLDER",
		2: "LEGAL_PERSON_CONNECTION_TYPE_PARENT_COMPANY",
		3: "LEGAL_PERSON_CONNECTION_TYPE_CORPORATE_DIRECTOR",
		4: "LEGAL_PERSON_CONNECTION_TYPE_TRUST",
		5: "LEGAL_PERSON_CONNECTION_TYPE_GENERAL_PARTNER",
		6: "LEGAL_PERSON_CONNECTION_TYPE_GUARANTOR",
	}
	LegalPersonConnectionType_value = map[string]int32{
		"LEGAL_PERSON_CONNECTION_TYPE_UNSPECIFIED":        0,
		"LEGAL_PERSON_CONNECTION_TYPE_SHAREHOLDER":        1,
		"LEGAL_PERSON_CONNECTION_TYPE_PARENT_COMPANY":     2,
		"LEGAL_PERSON_CONNECTION_TYPE_CORPORATE_DIRECTOR": 3,
		"LEGAL_PERSON_CONNECTION_TYPE_TRUST":              4,
		"LEGAL_PERSON_CONNECTION_TYPE_GENERAL_PARTNER":    5,
		"LEGAL_PERSON_CONNECTION_TYPE_GUARANTOR":          6,
	}
)

func (x LegalPersonConnectionType) Enum() *LegalPersonConnectionType {
	p := new(LegalPersonConnectionType)
	*p = x
	return p
}

func (x LegalPersonConnectionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LegalPersonConnectionType) Descriptor() protoreflect.EnumDescriptor {
	return file_meshtrade_compliance_client_v1_company_proto_enumTypes[0].Descriptor()
}

func (LegalPersonConnectionType) Type() protoreflect.EnumType {
	return &file_meshtrade_compliance_client_v1_company_proto_enumTypes[0]
}

func (x LegalPersonConnectionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LegalPersonConnectionType.Descriptor instead.
func (LegalPersonConnectionType) EnumDescriptor() ([]byte, []int) {
	return file_meshtrade_compliance_client_v1_company_proto_rawDescGZIP(), []int{0}
}

// Defines a legal company entity. It contains the core, verifiable components of a company's
// identity required for Know Your Business (KYB) compliance checks.
// Fields essential for verification are noted but are not strictly mandatory for creating the record.
type Company struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The official, registered name of the company as it appears in its articles of incorporation.
	// Required for verification.
	RegisteredName string `protobuf:"bytes,1,opt,name=registered_name,json=registeredName,proto3" json:"registered_name,omitempty"`
	// The unique number assigned by the relevant companies registry upon incorporation.
	// Examples: UK Companies House number, NL KVK-nummer, US EIN.
	// Required for verification.
	RegistrationNumber string `protobuf:"bytes,3,opt,name=registration_number,json=registrationNumber,proto3" json:"registration_number,omitempty"`
	// The primary tax identifier for the company.
	// Examples: VAT number in the EU, TIN in the US.
	TaxIdentifier string `protobuf:"bytes,4,opt,name=tax_identifier,json=taxIdentifier,proto3" json:"tax_identifier,omitempty"`
	// The ISO 3166-1 alpha-2 country code where the company was incorporated (e.g., "ZA", "NL").
	// The value must be the uppercase, two-letter code.
	// See: https://www.iso.org/iso-3166-country-codes.html
	// Required for verification.
	CountryOfIncorporation string `protobuf:"bytes,5,opt,name=country_of_incorporation,json=countryOfIncorporation,proto3" json:"country_of_incorporation,omitempty"`
	// The date on which the company was incorporated.
	// Required for verification.
	DateOfIncorporation *date.Date `protobuf:"bytes,6,opt,name=date_of_incorporation,json=dateOfIncorporation,proto3" json:"date_of_incorporation,omitempty"`
	// The official, legal address of the entity as recorded with the incorporation registry.
	// This is the primary address used for verification.
	// Required for verification.
	RegisteredAddress *v1.Address `protobuf:"bytes,7,opt,name=registered_address,json=registeredAddress,proto3" json:"registered_address,omitempty"`
	// The main physical location where the business conducts its operations.
	// Provide only if different from the registered address.
	PrincipalPhysicalAddress *v1.Address `protobuf:"bytes,8,opt,name=principal_physical_address,json=principalPhysicalAddress,proto3" json:"principal_physical_address,omitempty"`
	// The address designated for receiving mail and correspondence.
	// Provide only if different from the registered address.
	PostalAddress *v1.Address `protobuf:"bytes,9,opt,name=postal_address,json=postalAddress,proto3" json:"postal_address,omitempty"`
	// The address of the company's head office.
	// Provide only if different from the registered and principal physical addresses.
	HeadOfficeAddress *v1.Address `protobuf:"bytes,10,opt,name=head_office_address,json=headOfficeAddress,proto3" json:"head_office_address,omitempty"`
	// A list of individuals empowered to act on behalf of the company (e.g., Directors, CEO).
	// This field defines who has operational control and representation rights.
	// Required for verification.
	CompanyRepresentatives []*CompanyRepresentative `protobuf:"bytes,11,rep,name=company_representatives,json=companyRepresentatives,proto3" json:"company_representatives,omitempty"`
	// A list of all other legal persons (companies, trusts, etc.) in the ownership structure.
	// This is used to perform recursive KYB checks and map the full ownership hierarchy.
	// IMPORTANT: Only add legal persons here if they are NOT already clients on the Mesh platform.
	// Required for verification if the ownership structure includes off-platform entities.
	ConnectedLegalPersons []*ConnectedLegalPerson `protobuf:"bytes,12,rep,name=connected_legal_persons,json=connectedLegalPersons,proto3" json:"connected_legal_persons,omitempty"`
	// The company's industry classification (e.g., using NACE or SIC codes), used for risk assessment.
	IndustryClassification *IndustryClassification `protobuf:"bytes,13,opt,name=industry_classification,json=industryClassification,proto3" json:"industry_classification,omitempty"`
	// The stock exchange where the company is listed, if applicable (e.g., "NASDAQ", "LSE").
	ListedExchangeCode string `protobuf:"bytes,14,opt,name=listed_exchange_code,json=listedExchangeCode,proto3" json:"listed_exchange_code,omitempty"`
	// The ticker symbol for the company on the specified stock exchange (e.g., "GOOGL").
	ListingReference string `protobuf:"bytes,15,opt,name=listing_reference,json=listingReference,proto3" json:"listing_reference,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *Company) Reset() {
	*x = Company{}
	mi := &file_meshtrade_compliance_client_v1_company_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Company) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Company) ProtoMessage() {}

func (x *Company) ProtoReflect() protoreflect.Message {
	mi := &file_meshtrade_compliance_client_v1_company_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Company.ProtoReflect.Descriptor instead.
func (*Company) Descriptor() ([]byte, []int) {
	return file_meshtrade_compliance_client_v1_company_proto_rawDescGZIP(), []int{0}
}

func (x *Company) GetRegisteredName() string {
	if x != nil {
		return x.RegisteredName
	}
	return ""
}

func (x *Company) GetRegistrationNumber() string {
	if x != nil {
		return x.RegistrationNumber
	}
	return ""
}

func (x *Company) GetTaxIdentifier() string {
	if x != nil {
		return x.TaxIdentifier
	}
	return ""
}

func (x *Company) GetCountryOfIncorporation() string {
	if x != nil {
		return x.CountryOfIncorporation
	}
	return ""
}

func (x *Company) GetDateOfIncorporation() *date.Date {
	if x != nil {
		return x.DateOfIncorporation
	}
	return nil
}

func (x *Company) GetRegisteredAddress() *v1.Address {
	if x != nil {
		return x.RegisteredAddress
	}
	return nil
}

func (x *Company) GetPrincipalPhysicalAddress() *v1.Address {
	if x != nil {
		return x.PrincipalPhysicalAddress
	}
	return nil
}

func (x *Company) GetPostalAddress() *v1.Address {
	if x != nil {
		return x.PostalAddress
	}
	return nil
}

func (x *Company) GetHeadOfficeAddress() *v1.Address {
	if x != nil {
		return x.HeadOfficeAddress
	}
	return nil
}

func (x *Company) GetCompanyRepresentatives() []*CompanyRepresentative {
	if x != nil {
		return x.CompanyRepresentatives
	}
	return nil
}

func (x *Company) GetConnectedLegalPersons() []*ConnectedLegalPerson {
	if x != nil {
		return x.ConnectedLegalPersons
	}
	return nil
}

func (x *Company) GetIndustryClassification() *IndustryClassification {
	if x != nil {
		return x.IndustryClassification
	}
	return nil
}

func (x *Company) GetListedExchangeCode() string {
	if x != nil {
		return x.ListedExchangeCode
	}
	return ""
}

func (x *Company) GetListingReference() string {
	if x != nil {
		return x.ListingReference
	}
	return ""
}

// ConnectedLegalPerson is a legal person and how they are connected to the company.
//
// Note on Field Requirements: Fields marked as 'Required for verification' are essential
// for a successful compliance check, but are not mandatory for creation.
type ConnectedLegalPerson struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Contains the specific data for the legal entity type.
	// Only one of these may be set at a time.
	// Required for verification.
	//
	// Types that are valid to be assigned to LegalPerson:
	//
	//	*ConnectedLegalPerson_NaturalPerson
	//	*ConnectedLegalPerson_Company
	//	*ConnectedLegalPerson_Fund
	//	*ConnectedLegalPerson_Trust
	LegalPerson isConnectedLegalPerson_LegalPerson `protobuf_oneof:"legal_person"`
	// The nature of the connection(s) of the legal person to the company.
	// (e.g., Shareholder, Guarantor etc.).
	// Required for verification.
	ConnectionTypes []LegalPersonConnectionType `protobuf:"varint,5,rep,packed,name=connection_types,json=connectionTypes,proto3,enum=meshtrade.compliance.client.v1.LegalPersonConnectionType" json:"connection_types,omitempty"`
	// The percentage of direct or indirect ownership this person holds.
	// e.g. a value of 25.5 represents 25.5% ownership.
	// Required for verification (if the connection_types includes LEGAL_PERSON_CONNECTION_TYPE_SHAREHOLDER or similar ownership role)
	OwnershipPercentage *v1.Decimal `protobuf:"bytes,6,opt,name=ownership_percentage,json=ownershipPercentage,proto3" json:"ownership_percentage,omitempty"`
	// The percentage of voting rights this person holds, which can differ from ownership.
	// e.g. a value of 25.5 represents 25.5% ownership.
	// Optional for verification.
	VotingRightsPercentage *v1.Decimal `protobuf:"bytes,7,opt,name=voting_rights_percentage,json=votingRightsPercentage,proto3" json:"voting_rights_percentage,omitempty"`
	// A plain text description of the relationship.
	// Optional for verification.
	ConnectionDescription string `protobuf:"bytes,8,opt,name=connection_description,json=connectionDescription,proto3" json:"connection_description,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *ConnectedLegalPerson) Reset() {
	*x = ConnectedLegalPerson{}
	mi := &file_meshtrade_compliance_client_v1_company_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConnectedLegalPerson) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectedLegalPerson) ProtoMessage() {}

func (x *ConnectedLegalPerson) ProtoReflect() protoreflect.Message {
	mi := &file_meshtrade_compliance_client_v1_company_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectedLegalPerson.ProtoReflect.Descriptor instead.
func (*ConnectedLegalPerson) Descriptor() ([]byte, []int) {
	return file_meshtrade_compliance_client_v1_company_proto_rawDescGZIP(), []int{1}
}

func (x *ConnectedLegalPerson) GetLegalPerson() isConnectedLegalPerson_LegalPerson {
	if x != nil {
		return x.LegalPerson
	}
	return nil
}

func (x *ConnectedLegalPerson) GetNaturalPerson() *NaturalPerson {
	if x != nil {
		if x, ok := x.LegalPerson.(*ConnectedLegalPerson_NaturalPerson); ok {
			return x.NaturalPerson
		}
	}
	return nil
}

func (x *ConnectedLegalPerson) GetCompany() *Company {
	if x != nil {
		if x, ok := x.LegalPerson.(*ConnectedLegalPerson_Company); ok {
			return x.Company
		}
	}
	return nil
}

func (x *ConnectedLegalPerson) GetFund() *Fund {
	if x != nil {
		if x, ok := x.LegalPerson.(*ConnectedLegalPerson_Fund); ok {
			return x.Fund
		}
	}
	return nil
}

func (x *ConnectedLegalPerson) GetTrust() *Trust {
	if x != nil {
		if x, ok := x.LegalPerson.(*ConnectedLegalPerson_Trust); ok {
			return x.Trust
		}
	}
	return nil
}

func (x *ConnectedLegalPerson) GetConnectionTypes() []LegalPersonConnectionType {
	if x != nil {
		return x.ConnectionTypes
	}
	return nil
}

func (x *ConnectedLegalPerson) GetOwnershipPercentage() *v1.Decimal {
	if x != nil {
		return x.OwnershipPercentage
	}
	return nil
}

func (x *ConnectedLegalPerson) GetVotingRightsPercentage() *v1.Decimal {
	if x != nil {
		return x.VotingRightsPercentage
	}
	return nil
}

func (x *ConnectedLegalPerson) GetConnectionDescription() string {
	if x != nil {
		return x.ConnectionDescription
	}
	return ""
}

type isConnectedLegalPerson_LegalPerson interface {
	isConnectedLegalPerson_LegalPerson()
}

type ConnectedLegalPerson_NaturalPerson struct {
	// Set when the legal entity is an individual human being.
	NaturalPerson *NaturalPerson `protobuf:"bytes,1,opt,name=natural_person,json=naturalPerson,proto3,oneof"`
}

type ConnectedLegalPerson_Company struct {
	// Set when the legal entity is a company or corporation.
	Company *Company `protobuf:"bytes,2,opt,name=company,proto3,oneof"`
}

type ConnectedLegalPerson_Fund struct {
	// Set when the legal entity is an investment fund.
	Fund *Fund `protobuf:"bytes,3,opt,name=fund,proto3,oneof"`
}

type ConnectedLegalPerson_Trust struct {
	// Set when the legal entity is a trust.
	Trust *Trust `protobuf:"bytes,4,opt,name=trust,proto3,oneof"`
}

func (*ConnectedLegalPerson_NaturalPerson) isConnectedLegalPerson_LegalPerson() {}

func (*ConnectedLegalPerson_Company) isConnectedLegalPerson_LegalPerson() {}

func (*ConnectedLegalPerson_Fund) isConnectedLegalPerson_LegalPerson() {}

func (*ConnectedLegalPerson_Trust) isConnectedLegalPerson_LegalPerson() {}

var File_meshtrade_compliance_client_v1_company_proto protoreflect.FileDescriptor

const file_meshtrade_compliance_client_v1_company_proto_rawDesc = "" +
	"\n" +
	",meshtrade/compliance/client/v1/company.proto\x12\x1emeshtrade.compliance.client.v1\x1a\x16google/type/date.proto\x1a;meshtrade/compliance/client/v1/company_representative.proto\x1a)meshtrade/compliance/client/v1/fund.proto\x1a<meshtrade/compliance/client/v1/industry_classification.proto\x1a3meshtrade/compliance/client/v1/natural_person.proto\x1a*meshtrade/compliance/client/v1/trust.proto\x1a\x1fmeshtrade/type/v1/address.proto\x1a\x1fmeshtrade/type/v1/decimal.proto\"\xed\a\n" +
	"\aCompany\x12'\n" +
	"\x0fregistered_name\x18\x01 \x01(\tR\x0eregisteredName\x12/\n" +
	"\x13registration_number\x18\x03 \x01(\tR\x12registrationNumber\x12%\n" +
	"\x0etax_identifier\x18\x04 \x01(\tR\rtaxIdentifier\x128\n" +
	"\x18country_of_incorporation\x18\x05 \x01(\tR\x16countryOfIncorporation\x12E\n" +
	"\x15date_of_incorporation\x18\x06 \x01(\v2\x11.google.type.DateR\x13dateOfIncorporation\x12I\n" +
	"\x12registered_address\x18\a \x01(\v2\x1a.meshtrade.type.v1.AddressR\x11registeredAddress\x12X\n" +
	"\x1aprincipal_physical_address\x18\b \x01(\v2\x1a.meshtrade.type.v1.AddressR\x18principalPhysicalAddress\x12A\n" +
	"\x0epostal_address\x18\t \x01(\v2\x1a.meshtrade.type.v1.AddressR\rpostalAddress\x12J\n" +
	"\x13head_office_address\x18\n" +
	" \x01(\v2\x1a.meshtrade.type.v1.AddressR\x11headOfficeAddress\x12n\n" +
	"\x17company_representatives\x18\v \x03(\v25.meshtrade.compliance.client.v1.CompanyRepresentativeR\x16companyRepresentatives\x12l\n" +
	"\x17connected_legal_persons\x18\f \x03(\v24.meshtrade.compliance.client.v1.ConnectedLegalPersonR\x15connectedLegalPersons\x12o\n" +
	"\x17industry_classification\x18\r \x01(\v26.meshtrade.compliance.client.v1.IndustryClassificationR\x16industryClassification\x120\n" +
	"\x14listed_exchange_code\x18\x0e \x01(\tR\x12listedExchangeCode\x12+\n" +
	"\x11listing_reference\x18\x0f \x01(\tR\x10listingReference\"\x80\x05\n" +
	"\x14ConnectedLegalPerson\x12V\n" +
	"\x0enatural_person\x18\x01 \x01(\v2-.meshtrade.compliance.client.v1.NaturalPersonH\x00R\rnaturalPerson\x12C\n" +
	"\acompany\x18\x02 \x01(\v2'.meshtrade.compliance.client.v1.CompanyH\x00R\acompany\x12:\n" +
	"\x04fund\x18\x03 \x01(\v2$.meshtrade.compliance.client.v1.FundH\x00R\x04fund\x12=\n" +
	"\x05trust\x18\x04 \x01(\v2%.meshtrade.compliance.client.v1.TrustH\x00R\x05trust\x12d\n" +
	"\x10connection_types\x18\x05 \x03(\x0e29.meshtrade.compliance.client.v1.LegalPersonConnectionTypeR\x0fconnectionTypes\x12M\n" +
	"\x14ownership_percentage\x18\x06 \x01(\v2\x1a.meshtrade.type.v1.DecimalR\x13ownershipPercentage\x12T\n" +
	"\x18voting_rights_percentage\x18\a \x01(\v2\x1a.meshtrade.type.v1.DecimalR\x16votingRightsPercentage\x125\n" +
	"\x16connection_description\x18\b \x01(\tR\x15connectionDescriptionB\x0e\n" +
	"\flegal_person*\xe3\x02\n" +
	"\x19LegalPersonConnectionType\x12,\n" +
	"(LEGAL_PERSON_CONNECTION_TYPE_UNSPECIFIED\x10\x00\x12,\n" +
	"(LEGAL_PERSON_CONNECTION_TYPE_SHAREHOLDER\x10\x01\x12/\n" +
	"+LEGAL_PERSON_CONNECTION_TYPE_PARENT_COMPANY\x10\x02\x123\n" +
	"/LEGAL_PERSON_CONNECTION_TYPE_CORPORATE_DIRECTOR\x10\x03\x12&\n" +
	"\"LEGAL_PERSON_CONNECTION_TYPE_TRUST\x10\x04\x120\n" +
	",LEGAL_PERSON_CONNECTION_TYPE_GENERAL_PARTNER\x10\x05\x12*\n" +
	"&LEGAL_PERSON_CONNECTION_TYPE_GUARANTOR\x10\x06B;Z9github.com/meshtrade/api/go/compliance/client/v1;clientv1b\x06proto3"

var (
	file_meshtrade_compliance_client_v1_company_proto_rawDescOnce sync.Once
	file_meshtrade_compliance_client_v1_company_proto_rawDescData []byte
)

func file_meshtrade_compliance_client_v1_company_proto_rawDescGZIP() []byte {
	file_meshtrade_compliance_client_v1_company_proto_rawDescOnce.Do(func() {
		file_meshtrade_compliance_client_v1_company_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_meshtrade_compliance_client_v1_company_proto_rawDesc), len(file_meshtrade_compliance_client_v1_company_proto_rawDesc)))
	})
	return file_meshtrade_compliance_client_v1_company_proto_rawDescData
}

var file_meshtrade_compliance_client_v1_company_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_meshtrade_compliance_client_v1_company_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_meshtrade_compliance_client_v1_company_proto_goTypes = []any{
	(LegalPersonConnectionType)(0), // 0: meshtrade.compliance.client.v1.LegalPersonConnectionType
	(*Company)(nil),                // 1: meshtrade.compliance.client.v1.Company
	(*ConnectedLegalPerson)(nil),   // 2: meshtrade.compliance.client.v1.ConnectedLegalPerson
	(*date.Date)(nil),              // 3: google.type.Date
	(*v1.Address)(nil),             // 4: meshtrade.type.v1.Address
	(*CompanyRepresentative)(nil),  // 5: meshtrade.compliance.client.v1.CompanyRepresentative
	(*IndustryClassification)(nil), // 6: meshtrade.compliance.client.v1.IndustryClassification
	(*NaturalPerson)(nil),          // 7: meshtrade.compliance.client.v1.NaturalPerson
	(*Fund)(nil),                   // 8: meshtrade.compliance.client.v1.Fund
	(*Trust)(nil),                  // 9: meshtrade.compliance.client.v1.Trust
	(*v1.Decimal)(nil),             // 10: meshtrade.type.v1.Decimal
}
var file_meshtrade_compliance_client_v1_company_proto_depIdxs = []int32{
	3,  // 0: meshtrade.compliance.client.v1.Company.date_of_incorporation:type_name -> google.type.Date
	4,  // 1: meshtrade.compliance.client.v1.Company.registered_address:type_name -> meshtrade.type.v1.Address
	4,  // 2: meshtrade.compliance.client.v1.Company.principal_physical_address:type_name -> meshtrade.type.v1.Address
	4,  // 3: meshtrade.compliance.client.v1.Company.postal_address:type_name -> meshtrade.type.v1.Address
	4,  // 4: meshtrade.compliance.client.v1.Company.head_office_address:type_name -> meshtrade.type.v1.Address
	5,  // 5: meshtrade.compliance.client.v1.Company.company_representatives:type_name -> meshtrade.compliance.client.v1.CompanyRepresentative
	2,  // 6: meshtrade.compliance.client.v1.Company.connected_legal_persons:type_name -> meshtrade.compliance.client.v1.ConnectedLegalPerson
	6,  // 7: meshtrade.compliance.client.v1.Company.industry_classification:type_name -> meshtrade.compliance.client.v1.IndustryClassification
	7,  // 8: meshtrade.compliance.client.v1.ConnectedLegalPerson.natural_person:type_name -> meshtrade.compliance.client.v1.NaturalPerson
	1,  // 9: meshtrade.compliance.client.v1.ConnectedLegalPerson.company:type_name -> meshtrade.compliance.client.v1.Company
	8,  // 10: meshtrade.compliance.client.v1.ConnectedLegalPerson.fund:type_name -> meshtrade.compliance.client.v1.Fund
	9,  // 11: meshtrade.compliance.client.v1.ConnectedLegalPerson.trust:type_name -> meshtrade.compliance.client.v1.Trust
	0,  // 12: meshtrade.compliance.client.v1.ConnectedLegalPerson.connection_types:type_name -> meshtrade.compliance.client.v1.LegalPersonConnectionType
	10, // 13: meshtrade.compliance.client.v1.ConnectedLegalPerson.ownership_percentage:type_name -> meshtrade.type.v1.Decimal
	10, // 14: meshtrade.compliance.client.v1.ConnectedLegalPerson.voting_rights_percentage:type_name -> meshtrade.type.v1.Decimal
	15, // [15:15] is the sub-list for method output_type
	15, // [15:15] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_meshtrade_compliance_client_v1_company_proto_init() }
func file_meshtrade_compliance_client_v1_company_proto_init() {
	if File_meshtrade_compliance_client_v1_company_proto != nil {
		return
	}
	file_meshtrade_compliance_client_v1_company_representative_proto_init()
	file_meshtrade_compliance_client_v1_fund_proto_init()
	file_meshtrade_compliance_client_v1_industry_classification_proto_init()
	file_meshtrade_compliance_client_v1_natural_person_proto_init()
	file_meshtrade_compliance_client_v1_trust_proto_init()
	file_meshtrade_compliance_client_v1_company_proto_msgTypes[1].OneofWrappers = []any{
		(*ConnectedLegalPerson_NaturalPerson)(nil),
		(*ConnectedLegalPerson_Company)(nil),
		(*ConnectedLegalPerson_Fund)(nil),
		(*ConnectedLegalPerson_Trust)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_meshtrade_compliance_client_v1_company_proto_rawDesc), len(file_meshtrade_compliance_client_v1_company_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_meshtrade_compliance_client_v1_company_proto_goTypes,
		DependencyIndexes: file_meshtrade_compliance_client_v1_company_proto_depIdxs,
		EnumInfos:         file_meshtrade_compliance_client_v1_company_proto_enumTypes,
		MessageInfos:      file_meshtrade_compliance_client_v1_company_proto_msgTypes,
	}.Build()
	File_meshtrade_compliance_client_v1_company_proto = out.File
	file_meshtrade_compliance_client_v1_company_proto_goTypes = nil
	file_meshtrade_compliance_client_v1_company_proto_depIdxs = nil
}
