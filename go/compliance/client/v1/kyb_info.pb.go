// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: meshtrade/compliance/client/v1/kyb_info.proto

package clientv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// KYBInfo is the Know Your Customer (KYB) information for an business client.
// This message is used to collect and verify the identity and financial profile a business.
// Note on Field Requirements: Fields marked as 'Required for verification' are essential
// for a successful compliance check, but are not mandatory for creation.
type KYBInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The core identity of the legal person being onboarded.
	// Required for verification.
	LegalPerson *LegalPerson `protobuf:"bytes,1,opt,name=legal_person,json=legalPerson,proto3" json:"legal_person,omitempty"`
	// Company Representatives (The "Actors").
	// Represents individuals with a formal, appointed role who are empowered to act on
	// behalf of the company (e.g., Directors, CEO, Authorized Signatories).
	// This list answers the regulatory question: "Who can legally bind this company?"
	// It is focused on operational control and representation.
	// Required for verification.
	CompanyRepresentatives []*CompanyRepresentative `protobuf:"bytes,2,rep,name=company_representatives,json=companyRepresentatives,proto3" json:"company_representatives,omitempty"`
	// Connected Natural Persons (The "Beneficiaries").
	// Represents the Ultimate Beneficial Owners (UBOs) â€“ the individuals who ultimately
	// own or profit from the company, especially those without a formal representative title.
	// This list is the result of the "look-through" due diligence process and answers
	// the question: "Who ultimately benefits from and controls this company?"
	// Required for verification.
	ConnectedNaturalPersons []*ConnectedNaturalPerson `protobuf:"bytes,3,rep,name=connected_natural_persons,json=connectedNaturalPersons,proto3" json:"connected_natural_persons,omitempty"`
	// Connected Legal Persons (The "Corporate Structure").
	// Represents all non-human entities in the ownership chain (e.g., parent companies,
	// holding companies, trusts). Each entity here requires its own recursive KYB check
	// to map the full ownership structure.
	// This list answers the question: "What other companies own this company?"
	// NOTE: it is only necessary to connect other company details here if they do not form
	// part of the hierarchy of clients on the Mesh platform.
	// Required for verification (if the ownership structure includes other companies that are not present on Mesh).
	ConnectedLegalPersons []*ConnectedLegalPerson `protobuf:"bytes,4,rep,name=connected_legal_persons,json=connectedLegalPersons,proto3" json:"connected_legal_persons,omitempty"`
	// The industry classification of the business (e.g., using NACE, SIC codes).
	// This is critical for risk assessment.
	// Optional for verification.
	IndustryClassification *IndustryClassification `protobuf:"bytes,5,opt,name=industry_classification,json=industryClassification,proto3" json:"industry_classification,omitempty"`
	// The stock exchange where the company is listed (e.g., "NASDAQ", "LSE").
	// Optional for verification.
	ListedExchangeCode string `protobuf:"bytes,6,opt,name=listed_exchange_code,json=listedExchangeCode,proto3" json:"listed_exchange_code,omitempty"`
	// The reference/ticker symbol for the company on the exchange (e.g., "GOOGL").
	// Optional for verification.
	ListingReference string `protobuf:"bytes,7,opt,name=listing_reference,json=listingReference,proto3" json:"listing_reference,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *KYBInfo) Reset() {
	*x = KYBInfo{}
	mi := &file_meshtrade_compliance_client_v1_kyb_info_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KYBInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KYBInfo) ProtoMessage() {}

func (x *KYBInfo) ProtoReflect() protoreflect.Message {
	mi := &file_meshtrade_compliance_client_v1_kyb_info_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KYBInfo.ProtoReflect.Descriptor instead.
func (*KYBInfo) Descriptor() ([]byte, []int) {
	return file_meshtrade_compliance_client_v1_kyb_info_proto_rawDescGZIP(), []int{0}
}

func (x *KYBInfo) GetLegalPerson() *LegalPerson {
	if x != nil {
		return x.LegalPerson
	}
	return nil
}

func (x *KYBInfo) GetCompanyRepresentatives() []*CompanyRepresentative {
	if x != nil {
		return x.CompanyRepresentatives
	}
	return nil
}

func (x *KYBInfo) GetConnectedNaturalPersons() []*ConnectedNaturalPerson {
	if x != nil {
		return x.ConnectedNaturalPersons
	}
	return nil
}

func (x *KYBInfo) GetConnectedLegalPersons() []*ConnectedLegalPerson {
	if x != nil {
		return x.ConnectedLegalPersons
	}
	return nil
}

func (x *KYBInfo) GetIndustryClassification() *IndustryClassification {
	if x != nil {
		return x.IndustryClassification
	}
	return nil
}

func (x *KYBInfo) GetListedExchangeCode() string {
	if x != nil {
		return x.ListedExchangeCode
	}
	return ""
}

func (x *KYBInfo) GetListingReference() string {
	if x != nil {
		return x.ListingReference
	}
	return ""
}

var File_meshtrade_compliance_client_v1_kyb_info_proto protoreflect.FileDescriptor

const file_meshtrade_compliance_client_v1_kyb_info_proto_rawDesc = "" +
	"\n" +
	"-meshtrade/compliance/client/v1/kyb_info.proto\x12\x1emeshtrade.compliance.client.v1\x1a;meshtrade/compliance/client/v1/company_representative.proto\x1a;meshtrade/compliance/client/v1/connected_legal_person.proto\x1a=meshtrade/compliance/client/v1/connected_natural_person.proto\x1a<meshtrade/compliance/client/v1/industry_classification.proto\x1a1meshtrade/compliance/client/v1/legal_person.proto\"\xfb\x04\n" +
	"\aKYBInfo\x12N\n" +
	"\flegal_person\x18\x01 \x01(\v2+.meshtrade.compliance.client.v1.LegalPersonR\vlegalPerson\x12n\n" +
	"\x17company_representatives\x18\x02 \x03(\v25.meshtrade.compliance.client.v1.CompanyRepresentativeR\x16companyRepresentatives\x12r\n" +
	"\x19connected_natural_persons\x18\x03 \x03(\v26.meshtrade.compliance.client.v1.ConnectedNaturalPersonR\x17connectedNaturalPersons\x12l\n" +
	"\x17connected_legal_persons\x18\x04 \x03(\v24.meshtrade.compliance.client.v1.ConnectedLegalPersonR\x15connectedLegalPersons\x12o\n" +
	"\x17industry_classification\x18\x05 \x01(\v26.meshtrade.compliance.client.v1.IndustryClassificationR\x16industryClassification\x120\n" +
	"\x14listed_exchange_code\x18\x06 \x01(\tR\x12listedExchangeCode\x12+\n" +
	"\x11listing_reference\x18\a \x01(\tR\x10listingReferenceB;Z9github.com/meshtrade/api/go/compliance/client/v1;clientv1b\x06proto3"

var (
	file_meshtrade_compliance_client_v1_kyb_info_proto_rawDescOnce sync.Once
	file_meshtrade_compliance_client_v1_kyb_info_proto_rawDescData []byte
)

func file_meshtrade_compliance_client_v1_kyb_info_proto_rawDescGZIP() []byte {
	file_meshtrade_compliance_client_v1_kyb_info_proto_rawDescOnce.Do(func() {
		file_meshtrade_compliance_client_v1_kyb_info_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_meshtrade_compliance_client_v1_kyb_info_proto_rawDesc), len(file_meshtrade_compliance_client_v1_kyb_info_proto_rawDesc)))
	})
	return file_meshtrade_compliance_client_v1_kyb_info_proto_rawDescData
}

var file_meshtrade_compliance_client_v1_kyb_info_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_meshtrade_compliance_client_v1_kyb_info_proto_goTypes = []any{
	(*KYBInfo)(nil),                // 0: meshtrade.compliance.client.v1.KYBInfo
	(*LegalPerson)(nil),            // 1: meshtrade.compliance.client.v1.LegalPerson
	(*CompanyRepresentative)(nil),  // 2: meshtrade.compliance.client.v1.CompanyRepresentative
	(*ConnectedNaturalPerson)(nil), // 3: meshtrade.compliance.client.v1.ConnectedNaturalPerson
	(*ConnectedLegalPerson)(nil),   // 4: meshtrade.compliance.client.v1.ConnectedLegalPerson
	(*IndustryClassification)(nil), // 5: meshtrade.compliance.client.v1.IndustryClassification
}
var file_meshtrade_compliance_client_v1_kyb_info_proto_depIdxs = []int32{
	1, // 0: meshtrade.compliance.client.v1.KYBInfo.legal_person:type_name -> meshtrade.compliance.client.v1.LegalPerson
	2, // 1: meshtrade.compliance.client.v1.KYBInfo.company_representatives:type_name -> meshtrade.compliance.client.v1.CompanyRepresentative
	3, // 2: meshtrade.compliance.client.v1.KYBInfo.connected_natural_persons:type_name -> meshtrade.compliance.client.v1.ConnectedNaturalPerson
	4, // 3: meshtrade.compliance.client.v1.KYBInfo.connected_legal_persons:type_name -> meshtrade.compliance.client.v1.ConnectedLegalPerson
	5, // 4: meshtrade.compliance.client.v1.KYBInfo.industry_classification:type_name -> meshtrade.compliance.client.v1.IndustryClassification
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_meshtrade_compliance_client_v1_kyb_info_proto_init() }
func file_meshtrade_compliance_client_v1_kyb_info_proto_init() {
	if File_meshtrade_compliance_client_v1_kyb_info_proto != nil {
		return
	}
	file_meshtrade_compliance_client_v1_company_representative_proto_init()
	file_meshtrade_compliance_client_v1_connected_legal_person_proto_init()
	file_meshtrade_compliance_client_v1_connected_natural_person_proto_init()
	file_meshtrade_compliance_client_v1_industry_classification_proto_init()
	file_meshtrade_compliance_client_v1_legal_person_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_meshtrade_compliance_client_v1_kyb_info_proto_rawDesc), len(file_meshtrade_compliance_client_v1_kyb_info_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_meshtrade_compliance_client_v1_kyb_info_proto_goTypes,
		DependencyIndexes: file_meshtrade_compliance_client_v1_kyb_info_proto_depIdxs,
		MessageInfos:      file_meshtrade_compliance_client_v1_kyb_info_proto_msgTypes,
	}.Build()
	File_meshtrade_compliance_client_v1_kyb_info_proto = out.File
	file_meshtrade_compliance_client_v1_kyb_info_proto_goTypes = nil
	file_meshtrade_compliance_client_v1_kyb_info_proto_depIdxs = nil
}
