// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: meshtrade/fee/instrument_fee/v1/service.proto

package instrument_feev1

import (
	v1 "github.com/meshtrade/api/go/type/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ListRequest is the List method request on the Fee Service.
type ListRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListRequest) Reset() {
	*x = ListRequest{}
	mi := &file_meshtrade_fee_instrument_fee_v1_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRequest) ProtoMessage() {}

func (x *ListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_meshtrade_fee_instrument_fee_v1_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRequest.ProtoReflect.Descriptor instead.
func (*ListRequest) Descriptor() ([]byte, []int) {
	return file_meshtrade_fee_instrument_fee_v1_service_proto_rawDescGZIP(), []int{0}
}

// ListResponse is the List method response on the Fee Service.
type ListResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Fees are the list of fees that were retrieved.
	Fees          []*InstrumentFee `protobuf:"bytes,1,rep,name=fees,proto3" json:"fees,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListResponse) Reset() {
	*x = ListResponse{}
	mi := &file_meshtrade_fee_instrument_fee_v1_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListResponse) ProtoMessage() {}

func (x *ListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_meshtrade_fee_instrument_fee_v1_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListResponse.ProtoReflect.Descriptor instead.
func (*ListResponse) Descriptor() ([]byte, []int) {
	return file_meshtrade_fee_instrument_fee_v1_service_proto_rawDescGZIP(), []int{1}
}

func (x *ListResponse) GetFees() []*InstrumentFee {
	if x != nil {
		return x.Fees
	}
	return nil
}

// CalculateMintingFeesRequest is the CalculateMintingFees method request on the Fee Service.
type CalculateMintingFeesRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Amount is the mint Amount for which fees are calculated.
	Amount        *v1.Amount `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CalculateMintingFeesRequest) Reset() {
	*x = CalculateMintingFeesRequest{}
	mi := &file_meshtrade_fee_instrument_fee_v1_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CalculateMintingFeesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalculateMintingFeesRequest) ProtoMessage() {}

func (x *CalculateMintingFeesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_meshtrade_fee_instrument_fee_v1_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalculateMintingFeesRequest.ProtoReflect.Descriptor instead.
func (*CalculateMintingFeesRequest) Descriptor() ([]byte, []int) {
	return file_meshtrade_fee_instrument_fee_v1_service_proto_rawDescGZIP(), []int{2}
}

func (x *CalculateMintingFeesRequest) GetAmount() *v1.Amount {
	if x != nil {
		return x.Amount
	}
	return nil
}

// CalculateMintingFeesResponse is the CalculateMintingFees method response on the Fee Service.
type CalculateMintingFeesResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Fees are the fees calculated for the requested mint amount.
	Fees          []*InstrumentFee `protobuf:"bytes,1,rep,name=fees,proto3" json:"fees,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CalculateMintingFeesResponse) Reset() {
	*x = CalculateMintingFeesResponse{}
	mi := &file_meshtrade_fee_instrument_fee_v1_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CalculateMintingFeesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalculateMintingFeesResponse) ProtoMessage() {}

func (x *CalculateMintingFeesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_meshtrade_fee_instrument_fee_v1_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalculateMintingFeesResponse.ProtoReflect.Descriptor instead.
func (*CalculateMintingFeesResponse) Descriptor() ([]byte, []int) {
	return file_meshtrade_fee_instrument_fee_v1_service_proto_rawDescGZIP(), []int{3}
}

func (x *CalculateMintingFeesResponse) GetFees() []*InstrumentFee {
	if x != nil {
		return x.Fees
	}
	return nil
}

// CalculateBurningFeesRequest is the CalculateBurningFees method request on the Fee Service.
type CalculateBurningFeesRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Amount is the burn Amount for which fees are calculated.
	Amount        *v1.Amount `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CalculateBurningFeesRequest) Reset() {
	*x = CalculateBurningFeesRequest{}
	mi := &file_meshtrade_fee_instrument_fee_v1_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CalculateBurningFeesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalculateBurningFeesRequest) ProtoMessage() {}

func (x *CalculateBurningFeesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_meshtrade_fee_instrument_fee_v1_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalculateBurningFeesRequest.ProtoReflect.Descriptor instead.
func (*CalculateBurningFeesRequest) Descriptor() ([]byte, []int) {
	return file_meshtrade_fee_instrument_fee_v1_service_proto_rawDescGZIP(), []int{4}
}

func (x *CalculateBurningFeesRequest) GetAmount() *v1.Amount {
	if x != nil {
		return x.Amount
	}
	return nil
}

// CalculateBurningFeesResponse is the CalculateBurningFees method response on the Fee Service.
type CalculateBurningFeesResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Fees are the fees calculated for the requested burn amount.
	Fees          []*InstrumentFee `protobuf:"bytes,1,rep,name=fees,proto3" json:"fees,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CalculateBurningFeesResponse) Reset() {
	*x = CalculateBurningFeesResponse{}
	mi := &file_meshtrade_fee_instrument_fee_v1_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CalculateBurningFeesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalculateBurningFeesResponse) ProtoMessage() {}

func (x *CalculateBurningFeesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_meshtrade_fee_instrument_fee_v1_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalculateBurningFeesResponse.ProtoReflect.Descriptor instead.
func (*CalculateBurningFeesResponse) Descriptor() ([]byte, []int) {
	return file_meshtrade_fee_instrument_fee_v1_service_proto_rawDescGZIP(), []int{5}
}

func (x *CalculateBurningFeesResponse) GetFees() []*InstrumentFee {
	if x != nil {
		return x.Fees
	}
	return nil
}

// CalculateLifecycleFeesRequest is the CalculateLifecycleFees method request on the Fee Service.
type CalculateLifecycleFeesRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// InstrumentID is the id of the instrument for which lifecycle fees are calculated.
	InstrumentId string `protobuf:"bytes,1,opt,name=instrument_id,json=instrumentId,proto3" json:"instrument_id,omitempty"`
	// LifecycleEventCategory is the category of lifecycle events for which
	// lifecycle fees are calculated
	LifecycleEventCategory LifecycleEventCategory `protobuf:"varint,2,opt,name=lifecycle_event_category,json=lifecycleEventCategory,proto3,enum=meshtrade.fee.instrument_fee.v1.LifecycleEventCategory" json:"lifecycle_event_category,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *CalculateLifecycleFeesRequest) Reset() {
	*x = CalculateLifecycleFeesRequest{}
	mi := &file_meshtrade_fee_instrument_fee_v1_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CalculateLifecycleFeesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalculateLifecycleFeesRequest) ProtoMessage() {}

func (x *CalculateLifecycleFeesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_meshtrade_fee_instrument_fee_v1_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalculateLifecycleFeesRequest.ProtoReflect.Descriptor instead.
func (*CalculateLifecycleFeesRequest) Descriptor() ([]byte, []int) {
	return file_meshtrade_fee_instrument_fee_v1_service_proto_rawDescGZIP(), []int{6}
}

func (x *CalculateLifecycleFeesRequest) GetInstrumentId() string {
	if x != nil {
		return x.InstrumentId
	}
	return ""
}

func (x *CalculateLifecycleFeesRequest) GetLifecycleEventCategory() LifecycleEventCategory {
	if x != nil {
		return x.LifecycleEventCategory
	}
	return LifecycleEventCategory_LIFECYCLE_EVENT_CATEGORY_UNSPECIFIED
}

// CalculateLifecycleFeesResponse is the CalculateLifecycleFees method response on the Fee Service.
type CalculateLifecycleFeesResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Fees are the fees calculated for the requested instrument.
	Fees          []*InstrumentFee `protobuf:"bytes,1,rep,name=fees,proto3" json:"fees,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CalculateLifecycleFeesResponse) Reset() {
	*x = CalculateLifecycleFeesResponse{}
	mi := &file_meshtrade_fee_instrument_fee_v1_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CalculateLifecycleFeesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalculateLifecycleFeesResponse) ProtoMessage() {}

func (x *CalculateLifecycleFeesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_meshtrade_fee_instrument_fee_v1_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalculateLifecycleFeesResponse.ProtoReflect.Descriptor instead.
func (*CalculateLifecycleFeesResponse) Descriptor() ([]byte, []int) {
	return file_meshtrade_fee_instrument_fee_v1_service_proto_rawDescGZIP(), []int{7}
}

func (x *CalculateLifecycleFeesResponse) GetFees() []*InstrumentFee {
	if x != nil {
		return x.Fees
	}
	return nil
}

// FullUpdateRequest is the empty FullUpdate method request on the Fee Service.
type FullUpdateRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FullUpdateRequest) Reset() {
	*x = FullUpdateRequest{}
	mi := &file_meshtrade_fee_instrument_fee_v1_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FullUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FullUpdateRequest) ProtoMessage() {}

func (x *FullUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_meshtrade_fee_instrument_fee_v1_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FullUpdateRequest.ProtoReflect.Descriptor instead.
func (*FullUpdateRequest) Descriptor() ([]byte, []int) {
	return file_meshtrade_fee_instrument_fee_v1_service_proto_rawDescGZIP(), []int{8}
}

// FullUpdateResponse is the empty FullUpdate method response on the Fee Service.
type FullUpdateResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FullUpdateResponse) Reset() {
	*x = FullUpdateResponse{}
	mi := &file_meshtrade_fee_instrument_fee_v1_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FullUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FullUpdateResponse) ProtoMessage() {}

func (x *FullUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_meshtrade_fee_instrument_fee_v1_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FullUpdateResponse.ProtoReflect.Descriptor instead.
func (*FullUpdateResponse) Descriptor() ([]byte, []int) {
	return file_meshtrade_fee_instrument_fee_v1_service_proto_rawDescGZIP(), []int{9}
}

var File_meshtrade_fee_instrument_fee_v1_service_proto protoreflect.FileDescriptor

const file_meshtrade_fee_instrument_fee_v1_service_proto_rawDesc = "" +
	"\n" +
	"-meshtrade/fee/instrument_fee/v1/service.proto\x12\x1fmeshtrade.fee.instrument_fee.v1\x1a4meshtrade/fee/instrument_fee/v1/instrument_fee.proto\x1a>meshtrade/fee/instrument_fee/v1/lifecycle_event_category.proto\x1a\x1emeshtrade/type/v1/amount.proto\"\r\n" +
	"\vListRequest\"R\n" +
	"\fListResponse\x12B\n" +
	"\x04fees\x18\x01 \x03(\v2..meshtrade.fee.instrument_fee.v1.InstrumentFeeR\x04fees\"P\n" +
	"\x1bCalculateMintingFeesRequest\x121\n" +
	"\x06amount\x18\x01 \x01(\v2\x19.meshtrade.type.v1.AmountR\x06amount\"b\n" +
	"\x1cCalculateMintingFeesResponse\x12B\n" +
	"\x04fees\x18\x01 \x03(\v2..meshtrade.fee.instrument_fee.v1.InstrumentFeeR\x04fees\"P\n" +
	"\x1bCalculateBurningFeesRequest\x121\n" +
	"\x06amount\x18\x01 \x01(\v2\x19.meshtrade.type.v1.AmountR\x06amount\"b\n" +
	"\x1cCalculateBurningFeesResponse\x12B\n" +
	"\x04fees\x18\x01 \x03(\v2..meshtrade.fee.instrument_fee.v1.InstrumentFeeR\x04fees\"\xb7\x01\n" +
	"\x1dCalculateLifecycleFeesRequest\x12#\n" +
	"\rinstrument_id\x18\x01 \x01(\tR\finstrumentId\x12q\n" +
	"\x18lifecycle_event_category\x18\x02 \x01(\x0e27.meshtrade.fee.instrument_fee.v1.LifecycleEventCategoryR\x16lifecycleEventCategory\"d\n" +
	"\x1eCalculateLifecycleFeesResponse\x12B\n" +
	"\x04fees\x18\x01 \x03(\v2..meshtrade.fee.instrument_fee.v1.InstrumentFeeR\x04fees\"\x13\n" +
	"\x11FullUpdateRequest\"\x14\n" +
	"\x12FullUpdateResponse2\xad\x05\n" +
	"\aService\x12c\n" +
	"\x04List\x12,.meshtrade.fee.instrument_fee.v1.ListRequest\x1a-.meshtrade.fee.instrument_fee.v1.ListResponse\x12\x93\x01\n" +
	"\x14CalculateMintingFees\x12<.meshtrade.fee.instrument_fee.v1.CalculateMintingFeesRequest\x1a=.meshtrade.fee.instrument_fee.v1.CalculateMintingFeesResponse\x12\x93\x01\n" +
	"\x14CalculateBurningFees\x12<.meshtrade.fee.instrument_fee.v1.CalculateBurningFeesRequest\x1a=.meshtrade.fee.instrument_fee.v1.CalculateBurningFeesResponse\x12\x99\x01\n" +
	"\x16CalculateLifecycleFees\x12>.meshtrade.fee.instrument_fee.v1.CalculateLifecycleFeesRequest\x1a?.meshtrade.fee.instrument_fee.v1.CalculateLifecycleFeesResponse\x12u\n" +
	"\n" +
	"FullUpdate\x122.meshtrade.fee.instrument_fee.v1.FullUpdateRequest\x1a3.meshtrade.fee.instrument_fee.v1.FullUpdateResponseBDZBgithub.com/meshtrade/api/go/fee/instrument_fee/v1;instrument_feev1b\x06proto3"

var (
	file_meshtrade_fee_instrument_fee_v1_service_proto_rawDescOnce sync.Once
	file_meshtrade_fee_instrument_fee_v1_service_proto_rawDescData []byte
)

func file_meshtrade_fee_instrument_fee_v1_service_proto_rawDescGZIP() []byte {
	file_meshtrade_fee_instrument_fee_v1_service_proto_rawDescOnce.Do(func() {
		file_meshtrade_fee_instrument_fee_v1_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_meshtrade_fee_instrument_fee_v1_service_proto_rawDesc), len(file_meshtrade_fee_instrument_fee_v1_service_proto_rawDesc)))
	})
	return file_meshtrade_fee_instrument_fee_v1_service_proto_rawDescData
}

var file_meshtrade_fee_instrument_fee_v1_service_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_meshtrade_fee_instrument_fee_v1_service_proto_goTypes = []any{
	(*ListRequest)(nil),                    // 0: meshtrade.fee.instrument_fee.v1.ListRequest
	(*ListResponse)(nil),                   // 1: meshtrade.fee.instrument_fee.v1.ListResponse
	(*CalculateMintingFeesRequest)(nil),    // 2: meshtrade.fee.instrument_fee.v1.CalculateMintingFeesRequest
	(*CalculateMintingFeesResponse)(nil),   // 3: meshtrade.fee.instrument_fee.v1.CalculateMintingFeesResponse
	(*CalculateBurningFeesRequest)(nil),    // 4: meshtrade.fee.instrument_fee.v1.CalculateBurningFeesRequest
	(*CalculateBurningFeesResponse)(nil),   // 5: meshtrade.fee.instrument_fee.v1.CalculateBurningFeesResponse
	(*CalculateLifecycleFeesRequest)(nil),  // 6: meshtrade.fee.instrument_fee.v1.CalculateLifecycleFeesRequest
	(*CalculateLifecycleFeesResponse)(nil), // 7: meshtrade.fee.instrument_fee.v1.CalculateLifecycleFeesResponse
	(*FullUpdateRequest)(nil),              // 8: meshtrade.fee.instrument_fee.v1.FullUpdateRequest
	(*FullUpdateResponse)(nil),             // 9: meshtrade.fee.instrument_fee.v1.FullUpdateResponse
	(*InstrumentFee)(nil),                  // 10: meshtrade.fee.instrument_fee.v1.InstrumentFee
	(*v1.Amount)(nil),                      // 11: meshtrade.type.v1.Amount
	(LifecycleEventCategory)(0),            // 12: meshtrade.fee.instrument_fee.v1.LifecycleEventCategory
}
var file_meshtrade_fee_instrument_fee_v1_service_proto_depIdxs = []int32{
	10, // 0: meshtrade.fee.instrument_fee.v1.ListResponse.fees:type_name -> meshtrade.fee.instrument_fee.v1.InstrumentFee
	11, // 1: meshtrade.fee.instrument_fee.v1.CalculateMintingFeesRequest.amount:type_name -> meshtrade.type.v1.Amount
	10, // 2: meshtrade.fee.instrument_fee.v1.CalculateMintingFeesResponse.fees:type_name -> meshtrade.fee.instrument_fee.v1.InstrumentFee
	11, // 3: meshtrade.fee.instrument_fee.v1.CalculateBurningFeesRequest.amount:type_name -> meshtrade.type.v1.Amount
	10, // 4: meshtrade.fee.instrument_fee.v1.CalculateBurningFeesResponse.fees:type_name -> meshtrade.fee.instrument_fee.v1.InstrumentFee
	12, // 5: meshtrade.fee.instrument_fee.v1.CalculateLifecycleFeesRequest.lifecycle_event_category:type_name -> meshtrade.fee.instrument_fee.v1.LifecycleEventCategory
	10, // 6: meshtrade.fee.instrument_fee.v1.CalculateLifecycleFeesResponse.fees:type_name -> meshtrade.fee.instrument_fee.v1.InstrumentFee
	0,  // 7: meshtrade.fee.instrument_fee.v1.Service.List:input_type -> meshtrade.fee.instrument_fee.v1.ListRequest
	2,  // 8: meshtrade.fee.instrument_fee.v1.Service.CalculateMintingFees:input_type -> meshtrade.fee.instrument_fee.v1.CalculateMintingFeesRequest
	4,  // 9: meshtrade.fee.instrument_fee.v1.Service.CalculateBurningFees:input_type -> meshtrade.fee.instrument_fee.v1.CalculateBurningFeesRequest
	6,  // 10: meshtrade.fee.instrument_fee.v1.Service.CalculateLifecycleFees:input_type -> meshtrade.fee.instrument_fee.v1.CalculateLifecycleFeesRequest
	8,  // 11: meshtrade.fee.instrument_fee.v1.Service.FullUpdate:input_type -> meshtrade.fee.instrument_fee.v1.FullUpdateRequest
	1,  // 12: meshtrade.fee.instrument_fee.v1.Service.List:output_type -> meshtrade.fee.instrument_fee.v1.ListResponse
	3,  // 13: meshtrade.fee.instrument_fee.v1.Service.CalculateMintingFees:output_type -> meshtrade.fee.instrument_fee.v1.CalculateMintingFeesResponse
	5,  // 14: meshtrade.fee.instrument_fee.v1.Service.CalculateBurningFees:output_type -> meshtrade.fee.instrument_fee.v1.CalculateBurningFeesResponse
	7,  // 15: meshtrade.fee.instrument_fee.v1.Service.CalculateLifecycleFees:output_type -> meshtrade.fee.instrument_fee.v1.CalculateLifecycleFeesResponse
	9,  // 16: meshtrade.fee.instrument_fee.v1.Service.FullUpdate:output_type -> meshtrade.fee.instrument_fee.v1.FullUpdateResponse
	12, // [12:17] is the sub-list for method output_type
	7,  // [7:12] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_meshtrade_fee_instrument_fee_v1_service_proto_init() }
func file_meshtrade_fee_instrument_fee_v1_service_proto_init() {
	if File_meshtrade_fee_instrument_fee_v1_service_proto != nil {
		return
	}
	file_meshtrade_fee_instrument_fee_v1_instrument_fee_proto_init()
	file_meshtrade_fee_instrument_fee_v1_lifecycle_event_category_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_meshtrade_fee_instrument_fee_v1_service_proto_rawDesc), len(file_meshtrade_fee_instrument_fee_v1_service_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_meshtrade_fee_instrument_fee_v1_service_proto_goTypes,
		DependencyIndexes: file_meshtrade_fee_instrument_fee_v1_service_proto_depIdxs,
		MessageInfos:      file_meshtrade_fee_instrument_fee_v1_service_proto_msgTypes,
	}.Build()
	File_meshtrade_fee_instrument_fee_v1_service_proto = out.File
	file_meshtrade_fee_instrument_fee_v1_service_proto_goTypes = nil
	file_meshtrade_fee_instrument_fee_v1_service_proto_depIdxs = nil
}
