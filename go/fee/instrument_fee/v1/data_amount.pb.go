// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: meshtrade/fee/instrument_fee/v1/data_amount.proto

package instrument_feev1

import (
	v1 "github.com/meshtrade/api/go/type/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// AmountData is the additional calculation data for a Fee
// of a fixed amount.
// This is used for flat fees that do not depend on a variable
// base amount and percentage for calculation.
type AmountData struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// AmountExclVAT is the VAT exclusive amount used to calculate
	// Fee.VatAmount and the resulting Fee.AmountInclVAT.
	AmountExclVat *v1.Amount `protobuf:"bytes,1,opt,name=amount_excl_vat,json=amountExclVat,proto3" json:"amount_excl_vat,omitempty"`
	// VATRate is the rate used to calculate Fee.VatAmount.
	VatRate       *v1.Decimal `protobuf:"bytes,2,opt,name=vat_rate,json=vatRate,proto3" json:"vat_rate,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AmountData) Reset() {
	*x = AmountData{}
	mi := &file_meshtrade_fee_instrument_fee_v1_data_amount_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AmountData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AmountData) ProtoMessage() {}

func (x *AmountData) ProtoReflect() protoreflect.Message {
	mi := &file_meshtrade_fee_instrument_fee_v1_data_amount_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AmountData.ProtoReflect.Descriptor instead.
func (*AmountData) Descriptor() ([]byte, []int) {
	return file_meshtrade_fee_instrument_fee_v1_data_amount_proto_rawDescGZIP(), []int{0}
}

func (x *AmountData) GetAmountExclVat() *v1.Amount {
	if x != nil {
		return x.AmountExclVat
	}
	return nil
}

func (x *AmountData) GetVatRate() *v1.Decimal {
	if x != nil {
		return x.VatRate
	}
	return nil
}

var File_meshtrade_fee_instrument_fee_v1_data_amount_proto protoreflect.FileDescriptor

const file_meshtrade_fee_instrument_fee_v1_data_amount_proto_rawDesc = "" +
	"\n" +
	"1meshtrade/fee/instrument_fee/v1/data_amount.proto\x12\x1fmeshtrade.fee.instrument_fee.v1\x1a\x1emeshtrade/type/v1/amount.proto\x1a\x1fmeshtrade/type/v1/decimal.proto\"\x86\x01\n" +
	"\n" +
	"AmountData\x12A\n" +
	"\x0famount_excl_vat\x18\x01 \x01(\v2\x19.meshtrade.type.v1.AmountR\ramountExclVat\x125\n" +
	"\bvat_rate\x18\x02 \x01(\v2\x1a.meshtrade.type.v1.DecimalR\avatRateBDZBgithub.com/meshtrade/api/go/fee/instrument_fee/v1;instrument_feev1b\x06proto3"

var (
	file_meshtrade_fee_instrument_fee_v1_data_amount_proto_rawDescOnce sync.Once
	file_meshtrade_fee_instrument_fee_v1_data_amount_proto_rawDescData []byte
)

func file_meshtrade_fee_instrument_fee_v1_data_amount_proto_rawDescGZIP() []byte {
	file_meshtrade_fee_instrument_fee_v1_data_amount_proto_rawDescOnce.Do(func() {
		file_meshtrade_fee_instrument_fee_v1_data_amount_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_meshtrade_fee_instrument_fee_v1_data_amount_proto_rawDesc), len(file_meshtrade_fee_instrument_fee_v1_data_amount_proto_rawDesc)))
	})
	return file_meshtrade_fee_instrument_fee_v1_data_amount_proto_rawDescData
}

var file_meshtrade_fee_instrument_fee_v1_data_amount_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_meshtrade_fee_instrument_fee_v1_data_amount_proto_goTypes = []any{
	(*AmountData)(nil), // 0: meshtrade.fee.instrument_fee.v1.AmountData
	(*v1.Amount)(nil),  // 1: meshtrade.type.v1.Amount
	(*v1.Decimal)(nil), // 2: meshtrade.type.v1.Decimal
}
var file_meshtrade_fee_instrument_fee_v1_data_amount_proto_depIdxs = []int32{
	1, // 0: meshtrade.fee.instrument_fee.v1.AmountData.amount_excl_vat:type_name -> meshtrade.type.v1.Amount
	2, // 1: meshtrade.fee.instrument_fee.v1.AmountData.vat_rate:type_name -> meshtrade.type.v1.Decimal
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_meshtrade_fee_instrument_fee_v1_data_amount_proto_init() }
func file_meshtrade_fee_instrument_fee_v1_data_amount_proto_init() {
	if File_meshtrade_fee_instrument_fee_v1_data_amount_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_meshtrade_fee_instrument_fee_v1_data_amount_proto_rawDesc), len(file_meshtrade_fee_instrument_fee_v1_data_amount_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_meshtrade_fee_instrument_fee_v1_data_amount_proto_goTypes,
		DependencyIndexes: file_meshtrade_fee_instrument_fee_v1_data_amount_proto_depIdxs,
		MessageInfos:      file_meshtrade_fee_instrument_fee_v1_data_amount_proto_msgTypes,
	}.Build()
	File_meshtrade_fee_instrument_fee_v1_data_amount_proto = out.File
	file_meshtrade_fee_instrument_fee_v1_data_amount_proto_goTypes = nil
	file_meshtrade_fee_instrument_fee_v1_data_amount_proto_depIdxs = nil
}
