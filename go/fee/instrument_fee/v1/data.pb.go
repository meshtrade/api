// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: meshtrade/fee/instrument_fee/v1/data.proto

package instrument_feev1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Data is the generic calculation data that is attached to a Fee for reference.
type Data struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Data:
	//
	//	*Data_AmountData
	//	*Data_RateData
	//	*Data_PerUnitData
	Data          isData_Data `protobuf_oneof:"data"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Data) Reset() {
	*x = Data{}
	mi := &file_meshtrade_fee_instrument_fee_v1_data_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Data) ProtoMessage() {}

func (x *Data) ProtoReflect() protoreflect.Message {
	mi := &file_meshtrade_fee_instrument_fee_v1_data_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Data.ProtoReflect.Descriptor instead.
func (*Data) Descriptor() ([]byte, []int) {
	return file_meshtrade_fee_instrument_fee_v1_data_proto_rawDescGZIP(), []int{0}
}

func (x *Data) GetData() isData_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Data) GetAmountData() *AmountData {
	if x != nil {
		if x, ok := x.Data.(*Data_AmountData); ok {
			return x.AmountData
		}
	}
	return nil
}

func (x *Data) GetRateData() *RateData {
	if x != nil {
		if x, ok := x.Data.(*Data_RateData); ok {
			return x.RateData
		}
	}
	return nil
}

func (x *Data) GetPerUnitData() *PerUnitData {
	if x != nil {
		if x, ok := x.Data.(*Data_PerUnitData); ok {
			return x.PerUnitData
		}
	}
	return nil
}

type isData_Data interface {
	isData_Data()
}

type Data_AmountData struct {
	AmountData *AmountData `protobuf:"bytes,1,opt,name=amount_data,json=amountData,proto3,oneof"`
}

type Data_RateData struct {
	RateData *RateData `protobuf:"bytes,2,opt,name=rate_data,json=rateData,proto3,oneof"`
}

type Data_PerUnitData struct {
	PerUnitData *PerUnitData `protobuf:"bytes,3,opt,name=per_unit_data,json=perUnitData,proto3,oneof"`
}

func (*Data_AmountData) isData_Data() {}

func (*Data_RateData) isData_Data() {}

func (*Data_PerUnitData) isData_Data() {}

var File_meshtrade_fee_instrument_fee_v1_data_proto protoreflect.FileDescriptor

const file_meshtrade_fee_instrument_fee_v1_data_proto_rawDesc = "" +
	"\n" +
	"*meshtrade/fee/instrument_fee/v1/data.proto\x12\x1fmeshtrade.fee.instrument_fee.v1\x1a1meshtrade/fee/instrument_fee/v1/data_amount.proto\x1a3meshtrade/fee/instrument_fee/v1/data_per_unit.proto\x1a/meshtrade/fee/instrument_fee/v1/data_rate.proto\"\xfc\x01\n" +
	"\x04Data\x12N\n" +
	"\vamount_data\x18\x01 \x01(\v2+.meshtrade.fee.instrument_fee.v1.AmountDataH\x00R\n" +
	"amountData\x12H\n" +
	"\trate_data\x18\x02 \x01(\v2).meshtrade.fee.instrument_fee.v1.RateDataH\x00R\brateData\x12R\n" +
	"\rper_unit_data\x18\x03 \x01(\v2,.meshtrade.fee.instrument_fee.v1.PerUnitDataH\x00R\vperUnitDataB\x06\n" +
	"\x04dataBDZBgithub.com/meshtrade/api/go/fee/instrument_fee/v1;instrument_feev1b\x06proto3"

var (
	file_meshtrade_fee_instrument_fee_v1_data_proto_rawDescOnce sync.Once
	file_meshtrade_fee_instrument_fee_v1_data_proto_rawDescData []byte
)

func file_meshtrade_fee_instrument_fee_v1_data_proto_rawDescGZIP() []byte {
	file_meshtrade_fee_instrument_fee_v1_data_proto_rawDescOnce.Do(func() {
		file_meshtrade_fee_instrument_fee_v1_data_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_meshtrade_fee_instrument_fee_v1_data_proto_rawDesc), len(file_meshtrade_fee_instrument_fee_v1_data_proto_rawDesc)))
	})
	return file_meshtrade_fee_instrument_fee_v1_data_proto_rawDescData
}

var file_meshtrade_fee_instrument_fee_v1_data_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_meshtrade_fee_instrument_fee_v1_data_proto_goTypes = []any{
	(*Data)(nil),        // 0: meshtrade.fee.instrument_fee.v1.Data
	(*AmountData)(nil),  // 1: meshtrade.fee.instrument_fee.v1.AmountData
	(*RateData)(nil),    // 2: meshtrade.fee.instrument_fee.v1.RateData
	(*PerUnitData)(nil), // 3: meshtrade.fee.instrument_fee.v1.PerUnitData
}
var file_meshtrade_fee_instrument_fee_v1_data_proto_depIdxs = []int32{
	1, // 0: meshtrade.fee.instrument_fee.v1.Data.amount_data:type_name -> meshtrade.fee.instrument_fee.v1.AmountData
	2, // 1: meshtrade.fee.instrument_fee.v1.Data.rate_data:type_name -> meshtrade.fee.instrument_fee.v1.RateData
	3, // 2: meshtrade.fee.instrument_fee.v1.Data.per_unit_data:type_name -> meshtrade.fee.instrument_fee.v1.PerUnitData
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_meshtrade_fee_instrument_fee_v1_data_proto_init() }
func file_meshtrade_fee_instrument_fee_v1_data_proto_init() {
	if File_meshtrade_fee_instrument_fee_v1_data_proto != nil {
		return
	}
	file_meshtrade_fee_instrument_fee_v1_data_amount_proto_init()
	file_meshtrade_fee_instrument_fee_v1_data_per_unit_proto_init()
	file_meshtrade_fee_instrument_fee_v1_data_rate_proto_init()
	file_meshtrade_fee_instrument_fee_v1_data_proto_msgTypes[0].OneofWrappers = []any{
		(*Data_AmountData)(nil),
		(*Data_RateData)(nil),
		(*Data_PerUnitData)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_meshtrade_fee_instrument_fee_v1_data_proto_rawDesc), len(file_meshtrade_fee_instrument_fee_v1_data_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_meshtrade_fee_instrument_fee_v1_data_proto_goTypes,
		DependencyIndexes: file_meshtrade_fee_instrument_fee_v1_data_proto_depIdxs,
		MessageInfos:      file_meshtrade_fee_instrument_fee_v1_data_proto_msgTypes,
	}.Build()
	File_meshtrade_fee_instrument_fee_v1_data_proto = out.File
	file_meshtrade_fee_instrument_fee_v1_data_proto_goTypes = nil
	file_meshtrade_fee_instrument_fee_v1_data_proto_depIdxs = nil
}
