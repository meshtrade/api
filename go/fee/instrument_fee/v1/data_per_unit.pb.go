// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: meshtrade/fee/instrument_fee/v1/data_per_unit.proto

package instrument_feev1

import (
	v1 "github.com/meshtrade/api/go/type/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// PerUnitData is the additional calculation data for a Fee
// calculated using a variable amount of tokens and a set
// amount per token.
// For example, this is used for minting and burning fees where
// the Fee amount depends on the number of tokens minted
// or burned, and the fee amount per token minted or burned.
// @bson-marshalled
type PerUnitData struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// NoUnits is the number of tokens for which a set fee amount
	// is charged and is used to calculate the AmountExclVAT.
	NoUnits *v1.Decimal `protobuf:"bytes,1,opt,name=no_units,json=noUnits,proto3" json:"no_units,omitempty"`
	// PerUnitAmount is the fee amount per token that gets
	// multiplied with the NoUnits to calculate the AmountExclVAT.
	PerUnitAmount *v1.Amount `protobuf:"bytes,2,opt,name=per_unit_amount,json=perUnitAmount,proto3" json:"per_unit_amount,omitempty"`
	// AmountExclVAT is the VAT exclusive amount used to calculate
	// Fee.VatAmount and the resulting Fee.AmountInclVAT.
	AmountExclVat *v1.Amount `protobuf:"bytes,3,opt,name=amount_excl_vat,json=amountExclVat,proto3" json:"amount_excl_vat,omitempty"`
	// VATRate is the rate used to calculate Fee.VatAmount.
	VatRate       *v1.Decimal `protobuf:"bytes,4,opt,name=vat_rate,json=vatRate,proto3" json:"vat_rate,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PerUnitData) Reset() {
	*x = PerUnitData{}
	mi := &file_meshtrade_fee_instrument_fee_v1_data_per_unit_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PerUnitData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerUnitData) ProtoMessage() {}

func (x *PerUnitData) ProtoReflect() protoreflect.Message {
	mi := &file_meshtrade_fee_instrument_fee_v1_data_per_unit_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerUnitData.ProtoReflect.Descriptor instead.
func (*PerUnitData) Descriptor() ([]byte, []int) {
	return file_meshtrade_fee_instrument_fee_v1_data_per_unit_proto_rawDescGZIP(), []int{0}
}

func (x *PerUnitData) GetNoUnits() *v1.Decimal {
	if x != nil {
		return x.NoUnits
	}
	return nil
}

func (x *PerUnitData) GetPerUnitAmount() *v1.Amount {
	if x != nil {
		return x.PerUnitAmount
	}
	return nil
}

func (x *PerUnitData) GetAmountExclVat() *v1.Amount {
	if x != nil {
		return x.AmountExclVat
	}
	return nil
}

func (x *PerUnitData) GetVatRate() *v1.Decimal {
	if x != nil {
		return x.VatRate
	}
	return nil
}

var File_meshtrade_fee_instrument_fee_v1_data_per_unit_proto protoreflect.FileDescriptor

const file_meshtrade_fee_instrument_fee_v1_data_per_unit_proto_rawDesc = "" +
	"\n" +
	"3meshtrade/fee/instrument_fee/v1/data_per_unit.proto\x12\x1fmeshtrade.fee.instrument_fee.v1\x1a\x1emeshtrade/type/v1/amount.proto\x1a\x1fmeshtrade/type/v1/decimal.proto\"\x81\x02\n" +
	"\vPerUnitData\x125\n" +
	"\bno_units\x18\x01 \x01(\v2\x1a.meshtrade.type.v1.DecimalR\anoUnits\x12A\n" +
	"\x0fper_unit_amount\x18\x02 \x01(\v2\x19.meshtrade.type.v1.AmountR\rperUnitAmount\x12A\n" +
	"\x0famount_excl_vat\x18\x03 \x01(\v2\x19.meshtrade.type.v1.AmountR\ramountExclVat\x125\n" +
	"\bvat_rate\x18\x04 \x01(\v2\x1a.meshtrade.type.v1.DecimalR\avatRateBDZBgithub.com/meshtrade/api/go/fee/instrument_fee/v1;instrument_feev1b\x06proto3"

var (
	file_meshtrade_fee_instrument_fee_v1_data_per_unit_proto_rawDescOnce sync.Once
	file_meshtrade_fee_instrument_fee_v1_data_per_unit_proto_rawDescData []byte
)

func file_meshtrade_fee_instrument_fee_v1_data_per_unit_proto_rawDescGZIP() []byte {
	file_meshtrade_fee_instrument_fee_v1_data_per_unit_proto_rawDescOnce.Do(func() {
		file_meshtrade_fee_instrument_fee_v1_data_per_unit_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_meshtrade_fee_instrument_fee_v1_data_per_unit_proto_rawDesc), len(file_meshtrade_fee_instrument_fee_v1_data_per_unit_proto_rawDesc)))
	})
	return file_meshtrade_fee_instrument_fee_v1_data_per_unit_proto_rawDescData
}

var file_meshtrade_fee_instrument_fee_v1_data_per_unit_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_meshtrade_fee_instrument_fee_v1_data_per_unit_proto_goTypes = []any{
	(*PerUnitData)(nil), // 0: meshtrade.fee.instrument_fee.v1.PerUnitData
	(*v1.Decimal)(nil),  // 1: meshtrade.type.v1.Decimal
	(*v1.Amount)(nil),   // 2: meshtrade.type.v1.Amount
}
var file_meshtrade_fee_instrument_fee_v1_data_per_unit_proto_depIdxs = []int32{
	1, // 0: meshtrade.fee.instrument_fee.v1.PerUnitData.no_units:type_name -> meshtrade.type.v1.Decimal
	2, // 1: meshtrade.fee.instrument_fee.v1.PerUnitData.per_unit_amount:type_name -> meshtrade.type.v1.Amount
	2, // 2: meshtrade.fee.instrument_fee.v1.PerUnitData.amount_excl_vat:type_name -> meshtrade.type.v1.Amount
	1, // 3: meshtrade.fee.instrument_fee.v1.PerUnitData.vat_rate:type_name -> meshtrade.type.v1.Decimal
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_meshtrade_fee_instrument_fee_v1_data_per_unit_proto_init() }
func file_meshtrade_fee_instrument_fee_v1_data_per_unit_proto_init() {
	if File_meshtrade_fee_instrument_fee_v1_data_per_unit_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_meshtrade_fee_instrument_fee_v1_data_per_unit_proto_rawDesc), len(file_meshtrade_fee_instrument_fee_v1_data_per_unit_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_meshtrade_fee_instrument_fee_v1_data_per_unit_proto_goTypes,
		DependencyIndexes: file_meshtrade_fee_instrument_fee_v1_data_per_unit_proto_depIdxs,
		MessageInfos:      file_meshtrade_fee_instrument_fee_v1_data_per_unit_proto_msgTypes,
	}.Build()
	File_meshtrade_fee_instrument_fee_v1_data_per_unit_proto = out.File
	file_meshtrade_fee_instrument_fee_v1_data_per_unit_proto_goTypes = nil
	file_meshtrade_fee_instrument_fee_v1_data_per_unit_proto_depIdxs = nil
}
