// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: meshtrade/fee/instrument_fee/v1/instrument_fee.proto

package instrument_feev1

import (
	v1 "github.com/meshtrade/api/go/type/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// State is the state of an instrument Fee in its state diagram.
type State int32

const (
	// Unknown or not specified.
	// This is a a default value to prevent accidental assignment and should not be used.
	State_STATE_UNSPECIFIED         State = 0
	State_STATE_UPCOMING            State = 1
	State_STATE_DUE                 State = 2
	State_STATE_PAYMENT_IN_PROGRESS State = 3
	State_STATE_FAILED              State = 4
	State_STATE_CANCELLED           State = 5
	State_STATE_PAID                State = 6
)

// Enum value maps for State.
var (
	State_name = map[int32]string{
		0: "STATE_UNSPECIFIED",
		1: "STATE_UPCOMING",
		2: "STATE_DUE",
		3: "STATE_PAYMENT_IN_PROGRESS",
		4: "STATE_FAILED",
		5: "STATE_CANCELLED",
		6: "STATE_PAID",
	}
	State_value = map[string]int32{
		"STATE_UNSPECIFIED":         0,
		"STATE_UPCOMING":            1,
		"STATE_DUE":                 2,
		"STATE_PAYMENT_IN_PROGRESS": 3,
		"STATE_FAILED":              4,
		"STATE_CANCELLED":           5,
		"STATE_PAID":                6,
	}
)

func (x State) Enum() *State {
	p := new(State)
	*p = x
	return p
}

func (x State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (State) Descriptor() protoreflect.EnumDescriptor {
	return file_meshtrade_fee_instrument_fee_v1_instrument_fee_proto_enumTypes[0].Descriptor()
}

func (State) Type() protoreflect.EnumType {
	return &file_meshtrade_fee_instrument_fee_v1_instrument_fee_proto_enumTypes[0]
}

func (x State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use State.Descriptor instead.
func (State) EnumDescriptor() ([]byte, []int) {
	return file_meshtrade_fee_instrument_fee_v1_instrument_fee_proto_rawDescGZIP(), []int{0}
}

// Category defines the different types of Fees that can be applied to an instrument.
type Category int32

const (
	// Unknown or not specified.
	// This is a a default value to prevent accidental assignment and should not be used.
	Category_CATEGORY_UNSPECIFIED               Category = 0
	Category_CATEGORY_TOKENISATION              Category = 1
	Category_CATEGORY_LISTING                   Category = 2
	Category_CATEGORY_PRIMARY_MARKET_SETTLEMENT Category = 3
	Category_CATEGORY_AUM                       Category = 4
)

// Enum value maps for Category.
var (
	Category_name = map[int32]string{
		0: "CATEGORY_UNSPECIFIED",
		1: "CATEGORY_TOKENISATION",
		2: "CATEGORY_LISTING",
		3: "CATEGORY_PRIMARY_MARKET_SETTLEMENT",
		4: "CATEGORY_AUM",
	}
	Category_value = map[string]int32{
		"CATEGORY_UNSPECIFIED":               0,
		"CATEGORY_TOKENISATION":              1,
		"CATEGORY_LISTING":                   2,
		"CATEGORY_PRIMARY_MARKET_SETTLEMENT": 3,
		"CATEGORY_AUM":                       4,
	}
)

func (x Category) Enum() *Category {
	p := new(Category)
	*p = x
	return p
}

func (x Category) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Category) Descriptor() protoreflect.EnumDescriptor {
	return file_meshtrade_fee_instrument_fee_v1_instrument_fee_proto_enumTypes[1].Descriptor()
}

func (Category) Type() protoreflect.EnumType {
	return &file_meshtrade_fee_instrument_fee_v1_instrument_fee_proto_enumTypes[1]
}

func (x Category) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Category.Descriptor instead.
func (Category) EnumDescriptor() ([]byte, []int) {
	return file_meshtrade_fee_instrument_fee_v1_instrument_fee_proto_rawDescGZIP(), []int{1}
}

// InstrumentFee represents a financial charge associated with an Instrument,
// imposed on the Instrument Issuer.
// A Fee is generated using a FeeProfile, which determines its amount
// and other related fields.
type InstrumentFee struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID is a universally unique identifier set in the application layer.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// InstrumentName refers to the instrument against which this Fee applied.
	InstrumentName string `protobuf:"bytes,2,opt,name=instrument_name,json=instrumentName,proto3" json:"instrument_name,omitempty"`
	// State is the fee status.
	State State `protobuf:"varint,3,opt,name=state,proto3,enum=meshtrade.fee.instrument_fee.v1.State" json:"state,omitempty"`
	// Description is the description of this Fee.
	// It explains the purpose and context behind the charge.
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// AmountInclVAT is the total amount charged, inclusive of VAT.
	// This field captures the gross charge that the instrument issuer must pay.
	AmountInclVat *v1.Amount `protobuf:"bytes,5,opt,name=amount_incl_vat,json=amountInclVat,proto3" json:"amount_incl_vat,omitempty"`
	// VATAmount is the portion of the AmountInclVAT that constitutes VAT.
	VatAmount *v1.Amount `protobuf:"bytes,6,opt,name=vat_amount,json=vatAmount,proto3" json:"vat_amount,omitempty"`
	// Category is the type of Fee being applied. It categorises fees based on
	// their purpose and the services they correspond to. Supported categories
	// include:
	// - Tokenisation: Fee for tokenizing assets.
	// - Listing: Fee for listing the instrument on a platform.
	// - PrimaryMarketSettlement: Fee related to primary market transaction
	// settlements.
	// - AUM: Assets Under Management fee.
	Category Category `protobuf:"varint,7,opt,name=category,proto3,enum=meshtrade.fee.instrument_fee.v1.Category" json:"category,omitempty"`
	// PaymentDate is the date on which the Fee was paid.
	PaymentDate *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=payment_date,json=paymentDate,proto3" json:"payment_date,omitempty"`
	// Data is the additional contextual information related to calculation,
	// taxation and billing of the Fee.
	//
	// Types that are valid to be assigned to Data:
	//
	//	*InstrumentFee_AmountData
	//	*InstrumentFee_RateData
	//	*InstrumentFee_PerUnitData
	Data          isInstrumentFee_Data `protobuf_oneof:"data"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InstrumentFee) Reset() {
	*x = InstrumentFee{}
	mi := &file_meshtrade_fee_instrument_fee_v1_instrument_fee_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InstrumentFee) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstrumentFee) ProtoMessage() {}

func (x *InstrumentFee) ProtoReflect() protoreflect.Message {
	mi := &file_meshtrade_fee_instrument_fee_v1_instrument_fee_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstrumentFee.ProtoReflect.Descriptor instead.
func (*InstrumentFee) Descriptor() ([]byte, []int) {
	return file_meshtrade_fee_instrument_fee_v1_instrument_fee_proto_rawDescGZIP(), []int{0}
}

func (x *InstrumentFee) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *InstrumentFee) GetInstrumentName() string {
	if x != nil {
		return x.InstrumentName
	}
	return ""
}

func (x *InstrumentFee) GetState() State {
	if x != nil {
		return x.State
	}
	return State_STATE_UNSPECIFIED
}

func (x *InstrumentFee) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *InstrumentFee) GetAmountInclVat() *v1.Amount {
	if x != nil {
		return x.AmountInclVat
	}
	return nil
}

func (x *InstrumentFee) GetVatAmount() *v1.Amount {
	if x != nil {
		return x.VatAmount
	}
	return nil
}

func (x *InstrumentFee) GetCategory() Category {
	if x != nil {
		return x.Category
	}
	return Category_CATEGORY_UNSPECIFIED
}

func (x *InstrumentFee) GetPaymentDate() *timestamppb.Timestamp {
	if x != nil {
		return x.PaymentDate
	}
	return nil
}

func (x *InstrumentFee) GetData() isInstrumentFee_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *InstrumentFee) GetAmountData() *AmountData {
	if x != nil {
		if x, ok := x.Data.(*InstrumentFee_AmountData); ok {
			return x.AmountData
		}
	}
	return nil
}

func (x *InstrumentFee) GetRateData() *RateData {
	if x != nil {
		if x, ok := x.Data.(*InstrumentFee_RateData); ok {
			return x.RateData
		}
	}
	return nil
}

func (x *InstrumentFee) GetPerUnitData() *PerUnitData {
	if x != nil {
		if x, ok := x.Data.(*InstrumentFee_PerUnitData); ok {
			return x.PerUnitData
		}
	}
	return nil
}

type isInstrumentFee_Data interface {
	isInstrumentFee_Data()
}

type InstrumentFee_AmountData struct {
	AmountData *AmountData `protobuf:"bytes,9,opt,name=amount_data,json=amountData,proto3,oneof"`
}

type InstrumentFee_RateData struct {
	RateData *RateData `protobuf:"bytes,10,opt,name=rate_data,json=rateData,proto3,oneof"`
}

type InstrumentFee_PerUnitData struct {
	PerUnitData *PerUnitData `protobuf:"bytes,11,opt,name=per_unit_data,json=perUnitData,proto3,oneof"`
}

func (*InstrumentFee_AmountData) isInstrumentFee_Data() {}

func (*InstrumentFee_RateData) isInstrumentFee_Data() {}

func (*InstrumentFee_PerUnitData) isInstrumentFee_Data() {}

var File_meshtrade_fee_instrument_fee_v1_instrument_fee_proto protoreflect.FileDescriptor

const file_meshtrade_fee_instrument_fee_v1_instrument_fee_proto_rawDesc = "" +
	"\n" +
	"4meshtrade/fee/instrument_fee/v1/instrument_fee.proto\x12\x1fmeshtrade.fee.instrument_fee.v1\x1a\x1fgoogle/protobuf/timestamp.proto\x1a1meshtrade/fee/instrument_fee/v1/data_amount.proto\x1a3meshtrade/fee/instrument_fee/v1/data_per_unit.proto\x1a/meshtrade/fee/instrument_fee/v1/data_rate.proto\x1a\x1emeshtrade/type/v1/amount.proto\"\xa1\x05\n" +
	"\rInstrumentFee\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12'\n" +
	"\x0finstrument_name\x18\x02 \x01(\tR\x0einstrumentName\x12<\n" +
	"\x05state\x18\x03 \x01(\x0e2&.meshtrade.fee.instrument_fee.v1.StateR\x05state\x12 \n" +
	"\vdescription\x18\x04 \x01(\tR\vdescription\x12A\n" +
	"\x0famount_incl_vat\x18\x05 \x01(\v2\x19.meshtrade.type.v1.AmountR\ramountInclVat\x128\n" +
	"\n" +
	"vat_amount\x18\x06 \x01(\v2\x19.meshtrade.type.v1.AmountR\tvatAmount\x12E\n" +
	"\bcategory\x18\a \x01(\x0e2).meshtrade.fee.instrument_fee.v1.CategoryR\bcategory\x12=\n" +
	"\fpayment_date\x18\b \x01(\v2\x1a.google.protobuf.TimestampR\vpaymentDate\x12N\n" +
	"\vamount_data\x18\t \x01(\v2+.meshtrade.fee.instrument_fee.v1.AmountDataH\x00R\n" +
	"amountData\x12H\n" +
	"\trate_data\x18\n" +
	" \x01(\v2).meshtrade.fee.instrument_fee.v1.RateDataH\x00R\brateData\x12R\n" +
	"\rper_unit_data\x18\v \x01(\v2,.meshtrade.fee.instrument_fee.v1.PerUnitDataH\x00R\vperUnitDataB\x06\n" +
	"\x04data*\x97\x01\n" +
	"\x05State\x12\x15\n" +
	"\x11STATE_UNSPECIFIED\x10\x00\x12\x12\n" +
	"\x0eSTATE_UPCOMING\x10\x01\x12\r\n" +
	"\tSTATE_DUE\x10\x02\x12\x1d\n" +
	"\x19STATE_PAYMENT_IN_PROGRESS\x10\x03\x12\x10\n" +
	"\fSTATE_FAILED\x10\x04\x12\x13\n" +
	"\x0fSTATE_CANCELLED\x10\x05\x12\x0e\n" +
	"\n" +
	"STATE_PAID\x10\x06*\x8f\x01\n" +
	"\bCategory\x12\x18\n" +
	"\x14CATEGORY_UNSPECIFIED\x10\x00\x12\x19\n" +
	"\x15CATEGORY_TOKENISATION\x10\x01\x12\x14\n" +
	"\x10CATEGORY_LISTING\x10\x02\x12&\n" +
	"\"CATEGORY_PRIMARY_MARKET_SETTLEMENT\x10\x03\x12\x10\n" +
	"\fCATEGORY_AUM\x10\x04BDZBgithub.com/meshtrade/api/go/fee/instrument_fee/v1;instrument_feev1b\x06proto3"

var (
	file_meshtrade_fee_instrument_fee_v1_instrument_fee_proto_rawDescOnce sync.Once
	file_meshtrade_fee_instrument_fee_v1_instrument_fee_proto_rawDescData []byte
)

func file_meshtrade_fee_instrument_fee_v1_instrument_fee_proto_rawDescGZIP() []byte {
	file_meshtrade_fee_instrument_fee_v1_instrument_fee_proto_rawDescOnce.Do(func() {
		file_meshtrade_fee_instrument_fee_v1_instrument_fee_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_meshtrade_fee_instrument_fee_v1_instrument_fee_proto_rawDesc), len(file_meshtrade_fee_instrument_fee_v1_instrument_fee_proto_rawDesc)))
	})
	return file_meshtrade_fee_instrument_fee_v1_instrument_fee_proto_rawDescData
}

var file_meshtrade_fee_instrument_fee_v1_instrument_fee_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_meshtrade_fee_instrument_fee_v1_instrument_fee_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_meshtrade_fee_instrument_fee_v1_instrument_fee_proto_goTypes = []any{
	(State)(0),                    // 0: meshtrade.fee.instrument_fee.v1.State
	(Category)(0),                 // 1: meshtrade.fee.instrument_fee.v1.Category
	(*InstrumentFee)(nil),         // 2: meshtrade.fee.instrument_fee.v1.InstrumentFee
	(*v1.Amount)(nil),             // 3: meshtrade.type.v1.Amount
	(*timestamppb.Timestamp)(nil), // 4: google.protobuf.Timestamp
	(*AmountData)(nil),            // 5: meshtrade.fee.instrument_fee.v1.AmountData
	(*RateData)(nil),              // 6: meshtrade.fee.instrument_fee.v1.RateData
	(*PerUnitData)(nil),           // 7: meshtrade.fee.instrument_fee.v1.PerUnitData
}
var file_meshtrade_fee_instrument_fee_v1_instrument_fee_proto_depIdxs = []int32{
	0, // 0: meshtrade.fee.instrument_fee.v1.InstrumentFee.state:type_name -> meshtrade.fee.instrument_fee.v1.State
	3, // 1: meshtrade.fee.instrument_fee.v1.InstrumentFee.amount_incl_vat:type_name -> meshtrade.type.v1.Amount
	3, // 2: meshtrade.fee.instrument_fee.v1.InstrumentFee.vat_amount:type_name -> meshtrade.type.v1.Amount
	1, // 3: meshtrade.fee.instrument_fee.v1.InstrumentFee.category:type_name -> meshtrade.fee.instrument_fee.v1.Category
	4, // 4: meshtrade.fee.instrument_fee.v1.InstrumentFee.payment_date:type_name -> google.protobuf.Timestamp
	5, // 5: meshtrade.fee.instrument_fee.v1.InstrumentFee.amount_data:type_name -> meshtrade.fee.instrument_fee.v1.AmountData
	6, // 6: meshtrade.fee.instrument_fee.v1.InstrumentFee.rate_data:type_name -> meshtrade.fee.instrument_fee.v1.RateData
	7, // 7: meshtrade.fee.instrument_fee.v1.InstrumentFee.per_unit_data:type_name -> meshtrade.fee.instrument_fee.v1.PerUnitData
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_meshtrade_fee_instrument_fee_v1_instrument_fee_proto_init() }
func file_meshtrade_fee_instrument_fee_v1_instrument_fee_proto_init() {
	if File_meshtrade_fee_instrument_fee_v1_instrument_fee_proto != nil {
		return
	}
	file_meshtrade_fee_instrument_fee_v1_data_amount_proto_init()
	file_meshtrade_fee_instrument_fee_v1_data_per_unit_proto_init()
	file_meshtrade_fee_instrument_fee_v1_data_rate_proto_init()
	file_meshtrade_fee_instrument_fee_v1_instrument_fee_proto_msgTypes[0].OneofWrappers = []any{
		(*InstrumentFee_AmountData)(nil),
		(*InstrumentFee_RateData)(nil),
		(*InstrumentFee_PerUnitData)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_meshtrade_fee_instrument_fee_v1_instrument_fee_proto_rawDesc), len(file_meshtrade_fee_instrument_fee_v1_instrument_fee_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_meshtrade_fee_instrument_fee_v1_instrument_fee_proto_goTypes,
		DependencyIndexes: file_meshtrade_fee_instrument_fee_v1_instrument_fee_proto_depIdxs,
		EnumInfos:         file_meshtrade_fee_instrument_fee_v1_instrument_fee_proto_enumTypes,
		MessageInfos:      file_meshtrade_fee_instrument_fee_v1_instrument_fee_proto_msgTypes,
	}.Build()
	File_meshtrade_fee_instrument_fee_v1_instrument_fee_proto = out.File
	file_meshtrade_fee_instrument_fee_v1_instrument_fee_proto_goTypes = nil
	file_meshtrade_fee_instrument_fee_v1_instrument_fee_proto_depIdxs = nil
}
