// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: meshtrade/fee/instrument_fee_profile/v1/tokenisation.proto

package instrument_fee_profilev1

import (
	v1 "github.com/meshtrade/api/go/type/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Tokenisation configures the fees related to the tokenisation
// processes of the Instrument.
type Tokenisation struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// FirstTimeMintingAmount is the fee amount charged when
	// minting tokens of the Instrument for the first time.
	FirstTimeMintingAmount *v1.Amount `protobuf:"bytes,1,opt,name=first_time_minting_amount,json=firstTimeMintingAmount,proto3" json:"first_time_minting_amount,omitempty"`
	// MintingAmount is minting fee charged per token minted.
	MintingAmount *v1.Amount `protobuf:"bytes,2,opt,name=minting_amount,json=mintingAmount,proto3" json:"minting_amount,omitempty"`
	// BurningAmount is minting fee charged per token burned.
	BurningAmount *v1.Amount `protobuf:"bytes,3,opt,name=burning_amount,json=burningAmount,proto3" json:"burning_amount,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Tokenisation) Reset() {
	*x = Tokenisation{}
	mi := &file_meshtrade_fee_instrument_fee_profile_v1_tokenisation_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Tokenisation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tokenisation) ProtoMessage() {}

func (x *Tokenisation) ProtoReflect() protoreflect.Message {
	mi := &file_meshtrade_fee_instrument_fee_profile_v1_tokenisation_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tokenisation.ProtoReflect.Descriptor instead.
func (*Tokenisation) Descriptor() ([]byte, []int) {
	return file_meshtrade_fee_instrument_fee_profile_v1_tokenisation_proto_rawDescGZIP(), []int{0}
}

func (x *Tokenisation) GetFirstTimeMintingAmount() *v1.Amount {
	if x != nil {
		return x.FirstTimeMintingAmount
	}
	return nil
}

func (x *Tokenisation) GetMintingAmount() *v1.Amount {
	if x != nil {
		return x.MintingAmount
	}
	return nil
}

func (x *Tokenisation) GetBurningAmount() *v1.Amount {
	if x != nil {
		return x.BurningAmount
	}
	return nil
}

var File_meshtrade_fee_instrument_fee_profile_v1_tokenisation_proto protoreflect.FileDescriptor

const file_meshtrade_fee_instrument_fee_profile_v1_tokenisation_proto_rawDesc = "" +
	"\n" +
	":meshtrade/fee/instrument_fee_profile/v1/tokenisation.proto\x12'meshtrade.fee.instrument_fee_profile.v1\x1a\x1emeshtrade/type/v1/amount.proto\"\xe8\x01\n" +
	"\fTokenisation\x12T\n" +
	"\x19first_time_minting_amount\x18\x01 \x01(\v2\x19.meshtrade.type.v1.AmountR\x16firstTimeMintingAmount\x12@\n" +
	"\x0eminting_amount\x18\x02 \x01(\v2\x19.meshtrade.type.v1.AmountR\rmintingAmount\x12@\n" +
	"\x0eburning_amount\x18\x03 \x01(\v2\x19.meshtrade.type.v1.AmountR\rburningAmountBTZRgithub.com/meshtrade/api/go/fee/instrument_fee_profile/v1;instrument_fee_profilev1b\x06proto3"

var (
	file_meshtrade_fee_instrument_fee_profile_v1_tokenisation_proto_rawDescOnce sync.Once
	file_meshtrade_fee_instrument_fee_profile_v1_tokenisation_proto_rawDescData []byte
)

func file_meshtrade_fee_instrument_fee_profile_v1_tokenisation_proto_rawDescGZIP() []byte {
	file_meshtrade_fee_instrument_fee_profile_v1_tokenisation_proto_rawDescOnce.Do(func() {
		file_meshtrade_fee_instrument_fee_profile_v1_tokenisation_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_meshtrade_fee_instrument_fee_profile_v1_tokenisation_proto_rawDesc), len(file_meshtrade_fee_instrument_fee_profile_v1_tokenisation_proto_rawDesc)))
	})
	return file_meshtrade_fee_instrument_fee_profile_v1_tokenisation_proto_rawDescData
}

var file_meshtrade_fee_instrument_fee_profile_v1_tokenisation_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_meshtrade_fee_instrument_fee_profile_v1_tokenisation_proto_goTypes = []any{
	(*Tokenisation)(nil), // 0: meshtrade.fee.instrument_fee_profile.v1.Tokenisation
	(*v1.Amount)(nil),    // 1: meshtrade.type.v1.Amount
}
var file_meshtrade_fee_instrument_fee_profile_v1_tokenisation_proto_depIdxs = []int32{
	1, // 0: meshtrade.fee.instrument_fee_profile.v1.Tokenisation.first_time_minting_amount:type_name -> meshtrade.type.v1.Amount
	1, // 1: meshtrade.fee.instrument_fee_profile.v1.Tokenisation.minting_amount:type_name -> meshtrade.type.v1.Amount
	1, // 2: meshtrade.fee.instrument_fee_profile.v1.Tokenisation.burning_amount:type_name -> meshtrade.type.v1.Amount
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_meshtrade_fee_instrument_fee_profile_v1_tokenisation_proto_init() }
func file_meshtrade_fee_instrument_fee_profile_v1_tokenisation_proto_init() {
	if File_meshtrade_fee_instrument_fee_profile_v1_tokenisation_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_meshtrade_fee_instrument_fee_profile_v1_tokenisation_proto_rawDesc), len(file_meshtrade_fee_instrument_fee_profile_v1_tokenisation_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_meshtrade_fee_instrument_fee_profile_v1_tokenisation_proto_goTypes,
		DependencyIndexes: file_meshtrade_fee_instrument_fee_profile_v1_tokenisation_proto_depIdxs,
		MessageInfos:      file_meshtrade_fee_instrument_fee_profile_v1_tokenisation_proto_msgTypes,
	}.Build()
	File_meshtrade_fee_instrument_fee_profile_v1_tokenisation_proto = out.File
	file_meshtrade_fee_instrument_fee_profile_v1_tokenisation_proto_goTypes = nil
	file_meshtrade_fee_instrument_fee_profile_v1_tokenisation_proto_depIdxs = nil
}
