// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v5.28.0
// source: search/criterion.proto

package search

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Criterion is a placeholder for generic search criterion
type Criterion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Criterion:
	//
	//	*Criterion_BoolExactCriterion
	//	*Criterion_TextExactCriterion
	//	*Criterion_TextNEExactCriterion
	//	*Criterion_TextSubstringCriterion
	//	*Criterion_TextListCriterion
	//	*Criterion_TextNINListCriterion
	//	*Criterion_Uint32ExactCriterion
	//	*Criterion_Uint32NEExactCriterion
	//	*Criterion_Uint32ListCriterion
	//	*Criterion_DateRangeCriterion
	//	*Criterion_OrCriterion
	Criterion isCriterion_Criterion `protobuf_oneof:"criterion"`
}

func (x *Criterion) Reset() {
	*x = Criterion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_search_criterion_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Criterion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Criterion) ProtoMessage() {}

func (x *Criterion) ProtoReflect() protoreflect.Message {
	mi := &file_search_criterion_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Criterion.ProtoReflect.Descriptor instead.
func (*Criterion) Descriptor() ([]byte, []int) {
	return file_search_criterion_proto_rawDescGZIP(), []int{0}
}

func (m *Criterion) GetCriterion() isCriterion_Criterion {
	if m != nil {
		return m.Criterion
	}
	return nil
}

func (x *Criterion) GetBoolExactCriterion() *BoolExactCriterion {
	if x, ok := x.GetCriterion().(*Criterion_BoolExactCriterion); ok {
		return x.BoolExactCriterion
	}
	return nil
}

func (x *Criterion) GetTextExactCriterion() *TextExactCriterion {
	if x, ok := x.GetCriterion().(*Criterion_TextExactCriterion); ok {
		return x.TextExactCriterion
	}
	return nil
}

func (x *Criterion) GetTextNEExactCriterion() *TextNEExactCriterion {
	if x, ok := x.GetCriterion().(*Criterion_TextNEExactCriterion); ok {
		return x.TextNEExactCriterion
	}
	return nil
}

func (x *Criterion) GetTextSubstringCriterion() *TextSubstringCriterion {
	if x, ok := x.GetCriterion().(*Criterion_TextSubstringCriterion); ok {
		return x.TextSubstringCriterion
	}
	return nil
}

func (x *Criterion) GetTextListCriterion() *TextListCriterion {
	if x, ok := x.GetCriterion().(*Criterion_TextListCriterion); ok {
		return x.TextListCriterion
	}
	return nil
}

func (x *Criterion) GetTextNINListCriterion() *TextNINListCriterion {
	if x, ok := x.GetCriterion().(*Criterion_TextNINListCriterion); ok {
		return x.TextNINListCriterion
	}
	return nil
}

func (x *Criterion) GetUint32ExactCriterion() *Uint32ExactCriterion {
	if x, ok := x.GetCriterion().(*Criterion_Uint32ExactCriterion); ok {
		return x.Uint32ExactCriterion
	}
	return nil
}

func (x *Criterion) GetUint32NEExactCriterion() *Uint32NEExactCriterion {
	if x, ok := x.GetCriterion().(*Criterion_Uint32NEExactCriterion); ok {
		return x.Uint32NEExactCriterion
	}
	return nil
}

func (x *Criterion) GetUint32ListCriterion() *Uint32ListCriterion {
	if x, ok := x.GetCriterion().(*Criterion_Uint32ListCriterion); ok {
		return x.Uint32ListCriterion
	}
	return nil
}

func (x *Criterion) GetDateRangeCriterion() *DateRangeCriterion {
	if x, ok := x.GetCriterion().(*Criterion_DateRangeCriterion); ok {
		return x.DateRangeCriterion
	}
	return nil
}

func (x *Criterion) GetOrCriterion() *ORCriterion {
	if x, ok := x.GetCriterion().(*Criterion_OrCriterion); ok {
		return x.OrCriterion
	}
	return nil
}

type isCriterion_Criterion interface {
	isCriterion_Criterion()
}

type Criterion_BoolExactCriterion struct {
	BoolExactCriterion *BoolExactCriterion `protobuf:"bytes,1,opt,name=boolExactCriterion,proto3,oneof"`
}

type Criterion_TextExactCriterion struct {
	TextExactCriterion *TextExactCriterion `protobuf:"bytes,2,opt,name=textExactCriterion,proto3,oneof"`
}

type Criterion_TextNEExactCriterion struct {
	TextNEExactCriterion *TextNEExactCriterion `protobuf:"bytes,3,opt,name=textNEExactCriterion,proto3,oneof"`
}

type Criterion_TextSubstringCriterion struct {
	TextSubstringCriterion *TextSubstringCriterion `protobuf:"bytes,4,opt,name=textSubstringCriterion,proto3,oneof"`
}

type Criterion_TextListCriterion struct {
	TextListCriterion *TextListCriterion `protobuf:"bytes,5,opt,name=textListCriterion,proto3,oneof"`
}

type Criterion_TextNINListCriterion struct {
	TextNINListCriterion *TextNINListCriterion `protobuf:"bytes,6,opt,name=textNINListCriterion,proto3,oneof"`
}

type Criterion_Uint32ExactCriterion struct {
	Uint32ExactCriterion *Uint32ExactCriterion `protobuf:"bytes,7,opt,name=uint32ExactCriterion,proto3,oneof"`
}

type Criterion_Uint32NEExactCriterion struct {
	Uint32NEExactCriterion *Uint32NEExactCriterion `protobuf:"bytes,8,opt,name=uint32NEExactCriterion,proto3,oneof"`
}

type Criterion_Uint32ListCriterion struct {
	Uint32ListCriterion *Uint32ListCriterion `protobuf:"bytes,9,opt,name=uint32ListCriterion,proto3,oneof"`
}

type Criterion_DateRangeCriterion struct {
	DateRangeCriterion *DateRangeCriterion `protobuf:"bytes,10,opt,name=dateRangeCriterion,proto3,oneof"`
}

type Criterion_OrCriterion struct {
	OrCriterion *ORCriterion `protobuf:"bytes,11,opt,name=orCriterion,proto3,oneof"`
}

func (*Criterion_BoolExactCriterion) isCriterion_Criterion() {}

func (*Criterion_TextExactCriterion) isCriterion_Criterion() {}

func (*Criterion_TextNEExactCriterion) isCriterion_Criterion() {}

func (*Criterion_TextSubstringCriterion) isCriterion_Criterion() {}

func (*Criterion_TextListCriterion) isCriterion_Criterion() {}

func (*Criterion_TextNINListCriterion) isCriterion_Criterion() {}

func (*Criterion_Uint32ExactCriterion) isCriterion_Criterion() {}

func (*Criterion_Uint32NEExactCriterion) isCriterion_Criterion() {}

func (*Criterion_Uint32ListCriterion) isCriterion_Criterion() {}

func (*Criterion_DateRangeCriterion) isCriterion_Criterion() {}

func (*Criterion_OrCriterion) isCriterion_Criterion() {}

// ORCriterion allows the construction of an OR list of criterion.
type ORCriterion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// criteria is a list of search.Criterion that are used to construct an OR
	// list
	Criteria []*Criterion `protobuf:"bytes,1,rep,name=criteria,proto3" json:"criteria,omitempty"`
}

func (x *ORCriterion) Reset() {
	*x = ORCriterion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_search_criterion_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ORCriterion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ORCriterion) ProtoMessage() {}

func (x *ORCriterion) ProtoReflect() protoreflect.Message {
	mi := &file_search_criterion_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ORCriterion.ProtoReflect.Descriptor instead.
func (*ORCriterion) Descriptor() ([]byte, []int) {
	return file_search_criterion_proto_rawDescGZIP(), []int{1}
}

func (x *ORCriterion) GetCriteria() []*Criterion {
	if x != nil {
		return x.Criteria
	}
	return nil
}

var File_search_criterion_proto protoreflect.FileDescriptor

var file_search_criterion_proto_rawDesc = []byte{
	0x0a, 0x16, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2f, 0x63, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x1a, 0x1f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2f, 0x62, 0x6f, 0x6f, 0x6c, 0x45, 0x78, 0x61,
	0x63, 0x74, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2f, 0x74, 0x65, 0x78, 0x74, 0x45, 0x78,
	0x61, 0x63, 0x74, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x21, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2f, 0x74, 0x65, 0x78, 0x74, 0x4e,
	0x45, 0x45, 0x78, 0x61, 0x63, 0x74, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2f, 0x74, 0x65,
	0x78, 0x74, 0x53, 0x75, 0x62, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x72, 0x69, 0x74, 0x65,
	0x72, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x2f, 0x74, 0x65, 0x78, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x72, 0x69, 0x74, 0x65,
	0x72, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x2f, 0x74, 0x65, 0x78, 0x74, 0x4e, 0x49, 0x4e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x72,
	0x69, 0x74, 0x65, 0x72, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x2f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x78, 0x61, 0x63,
	0x74, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x23, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x4e,
	0x45, 0x45, 0x78, 0x61, 0x63, 0x74, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2f, 0x75, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2f,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x87, 0x07, 0x0a, 0x09, 0x43, 0x72, 0x69,
	0x74, 0x65, 0x72, 0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x12, 0x62, 0x6f, 0x6f, 0x6c, 0x45, 0x78,
	0x61, 0x63, 0x74, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x45, 0x78, 0x61, 0x63, 0x74, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x6f, 0x6e, 0x48, 0x00,
	0x52, 0x12, 0x62, 0x6f, 0x6f, 0x6c, 0x45, 0x78, 0x61, 0x63, 0x74, 0x43, 0x72, 0x69, 0x74, 0x65,
	0x72, 0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x12, 0x74, 0x65, 0x78, 0x74, 0x45, 0x78, 0x61, 0x63,
	0x74, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x45, 0x78,
	0x61, 0x63, 0x74, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x12,
	0x74, 0x65, 0x78, 0x74, 0x45, 0x78, 0x61, 0x63, 0x74, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69,
	0x6f, 0x6e, 0x12, 0x52, 0x0a, 0x14, 0x74, 0x65, 0x78, 0x74, 0x4e, 0x45, 0x45, 0x78, 0x61, 0x63,
	0x74, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x4e, 0x45,
	0x45, 0x78, 0x61, 0x63, 0x74, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x6f, 0x6e, 0x48, 0x00,
	0x52, 0x14, 0x74, 0x65, 0x78, 0x74, 0x4e, 0x45, 0x45, 0x78, 0x61, 0x63, 0x74, 0x43, 0x72, 0x69,
	0x74, 0x65, 0x72, 0x69, 0x6f, 0x6e, 0x12, 0x58, 0x0a, 0x16, 0x74, 0x65, 0x78, 0x74, 0x53, 0x75,
	0x62, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e,
	0x54, 0x65, 0x78, 0x74, 0x53, 0x75, 0x62, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x72, 0x69,
	0x74, 0x65, 0x72, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x16, 0x74, 0x65, 0x78, 0x74, 0x53, 0x75,
	0x62, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x6f, 0x6e,
	0x12, 0x49, 0x0a, 0x11, 0x74, 0x65, 0x78, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x72, 0x69, 0x74,
	0x65, 0x72, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x72, 0x69,
	0x74, 0x65, 0x72, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x11, 0x74, 0x65, 0x78, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x6f, 0x6e, 0x12, 0x52, 0x0a, 0x14, 0x74,
	0x65, 0x78, 0x74, 0x4e, 0x49, 0x4e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72,
	0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x4e, 0x49, 0x4e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x72,
	0x69, 0x74, 0x65, 0x72, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x14, 0x74, 0x65, 0x78, 0x74, 0x4e,
	0x49, 0x4e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x6f, 0x6e, 0x12,
	0x52, 0x0a, 0x14, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x78, 0x61, 0x63, 0x74, 0x43, 0x72,
	0x69, 0x74, 0x65, 0x72, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x78, 0x61,
	0x63, 0x74, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x14, 0x75,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x78, 0x61, 0x63, 0x74, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72,
	0x69, 0x6f, 0x6e, 0x12, 0x58, 0x0a, 0x16, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x4e, 0x45, 0x45,
	0x78, 0x61, 0x63, 0x74, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x4e, 0x45, 0x45, 0x78, 0x61, 0x63, 0x74, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x16, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x4e, 0x45, 0x45,
	0x78, 0x61, 0x63, 0x74, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x6f, 0x6e, 0x12, 0x4f, 0x0a,
	0x13, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x72, 0x69, 0x74, 0x65,
	0x72, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x72,
	0x69, 0x74, 0x65, 0x72, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x13, 0x75, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x6f, 0x6e, 0x12, 0x4c,
	0x0a, 0x12, 0x64, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x72, 0x69, 0x74, 0x65,
	0x72, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x72, 0x69,
	0x74, 0x65, 0x72, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x12, 0x64, 0x61, 0x74, 0x65, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x0b,
	0x6f, 0x72, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x4f, 0x52, 0x43, 0x72, 0x69,
	0x74, 0x65, 0x72, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0b, 0x6f, 0x72, 0x43, 0x72, 0x69, 0x74,
	0x65, 0x72, 0x69, 0x6f, 0x6e, 0x42, 0x0b, 0x0a, 0x09, 0x63, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69,
	0x6f, 0x6e, 0x22, 0x3c, 0x0a, 0x0b, 0x4f, 0x52, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x6f,
	0x6e, 0x12, 0x2d, 0x0a, 0x08, 0x63, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x43, 0x72, 0x69,
	0x74, 0x65, 0x72, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x63, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61,
	0x42, 0x24, 0x5a, 0x22, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d,
	0x65, 0x73, 0x68, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x6f, 0x2f,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_search_criterion_proto_rawDescOnce sync.Once
	file_search_criterion_proto_rawDescData = file_search_criterion_proto_rawDesc
)

func file_search_criterion_proto_rawDescGZIP() []byte {
	file_search_criterion_proto_rawDescOnce.Do(func() {
		file_search_criterion_proto_rawDescData = protoimpl.X.CompressGZIP(file_search_criterion_proto_rawDescData)
	})
	return file_search_criterion_proto_rawDescData
}

var file_search_criterion_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_search_criterion_proto_goTypes = []interface{}{
	(*Criterion)(nil),              // 0: search.Criterion
	(*ORCriterion)(nil),            // 1: search.ORCriterion
	(*BoolExactCriterion)(nil),     // 2: search.BoolExactCriterion
	(*TextExactCriterion)(nil),     // 3: search.TextExactCriterion
	(*TextNEExactCriterion)(nil),   // 4: search.TextNEExactCriterion
	(*TextSubstringCriterion)(nil), // 5: search.TextSubstringCriterion
	(*TextListCriterion)(nil),      // 6: search.TextListCriterion
	(*TextNINListCriterion)(nil),   // 7: search.TextNINListCriterion
	(*Uint32ExactCriterion)(nil),   // 8: search.Uint32ExactCriterion
	(*Uint32NEExactCriterion)(nil), // 9: search.Uint32NEExactCriterion
	(*Uint32ListCriterion)(nil),    // 10: search.Uint32ListCriterion
	(*DateRangeCriterion)(nil),     // 11: search.DateRangeCriterion
}
var file_search_criterion_proto_depIdxs = []int32{
	2,  // 0: search.Criterion.boolExactCriterion:type_name -> search.BoolExactCriterion
	3,  // 1: search.Criterion.textExactCriterion:type_name -> search.TextExactCriterion
	4,  // 2: search.Criterion.textNEExactCriterion:type_name -> search.TextNEExactCriterion
	5,  // 3: search.Criterion.textSubstringCriterion:type_name -> search.TextSubstringCriterion
	6,  // 4: search.Criterion.textListCriterion:type_name -> search.TextListCriterion
	7,  // 5: search.Criterion.textNINListCriterion:type_name -> search.TextNINListCriterion
	8,  // 6: search.Criterion.uint32ExactCriterion:type_name -> search.Uint32ExactCriterion
	9,  // 7: search.Criterion.uint32NEExactCriterion:type_name -> search.Uint32NEExactCriterion
	10, // 8: search.Criterion.uint32ListCriterion:type_name -> search.Uint32ListCriterion
	11, // 9: search.Criterion.dateRangeCriterion:type_name -> search.DateRangeCriterion
	1,  // 10: search.Criterion.orCriterion:type_name -> search.ORCriterion
	0,  // 11: search.ORCriterion.criteria:type_name -> search.Criterion
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_search_criterion_proto_init() }
func file_search_criterion_proto_init() {
	if File_search_criterion_proto != nil {
		return
	}
	file_search_boolExactCriterion_proto_init()
	file_search_textExactCriterion_proto_init()
	file_search_textNEExactCriterion_proto_init()
	file_search_textSubstringCriterion_proto_init()
	file_search_textListCriterion_proto_init()
	file_search_textNINListCriterion_proto_init()
	file_search_uint32ExactCriterion_proto_init()
	file_search_uint32NEExactCriterion_proto_init()
	file_search_uint32ListCriterion_proto_init()
	file_search_dateRangeCriterion_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_search_criterion_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Criterion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_search_criterion_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ORCriterion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_search_criterion_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Criterion_BoolExactCriterion)(nil),
		(*Criterion_TextExactCriterion)(nil),
		(*Criterion_TextNEExactCriterion)(nil),
		(*Criterion_TextSubstringCriterion)(nil),
		(*Criterion_TextListCriterion)(nil),
		(*Criterion_TextNINListCriterion)(nil),
		(*Criterion_Uint32ExactCriterion)(nil),
		(*Criterion_Uint32NEExactCriterion)(nil),
		(*Criterion_Uint32ListCriterion)(nil),
		(*Criterion_DateRangeCriterion)(nil),
		(*Criterion_OrCriterion)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_search_criterion_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_search_criterion_proto_goTypes,
		DependencyIndexes: file_search_criterion_proto_depIdxs,
		MessageInfos:      file_search_criterion_proto_msgTypes,
	}.Build()
	File_search_criterion_proto = out.File
	file_search_criterion_proto_rawDesc = nil
	file_search_criterion_proto_goTypes = nil
	file_search_criterion_proto_depIdxs = nil
}
