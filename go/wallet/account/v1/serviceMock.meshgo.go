// Code generated by protoc-gen-meshgo. DO NOT EDIT.
// source: meshtrade/wallet/account/v1/service.proto
package accountv1

import (
	context "context"
	sync "sync"
	testing "testing"
)

// Ensure that MockAccountService implements the AccountService interface
var _ AccountService = &MockAccountService{}

// MockAccountService is a mock implementation of the AccountService interface.
type MockAccountService struct {
	mutex                 sync.Mutex
	T                     *testing.T
	CreateFunc            func(t *testing.T, m *MockAccountService, ctx context.Context, request *CreateAccountRequest) (*CreateAccountResponse, error)
	CreateFuncInvocations int
	GetFunc               func(t *testing.T, m *MockAccountService, ctx context.Context, request *GetAccountRequest) (*GetAccountResponse, error)
	GetFuncInvocations    int
	ListFunc              func(t *testing.T, m *MockAccountService, ctx context.Context, request *ListAccountsRequest) (*ListAccountsResponse, error)
	ListFuncInvocations   int
	SearchFunc            func(t *testing.T, m *MockAccountService, ctx context.Context, request *SearchAccountsRequest) (*SearchAccountsResponse, error)
	SearchFuncInvocations int
}

func (m *MockAccountService) Create(ctx context.Context, request *CreateAccountRequest) (*CreateAccountResponse, error) {
	m.mutex.Lock()
	m.CreateFuncInvocations++
	m.mutex.Unlock()
	if m.CreateFunc == nil {
		return nil, nil
	}
	return m.CreateFunc(m.T, m, ctx, request)
}

func (m *MockAccountService) Get(ctx context.Context, request *GetAccountRequest) (*GetAccountResponse, error) {
	m.mutex.Lock()
	m.GetFuncInvocations++
	m.mutex.Unlock()
	if m.GetFunc == nil {
		return nil, nil
	}
	return m.GetFunc(m.T, m, ctx, request)
}

func (m *MockAccountService) List(ctx context.Context, request *ListAccountsRequest) (*ListAccountsResponse, error) {
	m.mutex.Lock()
	m.ListFuncInvocations++
	m.mutex.Unlock()
	if m.ListFunc == nil {
		return nil, nil
	}
	return m.ListFunc(m.T, m, ctx, request)
}

func (m *MockAccountService) Search(ctx context.Context, request *SearchAccountsRequest) (*SearchAccountsResponse, error) {
	m.mutex.Lock()
	m.SearchFuncInvocations++
	m.mutex.Unlock()
	if m.SearchFunc == nil {
		return nil, nil
	}
	return m.SearchFunc(m.T, m, ctx, request)
}
