// Code generated by protoc-gen-meshgo. DO NOT EDIT.
// source: meshtrade/wallet/account/v1/service.proto
package accountv1

import (
	context "context"
	fmt "fmt"
	log "github.com/rs/zerolog/log"
	trace "go.opentelemetry.io/otel/trace"
	grpc "google.golang.org/grpc"
)

// Ensure that GRPCClientAccountService implements the AccountService interface
var _ AccountService = &GRPCClientAccountService{}

// GRPCClientAccountService is a gRPC client implementation of the AccountService interface.
type GRPCClientAccountService struct {
	tracer     trace.Tracer
	grpcClient AccountServiceClient
}

func NewGRPCClientAccountService(
	tracer trace.Tracer,
	grpcClientConnection *grpc.ClientConn,
) *GRPCClientAccountService {
	return &GRPCClientAccountService{
		tracer:     tracer,
		grpcClient: NewAccountServiceClient(grpcClientConnection),
	}
}

func (g *GRPCClientAccountService) Create(ctx context.Context, request *CreateAccountRequest) (*CreateAccountResponse, error) {
	ctx, span := g.tracer.Start(
		ctx,
		AccountServiceServiceProviderName+"Create",
	)
	defer span.End()

	// call given implementation of the adapted service provider interface
	createResponse, err := g.grpcClient.Create(ctx, request)
	if err != nil {
		log.Ctx(ctx).Error().Err(err).Msg("could not Create")
		return nil, fmt.Errorf("could not Create: %s", err)
	}

	return createResponse, nil
}

func (g *GRPCClientAccountService) Get(ctx context.Context, request *GetAccountRequest) (*GetAccountResponse, error) {
	ctx, span := g.tracer.Start(
		ctx,
		AccountServiceServiceProviderName+"Get",
	)
	defer span.End()

	// call given implementation of the adapted service provider interface
	getResponse, err := g.grpcClient.Get(ctx, request)
	if err != nil {
		log.Ctx(ctx).Error().Err(err).Msg("could not Get")
		return nil, fmt.Errorf("could not Get: %s", err)
	}

	return getResponse, nil
}

func (g *GRPCClientAccountService) List(ctx context.Context, request *ListAccountsRequest) (*ListAccountsResponse, error) {
	ctx, span := g.tracer.Start(
		ctx,
		AccountServiceServiceProviderName+"List",
	)
	defer span.End()

	// call given implementation of the adapted service provider interface
	listResponse, err := g.grpcClient.List(ctx, request)
	if err != nil {
		log.Ctx(ctx).Error().Err(err).Msg("could not List")
		return nil, fmt.Errorf("could not List: %s", err)
	}

	return listResponse, nil
}

func (g *GRPCClientAccountService) Search(ctx context.Context, request *SearchAccountsRequest) (*SearchAccountsResponse, error) {
	ctx, span := g.tracer.Start(
		ctx,
		AccountServiceServiceProviderName+"Search",
	)
	defer span.End()

	// call given implementation of the adapted service provider interface
	searchResponse, err := g.grpcClient.Search(ctx, request)
	if err != nil {
		log.Ctx(ctx).Error().Err(err).Msg("could not Search")
		return nil, fmt.Errorf("could not Search: %s", err)
	}

	return searchResponse, nil
}
