// Code generated by protoc-gen-meshgo. DO NOT EDIT.
// source: meshtrade/wallet/account/v1/service.proto
package accountv1

import (
	context "context"
	fmt "fmt"
	log "github.com/rs/zerolog/log"
	trace "go.opentelemetry.io/otel/trace"
	grpc "google.golang.org/grpc"
)

// Ensure that AccountServiceGRPCClient implements the AccountService interface
var _ AccountService = &AccountServiceGRPCClient{}

// AccountServiceGRPCClient is a gRPC client implementation of the AccountService interface.
type AccountServiceGRPCClient struct {
	tracer     trace.Tracer
	grpcClient AccountServiceClient
}

func NewAccountServiceGRPCClient(
	tracer trace.Tracer,
	grpcClientConnection *grpc.ClientConn,
) *AccountServiceGRPCClient {
	return &AccountServiceGRPCClient{
		tracer:     tracer,
		grpcClient: NewAccountServiceClient(grpcClientConnection),
	}
}

func (g *AccountServiceGRPCClient) CreateAccount(ctx context.Context, request *CreateAccountRequest) (*Account, error) {
	ctx, span := g.tracer.Start(
		ctx,
		AccountServiceServiceProviderName+"CreateAccount",
	)
	defer span.End()

	// call given implementation of the adapted service provider interface
	createAccountResponse, err := g.grpcClient.CreateAccount(ctx, request)
	if err != nil {
		log.Ctx(ctx).Error().Err(err).Msg("could not CreateAccount")
		return nil, fmt.Errorf("could not CreateAccount: %s", err)
	}

	return createAccountResponse, nil
}

func (g *AccountServiceGRPCClient) GetAccount(ctx context.Context, request *GetAccountRequest) (*Account, error) {
	ctx, span := g.tracer.Start(
		ctx,
		AccountServiceServiceProviderName+"GetAccount",
	)
	defer span.End()

	// call given implementation of the adapted service provider interface
	getAccountResponse, err := g.grpcClient.GetAccount(ctx, request)
	if err != nil {
		log.Ctx(ctx).Error().Err(err).Msg("could not GetAccount")
		return nil, fmt.Errorf("could not GetAccount: %s", err)
	}

	return getAccountResponse, nil
}

func (g *AccountServiceGRPCClient) ListAccounts(ctx context.Context, request *ListAccountsRequest) (*ListAccountsResponse, error) {
	ctx, span := g.tracer.Start(
		ctx,
		AccountServiceServiceProviderName+"ListAccounts",
	)
	defer span.End()

	// call given implementation of the adapted service provider interface
	listAccountsResponse, err := g.grpcClient.ListAccounts(ctx, request)
	if err != nil {
		log.Ctx(ctx).Error().Err(err).Msg("could not ListAccounts")
		return nil, fmt.Errorf("could not ListAccounts: %s", err)
	}

	return listAccountsResponse, nil
}

func (g *AccountServiceGRPCClient) SearchAccounts(ctx context.Context, request *SearchAccountsRequest) (*SearchAccountsResponse, error) {
	ctx, span := g.tracer.Start(
		ctx,
		AccountServiceServiceProviderName+"SearchAccounts",
	)
	defer span.End()

	// call given implementation of the adapted service provider interface
	searchAccountsResponse, err := g.grpcClient.SearchAccounts(ctx, request)
	if err != nil {
		log.Ctx(ctx).Error().Err(err).Msg("could not SearchAccounts")
		return nil, fmt.Errorf("could not SearchAccounts: %s", err)
	}

	return searchAccountsResponse, nil
}
