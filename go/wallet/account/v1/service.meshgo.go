// Code generated by protoc-gen-meshgo. DO NOT EDIT.
// source: meshtrade/wallet/account/v1/service.proto
package accountv1

import (
	context "context"
	grpc "github.com/meshtrade/api/go/grpc"
	config "github.com/meshtrade/api/go/grpc/config"
)

// AccountServiceClientInterface is a gRPC service for the AccountService service.
// It combines the service interface with resource management capabilities using
// the common BaseGRPCClient for consistent authentication, timeouts, and tracing.
//
// Example usage:
//
//	service, err := NewAccountService(
//		config.WithAPIKey("your-api-key"),
//		config.WithGroup("groups/your-group-id"),
//		config.WithTimeout(30 * time.Second),
//	)
//	if err != nil {
//		log.Fatal(err)
//	}
//	defer service.Close()
type AccountServiceClientInterface interface {
	AccountService
	grpc.GRPCClient
}

// accountService is the internal implementation of the AccountServiceClientInterface interface.
// It embeds BaseGRPCClient to provide all common gRPC functionality.
type accountService struct {
	*grpc.BaseGRPCClient[AccountServiceClient]
}

// ensure accountService implements the AccountServiceClientInterface interface
var _ AccountServiceClientInterface = &accountService{}

// NewAccountService creates a new gRPC service for the AccountService service.
// The service uses the common BaseGRPCClient for all functionality including
// connection management, authentication, timeouts, and distributed tracing.
//
// Parameters:
//   - opts: Functional options to configure the client
//
// Returns:
//   - AccountServiceClientInterface: Configured service instance
//   - error: Configuration or connection error
func NewAccountService(opts ...config.ServiceOption) (AccountServiceClientInterface, error) {
	base, err := grpc.NewBaseGRPCClient(
		AccountServiceServiceProviderName,
		NewAccountServiceClient,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return &accountService{BaseGRPCClient: base}, nil
}

// CreateAccount executes the CreateAccount RPC method with automatic
// timeout handling, distributed tracing, and authentication.
func (s *accountService) CreateAccount(ctx context.Context, request *CreateAccountRequest) (*Account, error) {
	return grpc.Execute(s.Executor(), ctx, "CreateAccount", func(ctx context.Context) (*Account, error) {
		return s.GrpcClient().CreateAccount(ctx, request)
	})
}

// GetAccount executes the GetAccount RPC method with automatic
// timeout handling, distributed tracing, and authentication.
func (s *accountService) GetAccount(ctx context.Context, request *GetAccountRequest) (*Account, error) {
	return grpc.Execute(s.Executor(), ctx, "GetAccount", func(ctx context.Context) (*Account, error) {
		return s.GrpcClient().GetAccount(ctx, request)
	})
}

// ListAccounts executes the ListAccounts RPC method with automatic
// timeout handling, distributed tracing, and authentication.
func (s *accountService) ListAccounts(ctx context.Context, request *ListAccountsRequest) (*ListAccountsResponse, error) {
	return grpc.Execute(s.Executor(), ctx, "ListAccounts", func(ctx context.Context) (*ListAccountsResponse, error) {
		return s.GrpcClient().ListAccounts(ctx, request)
	})
}

// SearchAccounts executes the SearchAccounts RPC method with automatic
// timeout handling, distributed tracing, and authentication.
func (s *accountService) SearchAccounts(ctx context.Context, request *SearchAccountsRequest) (*SearchAccountsResponse, error) {
	return grpc.Execute(s.Executor(), ctx, "SearchAccounts", func(ctx context.Context) (*SearchAccountsResponse, error) {
		return s.GrpcClient().SearchAccounts(ctx, request)
	})
}
