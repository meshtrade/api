// Code generated by protoc-gen-meshgo. DO NOT EDIT.
// source: meshtrade/wallet/account/v1/service.proto
package account_v1

import (
	context "context"
	grpc "github.com/meshtrade/api/go/grpc"
	config "github.com/meshtrade/api/go/grpc/config"
)

// AccountServiceClientInterface is a gRPC service for the AccountService service.
// It combines the service interface with resource management capabilities using
// the common BaseGRPCClient for consistent authentication, timeouts, and tracing.
//
// Full Service documentation: https://meshtrade.github.io/api/docs/api-reference/wallet/account/v1
//
// Basic service usage with default SDK Configuration:
//
//	service, err := NewAccountService()
//	if err != nil {
//		log.Fatal(err)
//	}
//	defer service.Close() // ensures proper cleanup of underlying connection
//
// With default configuration API credentials are searched for using the standard discovery hierarchy:
//
// 1. MESH_API_CREDENTIALS environment variable
//
// 2. Default credential file location:
//
//   - Linux:   $XDG_CONFIG_HOME/mesh/credentials.json or fallback to $HOME/.config/mesh/credentials.json
//   - macOS:   $HOME/Library/Application Support/mesh/credentials.json
//   - Windows: C:\Users\<user>\AppData\Roaming\mesh\credentials.json
//
// For more information on authentication: https://meshtrade.github.io/api/docs/architecture/authentication
//
// The service may also be configured with custom options:
//
//	service, err := NewAccountService(
//		config.WithURL("api.staging.example.com:443"),
//		config.WithAPIKey("your-api-key"),
//		config.WithGroup("groups/your-group-id"),
//		config.WithTimeout(30 * time.Second),
//	)
//	if err != nil {
//		log.Fatal(err)
//	}
//	defer service.Close() // ensures proper cleanup of underlying connection
//
// For more information on service configuration: https://meshtrade.github.io/api/docs/architecture/sdk-configuration
type AccountServiceClientInterface interface {
	grpc.GRPCClient

	// Creates a new account record in the system (off-chain).
	// The account is created in a pending state and must be explicitly opened
	// on the blockchain using OpenAccount before it can receive funds or execute
	// transactions. Account ownership must match the executing context.
	CreateAccount(ctx context.Context, request *CreateAccountRequest) (*Account, error)
	// Updates an existing account's mutable metadata.
	// Only the display_name field can be modified. All other fields including
	// ownership, ledger, and account number are immutable after creation.
	UpdateAccount(ctx context.Context, request *UpdateAccountRequest) (*Account, error)
	// Opens an account on the blockchain ledger.
	// Initializes the account on-chain, making it ready to receive deposits
	// and execute transactions. Returns the opened account and a transaction
	// reference for monitoring the blockchain operation.
	OpenAccount(ctx context.Context, request *OpenAccountRequest) (*OpenAccountResponse, error)
	// Retrieves a specific account by its resource identifier.
	// Provides access to account metadata and optionally fetches live
	// balance data from the blockchain when populate_ledger_data is true.
	GetAccount(ctx context.Context, request *GetAccountRequest) (*Account, error)
	// Retrieves an account using its Account Number.
	// Provides a convenient lookup method using the 7-digit account number.
	// Optionally fetches live balance data when populate_ledger_data is true.
	GetAccountByNumber(ctx context.Context, request *GetAccountByNumberRequest) (*Account, error)
	// Lists all accounts within the authenticated group's hierarchical scope.
	// Returns the complete set of accounts accessible to the executing context,
	// including accounts owned by the group and all descendant groups.
	ListAccounts(ctx context.Context, request *ListAccountsRequest) (*ListAccountsResponse, error)
	// Searches accounts using flexible text criteria within the hierarchy.
	// Performs case-insensitive substring matching on display names,
	// returning accounts that match the search criteria.
	SearchAccounts(ctx context.Context, request *SearchAccountsRequest) (*SearchAccountsResponse, error)

	// WithGroup returns a new client instance with a different group context
	WithGroup(group string) AccountServiceClientInterface
}

// accountService is the internal implementation of the AccountServiceClientInterface interface.
// It embeds BaseGRPCClient to provide all common gRPC functionality including validation.
type accountService struct {
	*grpc.BaseGRPCClient[AccountServiceClient]
}

// ensure accountService implements the AccountServiceClientInterface interface
var _ AccountServiceClientInterface = &accountService{}

// NewAccountService creates and initializes the AccountService service.
// The service uses the common BaseGRPCClient for all functionality including
// connection management, authentication, timeouts, and distributed tracing.
//
// Full Service documentation: https://meshtrade.github.io/api/docs/api-reference/wallet/account/v1
//
// With default configuration API credentials are searched for using the standard discovery hierarchy:
//
// 1. MESH_API_CREDENTIALS environment variable
//
// 2. Default credential file location:
//
//   - Linux:   $XDG_CONFIG_HOME/mesh/credentials.json or fallback to $HOME/.config/mesh/credentials.json
//   - macOS:   $HOME/Library/Application Support/mesh/credentials.json
//   - Windows: C:\Users\<user>\AppData\Roaming\mesh\credentials.json
//
// For more information on authentication: https://meshtrade.github.io/api/docs/architecture/authentication
//
// For more information on service configuration: https://meshtrade.github.io/api/docs/architecture/sdk-configuration
//
// Examples:
//
//	// Create with default configuration
//	service, err := NewAccountService()
//	if err != nil {
//		log.Fatal(err)
//	}
//	defer service.Close()
//
//	// Create with custom configuration
//	service, err := NewAccountService(
//		config.WithURL("api.example.com:443"),
//		config.WithAPIKey("your-api-key"),
//		config.WithGroup("groups/your-group-id"),
//	)
//	if err != nil {
//		log.Fatal(err)
//	}
//	defer service.Close()
//
// Parameters:
//   - opts: Functional options to configure the client
//
// Returns:
//   - AccountServiceClientInterface: Configured service instance
//   - error: Configuration or connection error
func NewAccountService(opts ...config.ServiceOption) (AccountServiceClientInterface, error) {
	base, err := grpc.NewBaseGRPCClient(
		AccountServiceServiceProviderName,
		NewAccountServiceClient,
		opts...,
	)
	if err != nil {
		return nil, err
	}

	return &accountService{BaseGRPCClient: base}, nil
}

// WithGroup returns a new client instance configured with a different group context.
// This enables convenient group context switching without reconstructing the entire client.
// All other configuration (URL, port, timeout, tracer, API key, etc.) is preserved.
//
// The group parameter must be in the format 'groups/{group_id}' where group_id is a valid
// group identifier (typically a ULID). The new client instance shares no state with the
// original client, allowing safe concurrent usage across different goroutines.
//
// Example:
//
//	// Create initial client with default group from credentials
//	service, err := NewAccountService()
//	if err != nil {
//		log.Fatal(err)
//	}
//	defer service.Close()
//
//	// Switch to a different group context
//	altService := service.WithGroup("groups/01ARZ3NDEKTSV4RRFFQ69G5FAV")
//	defer altService.Close()
//
//	// Both clients can be used independently
//	resp1, _ := service.SomeMethod(ctx, req)      // Uses original group
//	resp2, _ := altService.SomeMethod(ctx, req)   // Uses alternative group
//
// Parameters:
//   - group: The group resource name in format 'groups/{group_id}'
//
// Returns:
//   - AccountServiceClientInterface: New client instance with updated group context
func (s *accountService) WithGroup(group string) AccountServiceClientInterface {
	// Create new base client with copied configuration but new group
	newBase := s.BaseGRPCClient.WithGroup(group)

	// Return new service instance wrapping the new base client
	return &accountService{BaseGRPCClient: newBase}
}

// CreateAccount executes the CreateAccount RPC method with automatic
// client-side validation, timeout handling, distributed tracing, and authentication.
func (s *accountService) CreateAccount(ctx context.Context, request *CreateAccountRequest) (*Account, error) {
	return grpc.Execute(s.Executor(), ctx, "CreateAccount", request, func(ctx context.Context) (*Account, error) {
		return s.GrpcClient().CreateAccount(ctx, request)
	})
}

// UpdateAccount executes the UpdateAccount RPC method with automatic
// client-side validation, timeout handling, distributed tracing, and authentication.
func (s *accountService) UpdateAccount(ctx context.Context, request *UpdateAccountRequest) (*Account, error) {
	return grpc.Execute(s.Executor(), ctx, "UpdateAccount", request, func(ctx context.Context) (*Account, error) {
		return s.GrpcClient().UpdateAccount(ctx, request)
	})
}

// OpenAccount executes the OpenAccount RPC method with automatic
// client-side validation, timeout handling, distributed tracing, and authentication.
func (s *accountService) OpenAccount(ctx context.Context, request *OpenAccountRequest) (*OpenAccountResponse, error) {
	return grpc.Execute(s.Executor(), ctx, "OpenAccount", request, func(ctx context.Context) (*OpenAccountResponse, error) {
		return s.GrpcClient().OpenAccount(ctx, request)
	})
}

// GetAccount executes the GetAccount RPC method with automatic
// client-side validation, timeout handling, distributed tracing, and authentication.
func (s *accountService) GetAccount(ctx context.Context, request *GetAccountRequest) (*Account, error) {
	return grpc.Execute(s.Executor(), ctx, "GetAccount", request, func(ctx context.Context) (*Account, error) {
		return s.GrpcClient().GetAccount(ctx, request)
	})
}

// GetAccountByNumber executes the GetAccountByNumber RPC method with automatic
// client-side validation, timeout handling, distributed tracing, and authentication.
func (s *accountService) GetAccountByNumber(ctx context.Context, request *GetAccountByNumberRequest) (*Account, error) {
	return grpc.Execute(s.Executor(), ctx, "GetAccountByNumber", request, func(ctx context.Context) (*Account, error) {
		return s.GrpcClient().GetAccountByNumber(ctx, request)
	})
}

// ListAccounts executes the ListAccounts RPC method with automatic
// client-side validation, timeout handling, distributed tracing, and authentication.
func (s *accountService) ListAccounts(ctx context.Context, request *ListAccountsRequest) (*ListAccountsResponse, error) {
	return grpc.Execute(s.Executor(), ctx, "ListAccounts", request, func(ctx context.Context) (*ListAccountsResponse, error) {
		return s.GrpcClient().ListAccounts(ctx, request)
	})
}

// SearchAccounts executes the SearchAccounts RPC method with automatic
// client-side validation, timeout handling, distributed tracing, and authentication.
func (s *accountService) SearchAccounts(ctx context.Context, request *SearchAccountsRequest) (*SearchAccountsResponse, error) {
	return grpc.Execute(s.Executor(), ctx, "SearchAccounts", request, func(ctx context.Context) (*SearchAccountsResponse, error) {
		return s.GrpcClient().SearchAccounts(ctx, request)
	})
}
