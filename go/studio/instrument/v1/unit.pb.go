// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: meshtrade/studio/instrument/v1/unit.proto

package instrument_v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Unit defines the standard of measurement for an instrument, specifying how
// quantities of the asset are expressed. For example, oil is measured in
// barrels, and equity is measured in shares.
type Unit int32

const (
	// The unit is not specified. This is the default value and should be
	// treated as an error or an uninitialized state.
	Unit_UNIT_UNSPECIFIED Unit = 0
	// Indicates that the instrument's name or code itself represents a single
	// unit. This is used for assets where a separate unit qualifier is redundant,
	// such as "1 US Dollar" or "1 Bitcoin".
	Unit_UNIT_NULL Unit = 1
	// A single unit of a debt instrument, such as a promissory note, commercial
	// paper, or an Exchange-Traded Note (ETN).
	Unit_UNIT_NOTE Unit = 2
	// A single unit of equity ownership in a corporation.
	Unit_UNIT_SHARE Unit = 3
	// A single unit of a special class of equity that has preferential rights
	// over common shares.
	Unit_UNIT_PREFERENCE_SHARE Unit = 4
	// A single unit of a bond issuance, typically with a defined face value
	// (e.g., $1,000).
	Unit_UNIT_BOND Unit = 5
	// A single unit of a short-term debt obligation, such as a Treasury Bill
	// (T-Bill).
	Unit_UNIT_BILL Unit = 6
	// The standard unit for a derivative, such as a futures or forward
	// agreement, representing a standardized quantity of the underlying asset.
	Unit_UNIT_CONTRACT Unit = 7
	// The standard unit for an options derivative, giving the right to buy or
	// sell a specific amount of an underlying asset. One contract often
	// represents 100 shares of stock.
	Unit_UNIT_OPTION Unit = 8
	// The smallest individual unit of a digital asset or cryptocurrency recorded
	// on a blockchain.
	Unit_UNIT_TOKEN Unit = 9
	// A standard volumetric unit for crude oil and petroleum products,
	// equivalent to 42 US gallons.
	Unit_UNIT_BARREL Unit = 10
	// A metric unit of mass, commonly used for quoting prices of precious
	// metals.
	Unit_UNIT_GRAM Unit = 11
	// A metric unit of mass equal to 1,000 grams.
	Unit_UNIT_KILOGRAM Unit = 12
	// A metric unit of mass equal to 1,000 kilograms, often used for industrial
	// metals and bulk agricultural products.
	Unit_UNIT_METRIC_TON Unit = 13
	// A troy ounce, the standard unit of mass for precious metals, equivalent to
	// approximately 31.103 grams.
	Unit_UNIT_OUNCE Unit = 14
	// A fractional unit representing one-half of a troy ounce.
	Unit_UNIT_HALF_OUNCE Unit = 15
	// A fractional unit representing one-quarter of a troy ounce.
	Unit_UNIT_QUARTER_OUNCE Unit = 16
	// A fractional unit representing one-tenth of a troy ounce.
	Unit_UNIT_ONE_TENTH_OUNCE Unit = 17
	// A fractional unit representing one-hundredth of a troy ounce.
	Unit_UNIT_ONE_HUNDREDTH_OUNCE Unit = 18
)

// Enum value maps for Unit.
var (
	Unit_name = map[int32]string{
		0:  "UNIT_UNSPECIFIED",
		1:  "UNIT_NULL",
		2:  "UNIT_NOTE",
		3:  "UNIT_SHARE",
		4:  "UNIT_PREFERENCE_SHARE",
		5:  "UNIT_BOND",
		6:  "UNIT_BILL",
		7:  "UNIT_CONTRACT",
		8:  "UNIT_OPTION",
		9:  "UNIT_TOKEN",
		10: "UNIT_BARREL",
		11: "UNIT_GRAM",
		12: "UNIT_KILOGRAM",
		13: "UNIT_METRIC_TON",
		14: "UNIT_OUNCE",
		15: "UNIT_HALF_OUNCE",
		16: "UNIT_QUARTER_OUNCE",
		17: "UNIT_ONE_TENTH_OUNCE",
		18: "UNIT_ONE_HUNDREDTH_OUNCE",
	}
	Unit_value = map[string]int32{
		"UNIT_UNSPECIFIED":         0,
		"UNIT_NULL":                1,
		"UNIT_NOTE":                2,
		"UNIT_SHARE":               3,
		"UNIT_PREFERENCE_SHARE":    4,
		"UNIT_BOND":                5,
		"UNIT_BILL":                6,
		"UNIT_CONTRACT":            7,
		"UNIT_OPTION":              8,
		"UNIT_TOKEN":               9,
		"UNIT_BARREL":              10,
		"UNIT_GRAM":                11,
		"UNIT_KILOGRAM":            12,
		"UNIT_METRIC_TON":          13,
		"UNIT_OUNCE":               14,
		"UNIT_HALF_OUNCE":          15,
		"UNIT_QUARTER_OUNCE":       16,
		"UNIT_ONE_TENTH_OUNCE":     17,
		"UNIT_ONE_HUNDREDTH_OUNCE": 18,
	}
)

func (x Unit) Enum() *Unit {
	p := new(Unit)
	*p = x
	return p
}

func (x Unit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Unit) Descriptor() protoreflect.EnumDescriptor {
	return file_meshtrade_studio_instrument_v1_unit_proto_enumTypes[0].Descriptor()
}

func (Unit) Type() protoreflect.EnumType {
	return &file_meshtrade_studio_instrument_v1_unit_proto_enumTypes[0]
}

func (x Unit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Unit.Descriptor instead.
func (Unit) EnumDescriptor() ([]byte, []int) {
	return file_meshtrade_studio_instrument_v1_unit_proto_rawDescGZIP(), []int{0}
}

var File_meshtrade_studio_instrument_v1_unit_proto protoreflect.FileDescriptor

const file_meshtrade_studio_instrument_v1_unit_proto_rawDesc = "" +
	"\n" +
	")meshtrade/studio/instrument/v1/unit.proto\x12\x1emeshtrade.studio.instrument.v1*\xf4\x02\n" +
	"\x04Unit\x12\x14\n" +
	"\x10UNIT_UNSPECIFIED\x10\x00\x12\r\n" +
	"\tUNIT_NULL\x10\x01\x12\r\n" +
	"\tUNIT_NOTE\x10\x02\x12\x0e\n" +
	"\n" +
	"UNIT_SHARE\x10\x03\x12\x19\n" +
	"\x15UNIT_PREFERENCE_SHARE\x10\x04\x12\r\n" +
	"\tUNIT_BOND\x10\x05\x12\r\n" +
	"\tUNIT_BILL\x10\x06\x12\x11\n" +
	"\rUNIT_CONTRACT\x10\a\x12\x0f\n" +
	"\vUNIT_OPTION\x10\b\x12\x0e\n" +
	"\n" +
	"UNIT_TOKEN\x10\t\x12\x0f\n" +
	"\vUNIT_BARREL\x10\n" +
	"\x12\r\n" +
	"\tUNIT_GRAM\x10\v\x12\x11\n" +
	"\rUNIT_KILOGRAM\x10\f\x12\x13\n" +
	"\x0fUNIT_METRIC_TON\x10\r\x12\x0e\n" +
	"\n" +
	"UNIT_OUNCE\x10\x0e\x12\x13\n" +
	"\x0fUNIT_HALF_OUNCE\x10\x0f\x12\x16\n" +
	"\x12UNIT_QUARTER_OUNCE\x10\x10\x12\x18\n" +
	"\x14UNIT_ONE_TENTH_OUNCE\x10\x11\x12\x1c\n" +
	"\x18UNIT_ONE_HUNDREDTH_OUNCE\x10\x12Bg\n" +
	"%co.meshtrade.api.studio.instrument.v1Z>github.com/meshtrade/api/go/studio/instrument/v1;instrument_v1b\x06proto3"

var (
	file_meshtrade_studio_instrument_v1_unit_proto_rawDescOnce sync.Once
	file_meshtrade_studio_instrument_v1_unit_proto_rawDescData []byte
)

func file_meshtrade_studio_instrument_v1_unit_proto_rawDescGZIP() []byte {
	file_meshtrade_studio_instrument_v1_unit_proto_rawDescOnce.Do(func() {
		file_meshtrade_studio_instrument_v1_unit_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_meshtrade_studio_instrument_v1_unit_proto_rawDesc), len(file_meshtrade_studio_instrument_v1_unit_proto_rawDesc)))
	})
	return file_meshtrade_studio_instrument_v1_unit_proto_rawDescData
}

var file_meshtrade_studio_instrument_v1_unit_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_meshtrade_studio_instrument_v1_unit_proto_goTypes = []any{
	(Unit)(0), // 0: meshtrade.studio.instrument.v1.Unit
}
var file_meshtrade_studio_instrument_v1_unit_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_meshtrade_studio_instrument_v1_unit_proto_init() }
func file_meshtrade_studio_instrument_v1_unit_proto_init() {
	if File_meshtrade_studio_instrument_v1_unit_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_meshtrade_studio_instrument_v1_unit_proto_rawDesc), len(file_meshtrade_studio_instrument_v1_unit_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_meshtrade_studio_instrument_v1_unit_proto_goTypes,
		DependencyIndexes: file_meshtrade_studio_instrument_v1_unit_proto_depIdxs,
		EnumInfos:         file_meshtrade_studio_instrument_v1_unit_proto_enumTypes,
	}.Build()
	File_meshtrade_studio_instrument_v1_unit_proto = out.File
	file_meshtrade_studio_instrument_v1_unit_proto_goTypes = nil
	file_meshtrade_studio_instrument_v1_unit_proto_depIdxs = nil
}
