// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: meshtrade/studio/instrument/v1/instrument.proto

package instrument_v1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	v1 "github.com/meshtrade/api/go/type/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// An instrument structured in Mesh Studio.
type Instrument struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Unique resource identifier in format groups/{ULIDv2}.
	// Immutable and system-generated on creation.
	// Ignored if provided on creation.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Parent group resource name establishing direct ownership.
	// Defines the immediate hierarchical relationship.
	// Required on creation.
	Owner string `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	// Complete ownership path from root to this entity's owner group for efficient access control.
	// System-maintained array enabling hierarchical permission inheritance.
	// Immutable and system-generated on creation.
	// Ignored if provided on creation.
	Owners []string `protobuf:"bytes,3,rep,name=owners,proto3" json:"owners,omitempty"`
	// Human-readable name for organizational identification and display.
	// User-configurable and non-unique across the system.
	DisplayName string `protobuf:"bytes,4,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// The token in which this instrument is denominated.
	Token         *v1.Token `protobuf:"bytes,5,opt,name=token,proto3" json:"token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Instrument) Reset() {
	*x = Instrument{}
	mi := &file_meshtrade_studio_instrument_v1_instrument_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Instrument) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Instrument) ProtoMessage() {}

func (x *Instrument) ProtoReflect() protoreflect.Message {
	mi := &file_meshtrade_studio_instrument_v1_instrument_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Instrument.ProtoReflect.Descriptor instead.
func (*Instrument) Descriptor() ([]byte, []int) {
	return file_meshtrade_studio_instrument_v1_instrument_proto_rawDescGZIP(), []int{0}
}

func (x *Instrument) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Instrument) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *Instrument) GetOwners() []string {
	if x != nil {
		return x.Owners
	}
	return nil
}

func (x *Instrument) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *Instrument) GetToken() *v1.Token {
	if x != nil {
		return x.Token
	}
	return nil
}

var File_meshtrade_studio_instrument_v1_instrument_proto protoreflect.FileDescriptor

const file_meshtrade_studio_instrument_v1_instrument_proto_rawDesc = "" +
	"\n" +
	"/meshtrade/studio/instrument/v1/instrument.proto\x12\x1emeshtrade.studio.instrument.v1\x1a\x1bbuf/validate/validate.proto\x1a\x1dmeshtrade/type/v1/token.proto\"\x89\x03\n" +
	"\n" +
	"Instrument\x12\xa2\x01\n" +
	"\x04name\x18\x01 \x01(\tB\x8d\x01\xbaH\x89\x01\xba\x01\x85\x01\n" +
	"\x14name.format.optional\x123name must be empty or in the format groups/{ULIDv2}\x1a8size(this) == 0 || this.matches('^groups/[0-9A-Z]{26}$')R\x04name\x125\n" +
	"\x05owner\x18\x02 \x01(\tB\x1f\xbaH\x1cr\x1a2\x15^groups/[0-9A-Z]{26}$\x98\x01!R\x05owner\x12@\n" +
	"\x06owners\x18\x03 \x03(\tB(\xbaH%\x92\x01\"\b\x00\x10d\"\x1cr\x1a2\x15^groups/[0-9A-Z]{26}$\x98\x01!R\x06owners\x12-\n" +
	"\fdisplay_name\x18\x04 \x01(\tB\n" +
	"\xbaH\ar\x05\x10\x01\x18\xff\x01R\vdisplayName\x12.\n" +
	"\x05token\x18\x05 \x01(\v2\x18.meshtrade.type.v1.TokenR\x05tokenBg\n" +
	"%co.meshtrade.api.studio.instrument.v1Z>github.com/meshtrade/api/go/studio/instrument/v1;instrument_v1b\x06proto3"

var (
	file_meshtrade_studio_instrument_v1_instrument_proto_rawDescOnce sync.Once
	file_meshtrade_studio_instrument_v1_instrument_proto_rawDescData []byte
)

func file_meshtrade_studio_instrument_v1_instrument_proto_rawDescGZIP() []byte {
	file_meshtrade_studio_instrument_v1_instrument_proto_rawDescOnce.Do(func() {
		file_meshtrade_studio_instrument_v1_instrument_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_meshtrade_studio_instrument_v1_instrument_proto_rawDesc), len(file_meshtrade_studio_instrument_v1_instrument_proto_rawDesc)))
	})
	return file_meshtrade_studio_instrument_v1_instrument_proto_rawDescData
}

var file_meshtrade_studio_instrument_v1_instrument_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_meshtrade_studio_instrument_v1_instrument_proto_goTypes = []any{
	(*Instrument)(nil), // 0: meshtrade.studio.instrument.v1.Instrument
	(*v1.Token)(nil),   // 1: meshtrade.type.v1.Token
}
var file_meshtrade_studio_instrument_v1_instrument_proto_depIdxs = []int32{
	1, // 0: meshtrade.studio.instrument.v1.Instrument.token:type_name -> meshtrade.type.v1.Token
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_meshtrade_studio_instrument_v1_instrument_proto_init() }
func file_meshtrade_studio_instrument_v1_instrument_proto_init() {
	if File_meshtrade_studio_instrument_v1_instrument_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_meshtrade_studio_instrument_v1_instrument_proto_rawDesc), len(file_meshtrade_studio_instrument_v1_instrument_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_meshtrade_studio_instrument_v1_instrument_proto_goTypes,
		DependencyIndexes: file_meshtrade_studio_instrument_v1_instrument_proto_depIdxs,
		MessageInfos:      file_meshtrade_studio_instrument_v1_instrument_proto_msgTypes,
	}.Build()
	File_meshtrade_studio_instrument_v1_instrument_proto = out.File
	file_meshtrade_studio_instrument_v1_instrument_proto_goTypes = nil
	file_meshtrade_studio_instrument_v1_instrument_proto_depIdxs = nil
}
