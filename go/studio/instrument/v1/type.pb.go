// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: meshtrade/studio/instrument/v1/type.proto

package instrument_v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The type of an instrument structured in Mesh Studio. This enum categorizes
// various financial instruments and assets available on the platform, providing
// a standardized way to identify them.
type InstrumentType int32

const (
	// The instrument type is not specified. This is the default value and
	// should be treated as an error or an uninitialized state.
	InstrumentType_INSTRUMENT_TYPE_UNSPECIFIED InstrumentType = 0
	// A catch-all for any instrument type not explicitly listed in this enum.
	// Use this for miscellaneous or newly introduced asset types.
	InstrumentType_INSTRUMENT_TYPE_OTHER InstrumentType = 1
	// Common equity in a corporation, also known as ordinary shares.
	// Holders have ownership rights, including voting rights, and are entitled
	// to a portion of profits through dividends and capital gains.
	InstrumentType_INSTRUMENT_TYPE_SHARE InstrumentType = 2
	// A class of share ownership with a higher claim on assets and earnings
	// than common shares. Preference shares generally have a fixed dividend that
	// must be paid out before dividends to common shareholders.
	InstrumentType_INSTRUMENT_TYPE_PREFERENCE_SHARE InstrumentType = 3
	// A fixed-income instrument representing a loan made by an investor to a
	// borrower (typically corporate or governmental). The borrower pays interest
	// (coupon) and repays the principal amount at a later date (maturity).
	InstrumentType_INSTRUMENT_TYPE_BOND InstrumentType = 4
	// Exchange-Traded Fund. A type of pooled investment security that operates
	// much like a mutual fund but trades like a stock on an exchange. ETFs
	// hold assets such as stocks, commodities, or bonds and are typically
	// designed to track an underlying index.
	InstrumentType_INSTRUMENT_TYPE_ETF InstrumentType = 5
	// Exchange-Traded Note. A type of senior, unsecured debt security that
	// tracks an underlying index of securities. ETNs do not own the underlying
	// assets and are subject to the credit risk of the issuing institution.
	InstrumentType_INSTRUMENT_TYPE_ETN InstrumentType = 6
	// Actively Managed Certificate. A structured product linked to an
	// underlying portfolio or strategy. Unlike a typical index-tracking ETF,
	// its portfolio is actively managed by an investment advisor.
	InstrumentType_INSTRUMENT_TYPE_AMC InstrumentType = 7
	// An open-ended investment vehicle where funds from multiple investors are
	// pooled to invest in a diversified portfolio of securities. Common in
	// collective investment schemes.
	InstrumentType_INSTRUMENT_TYPE_UNIT_TRUST InstrumentType = 8
	// A digital or virtual currency secured by cryptography.
	// Examples include Bitcoin (BTC) and Ethereum (ETH).
	InstrumentType_INSTRUMENT_TYPE_CRYPTO_CURRENCY InstrumentType = 9
	// Government-issued currency that is not backed by a physical commodity
	// but by the government that issued it. Examples include the US Dollar
	// (USD) and the Euro (EUR).
	InstrumentType_INSTRUMENT_TYPE_FIAT_CURRENCY InstrumentType = 10
	// Rights to the financial value of a linked underlying.
	InstrumentType_INSTRUMENT_TYPE_RIGHTS InstrumentType = 11
	// Gold as a commodity. Can be invested in via physical bullion, futures,
	// or other financial products tracking its price.
	InstrumentType_INSTRUMENT_TYPE_GOLD InstrumentType = 12
	// Silver as a commodity.
	InstrumentType_INSTRUMENT_TYPE_SILVER InstrumentType = 13
	// Platinum as a commodity.
	InstrumentType_INSTRUMENT_TYPE_PLATINUM InstrumentType = 14
	// Palladium as a commodity.
	InstrumentType_INSTRUMENT_TYPE_PALLADIUM InstrumentType = 15
	// Crude oil, a key global energy commodity.
	InstrumentType_INSTRUMENT_TYPE_CRUDE_OIL InstrumentType = 16
	// Natural gas, a major energy commodity.
	InstrumentType_INSTRUMENT_TYPE_NATURAL_GAS InstrumentType = 17
	// Copper, an important industrial metal.
	InstrumentType_INSTRUMENT_TYPE_COPPER InstrumentType = 18
	// Corn, a major agricultural commodity.
	InstrumentType_INSTRUMENT_TYPE_CORN InstrumentType = 19
	// Wheat, a staple agricultural commodity.
	InstrumentType_INSTRUMENT_TYPE_WHEAT InstrumentType = 20
	// Soybeans, a key agricultural commodity used for food and animal feed.
	InstrumentType_INSTRUMENT_TYPE_SOYBEANS InstrumentType = 21
	// A type of cryptocurrency designed to maintain a stable value by being
	// pegged to a reference asset, such as a fiat currency (e.g., USD).
	InstrumentType_INSTRUMENT_TYPE_FIAT_STABLECOIN InstrumentType = 22
	// A type of mutual fund that invests in highly liquid, short-term
	// instruments such as cash, cash equivalents, and high-credit-rating
	// debt securities.
	InstrumentType_INSTRUMENT_TYPE_MONEY_MARKET_FUND InstrumentType = 23
	// A tax-structured investment vehicle, typically a life insurance policy,
	// that combines investment growth with a small amount of life cover.
	InstrumentType_INSTRUMENT_TYPE_ENDOWMENT_WRAPPER InstrumentType = 24
)

// Enum value maps for InstrumentType.
var (
	InstrumentType_name = map[int32]string{
		0:  "INSTRUMENT_TYPE_UNSPECIFIED",
		1:  "INSTRUMENT_TYPE_OTHER",
		2:  "INSTRUMENT_TYPE_SHARE",
		3:  "INSTRUMENT_TYPE_PREFERENCE_SHARE",
		4:  "INSTRUMENT_TYPE_BOND",
		5:  "INSTRUMENT_TYPE_ETF",
		6:  "INSTRUMENT_TYPE_ETN",
		7:  "INSTRUMENT_TYPE_AMC",
		8:  "INSTRUMENT_TYPE_UNIT_TRUST",
		9:  "INSTRUMENT_TYPE_CRYPTO_CURRENCY",
		10: "INSTRUMENT_TYPE_FIAT_CURRENCY",
		11: "INSTRUMENT_TYPE_RIGHTS",
		12: "INSTRUMENT_TYPE_GOLD",
		13: "INSTRUMENT_TYPE_SILVER",
		14: "INSTRUMENT_TYPE_PLATINUM",
		15: "INSTRUMENT_TYPE_PALLADIUM",
		16: "INSTRUMENT_TYPE_CRUDE_OIL",
		17: "INSTRUMENT_TYPE_NATURAL_GAS",
		18: "INSTRUMENT_TYPE_COPPER",
		19: "INSTRUMENT_TYPE_CORN",
		20: "INSTRUMENT_TYPE_WHEAT",
		21: "INSTRUMENT_TYPE_SOYBEANS",
		22: "INSTRUMENT_TYPE_FIAT_STABLECOIN",
		23: "INSTRUMENT_TYPE_MONEY_MARKET_FUND",
		24: "INSTRUMENT_TYPE_ENDOWMENT_WRAPPER",
	}
	InstrumentType_value = map[string]int32{
		"INSTRUMENT_TYPE_UNSPECIFIED":       0,
		"INSTRUMENT_TYPE_OTHER":             1,
		"INSTRUMENT_TYPE_SHARE":             2,
		"INSTRUMENT_TYPE_PREFERENCE_SHARE":  3,
		"INSTRUMENT_TYPE_BOND":              4,
		"INSTRUMENT_TYPE_ETF":               5,
		"INSTRUMENT_TYPE_ETN":               6,
		"INSTRUMENT_TYPE_AMC":               7,
		"INSTRUMENT_TYPE_UNIT_TRUST":        8,
		"INSTRUMENT_TYPE_CRYPTO_CURRENCY":   9,
		"INSTRUMENT_TYPE_FIAT_CURRENCY":     10,
		"INSTRUMENT_TYPE_RIGHTS":            11,
		"INSTRUMENT_TYPE_GOLD":              12,
		"INSTRUMENT_TYPE_SILVER":            13,
		"INSTRUMENT_TYPE_PLATINUM":          14,
		"INSTRUMENT_TYPE_PALLADIUM":         15,
		"INSTRUMENT_TYPE_CRUDE_OIL":         16,
		"INSTRUMENT_TYPE_NATURAL_GAS":       17,
		"INSTRUMENT_TYPE_COPPER":            18,
		"INSTRUMENT_TYPE_CORN":              19,
		"INSTRUMENT_TYPE_WHEAT":             20,
		"INSTRUMENT_TYPE_SOYBEANS":          21,
		"INSTRUMENT_TYPE_FIAT_STABLECOIN":   22,
		"INSTRUMENT_TYPE_MONEY_MARKET_FUND": 23,
		"INSTRUMENT_TYPE_ENDOWMENT_WRAPPER": 24,
	}
)

func (x InstrumentType) Enum() *InstrumentType {
	p := new(InstrumentType)
	*p = x
	return p
}

func (x InstrumentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InstrumentType) Descriptor() protoreflect.EnumDescriptor {
	return file_meshtrade_studio_instrument_v1_type_proto_enumTypes[0].Descriptor()
}

func (InstrumentType) Type() protoreflect.EnumType {
	return &file_meshtrade_studio_instrument_v1_type_proto_enumTypes[0]
}

func (x InstrumentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InstrumentType.Descriptor instead.
func (InstrumentType) EnumDescriptor() ([]byte, []int) {
	return file_meshtrade_studio_instrument_v1_type_proto_rawDescGZIP(), []int{0}
}

var File_meshtrade_studio_instrument_v1_type_proto protoreflect.FileDescriptor

const file_meshtrade_studio_instrument_v1_type_proto_rawDesc = "" +
	"\n" +
	")meshtrade/studio/instrument/v1/type.proto\x12\x1emeshtrade.studio.instrument.v1*\x8b\x06\n" +
	"\x0eInstrumentType\x12\x1f\n" +
	"\x1bINSTRUMENT_TYPE_UNSPECIFIED\x10\x00\x12\x19\n" +
	"\x15INSTRUMENT_TYPE_OTHER\x10\x01\x12\x19\n" +
	"\x15INSTRUMENT_TYPE_SHARE\x10\x02\x12$\n" +
	" INSTRUMENT_TYPE_PREFERENCE_SHARE\x10\x03\x12\x18\n" +
	"\x14INSTRUMENT_TYPE_BOND\x10\x04\x12\x17\n" +
	"\x13INSTRUMENT_TYPE_ETF\x10\x05\x12\x17\n" +
	"\x13INSTRUMENT_TYPE_ETN\x10\x06\x12\x17\n" +
	"\x13INSTRUMENT_TYPE_AMC\x10\a\x12\x1e\n" +
	"\x1aINSTRUMENT_TYPE_UNIT_TRUST\x10\b\x12#\n" +
	"\x1fINSTRUMENT_TYPE_CRYPTO_CURRENCY\x10\t\x12!\n" +
	"\x1dINSTRUMENT_TYPE_FIAT_CURRENCY\x10\n" +
	"\x12\x1a\n" +
	"\x16INSTRUMENT_TYPE_RIGHTS\x10\v\x12\x18\n" +
	"\x14INSTRUMENT_TYPE_GOLD\x10\f\x12\x1a\n" +
	"\x16INSTRUMENT_TYPE_SILVER\x10\r\x12\x1c\n" +
	"\x18INSTRUMENT_TYPE_PLATINUM\x10\x0e\x12\x1d\n" +
	"\x19INSTRUMENT_TYPE_PALLADIUM\x10\x0f\x12\x1d\n" +
	"\x19INSTRUMENT_TYPE_CRUDE_OIL\x10\x10\x12\x1f\n" +
	"\x1bINSTRUMENT_TYPE_NATURAL_GAS\x10\x11\x12\x1a\n" +
	"\x16INSTRUMENT_TYPE_COPPER\x10\x12\x12\x18\n" +
	"\x14INSTRUMENT_TYPE_CORN\x10\x13\x12\x19\n" +
	"\x15INSTRUMENT_TYPE_WHEAT\x10\x14\x12\x1c\n" +
	"\x18INSTRUMENT_TYPE_SOYBEANS\x10\x15\x12#\n" +
	"\x1fINSTRUMENT_TYPE_FIAT_STABLECOIN\x10\x16\x12%\n" +
	"!INSTRUMENT_TYPE_MONEY_MARKET_FUND\x10\x17\x12%\n" +
	"!INSTRUMENT_TYPE_ENDOWMENT_WRAPPER\x10\x18Bg\n" +
	"%co.meshtrade.api.studio.instrument.v1Z>github.com/meshtrade/api/go/studio/instrument/v1;instrument_v1b\x06proto3"

var (
	file_meshtrade_studio_instrument_v1_type_proto_rawDescOnce sync.Once
	file_meshtrade_studio_instrument_v1_type_proto_rawDescData []byte
)

func file_meshtrade_studio_instrument_v1_type_proto_rawDescGZIP() []byte {
	file_meshtrade_studio_instrument_v1_type_proto_rawDescOnce.Do(func() {
		file_meshtrade_studio_instrument_v1_type_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_meshtrade_studio_instrument_v1_type_proto_rawDesc), len(file_meshtrade_studio_instrument_v1_type_proto_rawDesc)))
	})
	return file_meshtrade_studio_instrument_v1_type_proto_rawDescData
}

var file_meshtrade_studio_instrument_v1_type_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_meshtrade_studio_instrument_v1_type_proto_goTypes = []any{
	(InstrumentType)(0), // 0: meshtrade.studio.instrument.v1.InstrumentType
}
var file_meshtrade_studio_instrument_v1_type_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_meshtrade_studio_instrument_v1_type_proto_init() }
func file_meshtrade_studio_instrument_v1_type_proto_init() {
	if File_meshtrade_studio_instrument_v1_type_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_meshtrade_studio_instrument_v1_type_proto_rawDesc), len(file_meshtrade_studio_instrument_v1_type_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_meshtrade_studio_instrument_v1_type_proto_goTypes,
		DependencyIndexes: file_meshtrade_studio_instrument_v1_type_proto_depIdxs,
		EnumInfos:         file_meshtrade_studio_instrument_v1_type_proto_enumTypes,
	}.Build()
	File_meshtrade_studio_instrument_v1_type_proto = out.File
	file_meshtrade_studio_instrument_v1_type_proto_goTypes = nil
	file_meshtrade_studio_instrument_v1_type_proto_depIdxs = nil
}
