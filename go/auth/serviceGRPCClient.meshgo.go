// Code generated by protoc-gen-meshgo. DO NOT EDIT.
// source: api/proto/auth/service.proto
package auth

import (
	context "context"
	fmt "fmt"
	log "github.com/rs/zerolog/log"
	trace "go.opentelemetry.io/otel/trace"
	grpc "google.golang.org/grpc"
)

// Ensure that GRPCClientService implements the Service interface
var _ Service = &GRPCClientService{}

// GRPCClientService is a gRPC client implementation of the Service interface.
type GRPCClientService struct {
	tracer     trace.Tracer
	grpcClient ServiceClient
}

func NewGRPCClientService(
	tracer trace.Tracer,
	grpcClientConnection *grpc.ClientConn,
) *GRPCClientService {
	return &GRPCClientService{
		tracer:     tracer,
		grpcClient: NewServiceClient(grpcClientConnection),
	}
}

func (g *GRPCClientService) LoginWithFirebaseToken(ctx context.Context, request *LoginWithFirebaseTokenRequest) (*LoginWithFirebaseTokenResponse, error) {
	ctx, span := g.tracer.Start(
		ctx,
		ServiceServiceProviderName+"LoginWithFirebaseToken",
	)
	defer span.End()

	// call given implementation of the adapted service provider interface
	loginWithFirebaseTokenResponse, err := g.grpcClient.LoginWithFirebaseToken(ctx, request)
	if err != nil {
		log.Ctx(ctx).Error().Err(err).Msg("could not LoginWithFirebaseToken")
		return nil, fmt.Errorf("could not LoginWithFirebaseToken: %s", err)
	}

	return loginWithFirebaseTokenResponse, nil
}
