// Code generated by protoc-gen-meshgo. DO NOT EDIT.
// source: meshtrade/trading/direct_order/v1/service.proto
package directorderv1

import (
	context "context"
	fmt "fmt"
	log "github.com/rs/zerolog/log"
	trace "go.opentelemetry.io/otel/trace"
	grpc "google.golang.org/grpc"
)

// Ensure that DirectOrderServiceGRPCClient implements the DirectOrderService interface
var _ DirectOrderService = &DirectOrderServiceGRPCClient{}

// DirectOrderServiceGRPCClient is a gRPC client implementation of the DirectOrderService interface.
type DirectOrderServiceGRPCClient struct {
	tracer     trace.Tracer
	grpcClient DirectOrderServiceClient
}

func NewDirectOrderServiceGRPCClient(
	tracer trace.Tracer,
	grpcClientConnection *grpc.ClientConn,
) *DirectOrderServiceGRPCClient {
	return &DirectOrderServiceGRPCClient{
		tracer:     tracer,
		grpcClient: NewDirectOrderServiceClient(grpcClientConnection),
	}
}

func (g *DirectOrderServiceGRPCClient) GetDirectOrder(ctx context.Context, request *GetDirectOrderRequest) (*DirectOrder, error) {
	ctx, span := g.tracer.Start(
		ctx,
		DirectOrderServiceServiceProviderName+"GetDirectOrder",
	)
	defer span.End()

	// call given implementation of the adapted service provider interface
	getDirectOrderResponse, err := g.grpcClient.GetDirectOrder(ctx, request)
	if err != nil {
		log.Ctx(ctx).Error().Err(err).Msg("could not GetDirectOrder")
		return nil, fmt.Errorf("could not GetDirectOrder: %s", err)
	}

	return getDirectOrderResponse, nil
}
