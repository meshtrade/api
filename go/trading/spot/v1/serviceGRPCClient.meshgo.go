// Code generated by protoc-gen-meshgo. DO NOT EDIT.
// source: meshtrade/trading/spot/v1/service.proto
package spotv1

import (
	context "context"
	fmt "fmt"
	log "github.com/rs/zerolog/log"
	trace "go.opentelemetry.io/otel/trace"
	grpc "google.golang.org/grpc"
)

// Ensure that GRPCClientSpotService implements the SpotService interface
var _ SpotService = &GRPCClientSpotService{}

// GRPCClientSpotService is a gRPC client implementation of the SpotService interface.
type GRPCClientSpotService struct {
	tracer     trace.Tracer
	grpcClient SpotServiceClient
}

func NewGRPCClientSpotService(
	tracer trace.Tracer,
	grpcClientConnection *grpc.ClientConn,
) *GRPCClientSpotService {
	return &GRPCClientSpotService{
		tracer:     tracer,
		grpcClient: NewSpotServiceClient(grpcClientConnection),
	}
}

func (g *GRPCClientSpotService) Get(ctx context.Context, request *GetSpotRequest) (*GetSpotResponse, error) {
	ctx, span := g.tracer.Start(
		ctx,
		SpotServiceServiceProviderName+"Get",
	)
	defer span.End()

	// call given implementation of the adapted service provider interface
	getResponse, err := g.grpcClient.Get(ctx, request)
	if err != nil {
		log.Ctx(ctx).Error().Err(err).Msg("could not Get")
		return nil, fmt.Errorf("could not Get: %s", err)
	}

	return getResponse, nil
}
