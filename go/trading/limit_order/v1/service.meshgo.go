// Code generated by protoc-gen-meshgo. DO NOT EDIT.
// source: meshtrade/trading/limit_order/v1/service.proto
package limitorderv1

import (
	context "context"
	grpc "github.com/meshtrade/api/go/grpc"
	config "github.com/meshtrade/api/go/grpc/config"
)

// LimitOrderServiceClientInterface is a gRPC service for the LimitOrderService service.
// It combines the service interface with resource management capabilities using
// the common BaseGRPCClient for consistent authentication, timeouts, and tracing.
//
// Example usage:
//
//	service, err := NewLimitOrderService(
//		config.WithAPIKey("your-api-key"),
//		config.WithGroup("groups/your-group-id"),
//		config.WithTimeout(30 * time.Second),
//	)
//	if err != nil {
//		log.Fatal(err)
//	}
//	defer service.Close()
type LimitOrderServiceClientInterface interface {
	LimitOrderService
	grpc.GRPCClient
}

// limitOrderService is the internal implementation of the LimitOrderServiceClientInterface interface.
// It embeds BaseGRPCClient to provide all common gRPC functionality.
type limitOrderService struct {
	*grpc.BaseGRPCClient[LimitOrderServiceClient]
}

// ensure limitOrderService implements the LimitOrderServiceClientInterface interface
var _ LimitOrderServiceClientInterface = &limitOrderService{}

// NewLimitOrderService creates a new gRPC service for the LimitOrderService service.
// The service uses the common BaseGRPCClient for all functionality including
// connection management, authentication, timeouts, and distributed tracing.
//
// Parameters:
//   - opts: Functional options to configure the client
//
// Returns:
//   - LimitOrderServiceClientInterface: Configured service instance
//   - error: Configuration or connection error
func NewLimitOrderService(opts ...config.ServiceOption) (LimitOrderServiceClientInterface, error) {
	base, err := grpc.NewBaseGRPCClient(
		LimitOrderServiceServiceProviderName,
		NewLimitOrderServiceClient,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return &limitOrderService{BaseGRPCClient: base}, nil
}

// GetLimitOrder executes the GetLimitOrder RPC method with automatic
// timeout handling, distributed tracing, and authentication.
func (s *limitOrderService) GetLimitOrder(ctx context.Context, request *GetLimitOrderRequest) (*LimitOrder, error) {
	return grpc.Execute(s.Executor(), ctx, "GetLimitOrder", func(ctx context.Context) (*LimitOrder, error) {
		return s.GrpcClient().GetLimitOrder(ctx, request)
	})
}
