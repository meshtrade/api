// Code generated by protoc-gen-meshgo. DO NOT EDIT.
// source: meshtrade/trading/limit_order/v1/service.proto
package limitorderv1

import (
	"time"

	trace "go.opentelemetry.io/otel/trace"
)

// ClientOption is a functional option for configuring the LimitOrderService gRPC client.
// This pattern provides a clean, extensible way to configure the client with optional
// parameters while maintaining backward compatibility and readability.
type ClientOption func(*limitOrderServiceGRPCClient)

// WithTLS configures whether to use TLS encryption for the gRPC connection.
// When enabled (true), the client will establish a secure connection using TLS.
// When disabled (false), the client will use an insecure connection.
//
// Default: true (secure connection)
//
// Example:
//
//	client, err := NewLimitOrderServiceGRPCClient(
//	    WithTLS(true), // Enable TLS encryption
//	)
func WithTLS(enabled bool) ClientOption {
	return func(c *limitOrderServiceGRPCClient) {
		c.tls = enabled
	}
}

// WithAddress configures the server address (URL and port) for the gRPC connection.
// This allows you to connect to different environments or custom deployments.
//
// Parameters:
//   - url: The server hostname or IP address (e.g., "api.example.com", "localhost")
//   - port: The server port number (e.g., 443 for HTTPS, 8080 for development)
//
// Default: Uses common.DefaultGRPCURL and common.DefaultGRPCPort
//
// Example:
//
//	client, err := NewLimitOrderServiceGRPCClient(
//	    WithAddress("staging-api.example.com", 443), // Connect to staging
//	)
func WithAddress(url string, port int) ClientOption {
	return func(c *limitOrderServiceGRPCClient) {
		c.url = url
		c.port = port
	}
}

// WithURL configures only the server URL/hostname for the gRPC connection.
// The port will remain unchanged (uses existing port or default).
// Use WithAddress() if you need to set both URL and port together.
//
// Parameter:
//   - url: The server hostname or IP address
//
// Example:
//
//	client, err := NewLimitOrderServiceGRPCClient(
//	    WithURL("production-api.mesh.trade"), // Use production server
//	)
func WithURL(url string) ClientOption {
	return func(c *limitOrderServiceGRPCClient) {
		c.url = url
	}
}

// WithPort configures only the server port for the gRPC connection.
// The URL will remain unchanged (uses existing URL or default).
// Use WithAddress() if you need to set both URL and port together.
//
// Parameter:
//   - port: The server port number
//
// Example:
//
//	client, err := NewLimitOrderServiceGRPCClient(
//	    WithPort(9090), // Connect to port 9090
//	)
func WithPort(port int) ClientOption {
	return func(c *limitOrderServiceGRPCClient) {
		c.port = port
	}
}

// WithAPIKey configures API key authentication for the gRPC client.
// The API key will be sent as a Bearer token in the Authorization header.
// This is the primary authentication method for service-to-service communication.
//
// IMPORTANT: When using API key authentication, you must also specify a group ID
// using WithGroup() or load from credentials file via MESH_API_CREDENTIALS.
//
// Parameter:
//   - apiKey: The API key string (without "Bearer " prefix)
//
// Example:
//
//	client, err := NewLimitOrderServiceGRPCClient(
//	    WithAPIKey("your-api-key-here"),
//	    WithGroup("your-group-id"),
//	)
func WithAPIKey(apiKey string) ClientOption {
	return func(c *limitOrderServiceGRPCClient) {
		c.apiKey = apiKey
	}
}

// WithGroup configures the group ID for all API requests made by this client.
// The group ID is required for public API calls and determines the authorization context
// for operations. It will be sent as an "x-group-id" header with every request.
//
// This option is required when using manual authentication configuration.
// When loading from credentials file via MESH_API_CREDENTIALS, the group ID
// is automatically loaded and this option is optional (but will override the file value).
//
// Parameter:
//   - groupID: The group identifier string
//
// Example:
//
//	client, err := NewLimitOrderServiceGRPCClient(
//	    WithAPIKey("your-api-key"),
//	    WithGroup("01ABCDEF123456789"),
//	)
func WithGroup(groupID string) ClientOption {
	return func(c *limitOrderServiceGRPCClient) {
		c.groupID = groupID
	}
}

// WithTracer configures OpenTelemetry distributed tracing for the gRPC client.
// This enables observability and monitoring of API calls across service boundaries.
// Each gRPC method call will create a trace span for tracking request flow.
//
// Parameter:
//   - tracer: An OpenTelemetry tracer instance
//
// Default: Uses a no-op tracer (tracing disabled)
//
// Example:
//
//	tracer := otel.Tracer("limitorderservice-client")
//	client, err := NewLimitOrderServiceGRPCClient(
//	    WithTracer(tracer),
//	)
func WithTracer(tracer trace.Tracer) ClientOption {
	return func(c *limitOrderServiceGRPCClient) {
		c.tracer = tracer
	}
}

// WithTimeout configures the default timeout for all gRPC method calls.
// This timeout applies to individual method calls and helps prevent hanging requests.
// If a request takes longer than the specified timeout, it will be cancelled.
//
// The timeout is implemented using context.WithTimeout() for each method call.
//
// Parameter:
//   - timeout: The maximum duration to wait for a method call to complete
//
// Default: 30 seconds
//
// Example:
//
//	client, err := NewLimitOrderServiceGRPCClient(
//	    WithTimeout(10 * time.Second), // Set 10 second timeout
//	)
//
// Note: Individual method calls can still override this timeout by providing
// a context with a shorter deadline.
func WithTimeout(timeout time.Duration) ClientOption {
	return func(c *limitOrderServiceGRPCClient) {
		c.timeout = timeout
	}
}
