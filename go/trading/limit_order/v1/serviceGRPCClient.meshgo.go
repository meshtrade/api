// Code generated by protoc-gen-meshgo. DO NOT EDIT.
// source: meshtrade/trading/limit_order/v1/service.proto
package limitorderv1

import (
	context "context"
	fmt "fmt"
	log "github.com/rs/zerolog/log"
	trace "go.opentelemetry.io/otel/trace"
	grpc "google.golang.org/grpc"
)

// Ensure that GRPCClientLimitOrderService implements the LimitOrderService interface
var _ LimitOrderService = &GRPCClientLimitOrderService{}

// GRPCClientLimitOrderService is a gRPC client implementation of the LimitOrderService interface.
type GRPCClientLimitOrderService struct {
	tracer     trace.Tracer
	grpcClient LimitOrderServiceClient
}

func NewGRPCClientLimitOrderService(
	tracer trace.Tracer,
	grpcClientConnection *grpc.ClientConn,
) *GRPCClientLimitOrderService {
	return &GRPCClientLimitOrderService{
		tracer:     tracer,
		grpcClient: NewLimitOrderServiceClient(grpcClientConnection),
	}
}

func (g *GRPCClientLimitOrderService) GetLimitOrder(ctx context.Context, request *GetLimitOrderRequest) (*LimitOrder, error) {
	ctx, span := g.tracer.Start(
		ctx,
		LimitOrderServiceServiceProviderName+"GetLimitOrder",
	)
	defer span.End()

	// call given implementation of the adapted service provider interface
	getLimitOrderResponse, err := g.grpcClient.GetLimitOrder(ctx, request)
	if err != nil {
		log.Ctx(ctx).Error().Err(err).Msg("could not GetLimitOrder")
		return nil, fmt.Errorf("could not GetLimitOrder: %s", err)
	}

	return getLimitOrderResponse, nil
}
