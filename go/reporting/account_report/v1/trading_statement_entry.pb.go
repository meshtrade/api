// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: meshtrade/reporting/account_report/v1/trading_statement_entry.proto

package account_report_v1

import (
	v1 "github.com/meshtrade/api/go/type/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// TradingStatementEntry represents a single, immutable transaction record in a user's account statement.
// It provides a detailed breakdown of each transaction, including the asset involved, transaction type,
// amount, price, and resulting balance.
type TradingStatementEntry struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The exact date and time when the transaction was processed.
	TransactionDate *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=transaction_date,json=transactionDate,proto3" json:"transaction_date,omitempty"`
	// A unique identifier for the transaction, ensuring each entry is distinct and traceable.
	TransactionId string `protobuf:"bytes,2,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	// The specific token involved in the transaction (e.g., "mZAR", "yXLM").
	TokenCode string `protobuf:"bytes,3,opt,name=token_code,json=tokenCode,proto3" json:"token_code,omitempty"`
	// A human-readable description of the transaction type, such as "Deposit," "Withdrawal," or "Trade."
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// The quantity of the token transacted. A positive value indicates an increase in the asset,
	// while a negative value indicates a decrease.
	Amount *v1.Amount `protobuf:"bytes,5,opt,name=amount,proto3" json:"amount,omitempty"`
	// The price per unit of the token at the time of the transaction. This is used to calculate the total cost.
	Price *v1.Amount `protobuf:"bytes,6,opt,name=price,proto3" json:"price,omitempty"`
	// The total value of the transaction, calculated as amount * price.
	Cost *v1.Amount `protobuf:"bytes,7,opt,name=cost,proto3" json:"cost,omitempty"`
	// The remaining balance of the token in the account after the transaction was completed.
	Balance       *v1.Amount `protobuf:"bytes,8,opt,name=balance,proto3" json:"balance,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TradingStatementEntry) Reset() {
	*x = TradingStatementEntry{}
	mi := &file_meshtrade_reporting_account_report_v1_trading_statement_entry_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TradingStatementEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradingStatementEntry) ProtoMessage() {}

func (x *TradingStatementEntry) ProtoReflect() protoreflect.Message {
	mi := &file_meshtrade_reporting_account_report_v1_trading_statement_entry_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradingStatementEntry.ProtoReflect.Descriptor instead.
func (*TradingStatementEntry) Descriptor() ([]byte, []int) {
	return file_meshtrade_reporting_account_report_v1_trading_statement_entry_proto_rawDescGZIP(), []int{0}
}

func (x *TradingStatementEntry) GetTransactionDate() *timestamppb.Timestamp {
	if x != nil {
		return x.TransactionDate
	}
	return nil
}

func (x *TradingStatementEntry) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *TradingStatementEntry) GetTokenCode() string {
	if x != nil {
		return x.TokenCode
	}
	return ""
}

func (x *TradingStatementEntry) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *TradingStatementEntry) GetAmount() *v1.Amount {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *TradingStatementEntry) GetPrice() *v1.Amount {
	if x != nil {
		return x.Price
	}
	return nil
}

func (x *TradingStatementEntry) GetCost() *v1.Amount {
	if x != nil {
		return x.Cost
	}
	return nil
}

func (x *TradingStatementEntry) GetBalance() *v1.Amount {
	if x != nil {
		return x.Balance
	}
	return nil
}

var File_meshtrade_reporting_account_report_v1_trading_statement_entry_proto protoreflect.FileDescriptor

const file_meshtrade_reporting_account_report_v1_trading_statement_entry_proto_rawDesc = "" +
	"\n" +
	"Cmeshtrade/reporting/account_report/v1/trading_statement_entry.proto\x12%meshtrade.reporting.account_report.v1\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x1emeshtrade/type/v1/amount.proto\"\x8e\x03\n" +
	"\x15TradingStatementEntry\x12E\n" +
	"\x10transaction_date\x18\x01 \x01(\v2\x1a.google.protobuf.TimestampR\x0ftransactionDate\x12%\n" +
	"\x0etransaction_id\x18\x02 \x01(\tR\rtransactionId\x12\x1d\n" +
	"\n" +
	"token_code\x18\x03 \x01(\tR\ttokenCode\x12 \n" +
	"\vdescription\x18\x04 \x01(\tR\vdescription\x121\n" +
	"\x06amount\x18\x05 \x01(\v2\x19.meshtrade.type.v1.AmountR\x06amount\x12/\n" +
	"\x05price\x18\x06 \x01(\v2\x19.meshtrade.type.v1.AmountR\x05price\x12-\n" +
	"\x04cost\x18\a \x01(\v2\x19.meshtrade.type.v1.AmountR\x04cost\x123\n" +
	"\abalance\x18\b \x01(\v2\x19.meshtrade.type.v1.AmountR\abalanceBy\n" +
	",co.meshtrade.api.reporting.account_report.v1ZIgithub.com/meshtrade/api/go/reporting/account_report/v1;account_report_v1b\x06proto3"

var (
	file_meshtrade_reporting_account_report_v1_trading_statement_entry_proto_rawDescOnce sync.Once
	file_meshtrade_reporting_account_report_v1_trading_statement_entry_proto_rawDescData []byte
)

func file_meshtrade_reporting_account_report_v1_trading_statement_entry_proto_rawDescGZIP() []byte {
	file_meshtrade_reporting_account_report_v1_trading_statement_entry_proto_rawDescOnce.Do(func() {
		file_meshtrade_reporting_account_report_v1_trading_statement_entry_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_meshtrade_reporting_account_report_v1_trading_statement_entry_proto_rawDesc), len(file_meshtrade_reporting_account_report_v1_trading_statement_entry_proto_rawDesc)))
	})
	return file_meshtrade_reporting_account_report_v1_trading_statement_entry_proto_rawDescData
}

var file_meshtrade_reporting_account_report_v1_trading_statement_entry_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_meshtrade_reporting_account_report_v1_trading_statement_entry_proto_goTypes = []any{
	(*TradingStatementEntry)(nil), // 0: meshtrade.reporting.account_report.v1.TradingStatementEntry
	(*timestamppb.Timestamp)(nil), // 1: google.protobuf.Timestamp
	(*v1.Amount)(nil),             // 2: meshtrade.type.v1.Amount
}
var file_meshtrade_reporting_account_report_v1_trading_statement_entry_proto_depIdxs = []int32{
	1, // 0: meshtrade.reporting.account_report.v1.TradingStatementEntry.transaction_date:type_name -> google.protobuf.Timestamp
	2, // 1: meshtrade.reporting.account_report.v1.TradingStatementEntry.amount:type_name -> meshtrade.type.v1.Amount
	2, // 2: meshtrade.reporting.account_report.v1.TradingStatementEntry.price:type_name -> meshtrade.type.v1.Amount
	2, // 3: meshtrade.reporting.account_report.v1.TradingStatementEntry.cost:type_name -> meshtrade.type.v1.Amount
	2, // 4: meshtrade.reporting.account_report.v1.TradingStatementEntry.balance:type_name -> meshtrade.type.v1.Amount
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_meshtrade_reporting_account_report_v1_trading_statement_entry_proto_init() }
func file_meshtrade_reporting_account_report_v1_trading_statement_entry_proto_init() {
	if File_meshtrade_reporting_account_report_v1_trading_statement_entry_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_meshtrade_reporting_account_report_v1_trading_statement_entry_proto_rawDesc), len(file_meshtrade_reporting_account_report_v1_trading_statement_entry_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_meshtrade_reporting_account_report_v1_trading_statement_entry_proto_goTypes,
		DependencyIndexes: file_meshtrade_reporting_account_report_v1_trading_statement_entry_proto_depIdxs,
		MessageInfos:      file_meshtrade_reporting_account_report_v1_trading_statement_entry_proto_msgTypes,
	}.Build()
	File_meshtrade_reporting_account_report_v1_trading_statement_entry_proto = out.File
	file_meshtrade_reporting_account_report_v1_trading_statement_entry_proto_goTypes = nil
	file_meshtrade_reporting_account_report_v1_trading_statement_entry_proto_depIdxs = nil
}
