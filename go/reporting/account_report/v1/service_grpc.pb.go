// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: meshtrade/reporting/account_report/v1/service.proto

package account_reportv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AccountReportService_GetAccountReport_FullMethodName      = "/meshtrade.reporting.account_report.v1.AccountReportService/GetAccountReport"
	AccountReportService_GetExcelAccountReport_FullMethodName = "/meshtrade.reporting.account_report.v1.AccountReportService/GetExcelAccountReport"
)

// AccountReportServiceClient is the client API for AccountReportService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// AccountReportService manages account report generation and export.
//
// This service allows clients to retrieve structured income reports
// and download them as Excel files. Reports are generated for a
// specified account over a given time range and denominated in
// a selected reporting currency.
//
// All operations require access to financial reporting permissions.
type AccountReportServiceClient interface {
	// Retrieves a structured income report for a specific account and time range.
	//
	// Parameters:
	// - account_num: Unique account identifier
	// - from: Start timestamp for the report period
	// - to: End timestamp for the report period
	// - reporting_currency_token: Token in which report values are denominated
	//
	// Returns:
	// - GetAccountReportRequest: Structured income report with earnings breakdown
	GetAccountReport(ctx context.Context, in *GetAccountReportRequest, opts ...grpc.CallOption) (*AccountReport, error)
	// Exports an income report to Excel format for download.
	//
	// Parameters:
	// - account_num: Unique account identifier
	// - from: Start timestamp for the report period
	// - to: End timestamp for the report period
	// - reporting_currency_token: Token in which report values are denominated
	//
	// Returns:
	// - GetExcelAccountReportRequest: Base64-encoded Excel file containing the report
	GetExcelAccountReport(ctx context.Context, in *GetExcelAccountReportRequest, opts ...grpc.CallOption) (*GetExcelAccountReportResponse, error)
}

type accountReportServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAccountReportServiceClient(cc grpc.ClientConnInterface) AccountReportServiceClient {
	return &accountReportServiceClient{cc}
}

func (c *accountReportServiceClient) GetAccountReport(ctx context.Context, in *GetAccountReportRequest, opts ...grpc.CallOption) (*AccountReport, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AccountReport)
	err := c.cc.Invoke(ctx, AccountReportService_GetAccountReport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountReportServiceClient) GetExcelAccountReport(ctx context.Context, in *GetExcelAccountReportRequest, opts ...grpc.CallOption) (*GetExcelAccountReportResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetExcelAccountReportResponse)
	err := c.cc.Invoke(ctx, AccountReportService_GetExcelAccountReport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountReportServiceServer is the server API for AccountReportService service.
// All implementations must embed UnimplementedAccountReportServiceServer
// for forward compatibility.
//
// AccountReportService manages account report generation and export.
//
// This service allows clients to retrieve structured income reports
// and download them as Excel files. Reports are generated for a
// specified account over a given time range and denominated in
// a selected reporting currency.
//
// All operations require access to financial reporting permissions.
type AccountReportServiceServer interface {
	// Retrieves a structured income report for a specific account and time range.
	//
	// Parameters:
	// - account_num: Unique account identifier
	// - from: Start timestamp for the report period
	// - to: End timestamp for the report period
	// - reporting_currency_token: Token in which report values are denominated
	//
	// Returns:
	// - GetAccountReportRequest: Structured income report with earnings breakdown
	GetAccountReport(context.Context, *GetAccountReportRequest) (*AccountReport, error)
	// Exports an income report to Excel format for download.
	//
	// Parameters:
	// - account_num: Unique account identifier
	// - from: Start timestamp for the report period
	// - to: End timestamp for the report period
	// - reporting_currency_token: Token in which report values are denominated
	//
	// Returns:
	// - GetExcelAccountReportRequest: Base64-encoded Excel file containing the report
	GetExcelAccountReport(context.Context, *GetExcelAccountReportRequest) (*GetExcelAccountReportResponse, error)
	mustEmbedUnimplementedAccountReportServiceServer()
}

// UnimplementedAccountReportServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAccountReportServiceServer struct{}

func (UnimplementedAccountReportServiceServer) GetAccountReport(context.Context, *GetAccountReportRequest) (*AccountReport, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountReport not implemented")
}
func (UnimplementedAccountReportServiceServer) GetExcelAccountReport(context.Context, *GetExcelAccountReportRequest) (*GetExcelAccountReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExcelAccountReport not implemented")
}
func (UnimplementedAccountReportServiceServer) mustEmbedUnimplementedAccountReportServiceServer() {}
func (UnimplementedAccountReportServiceServer) testEmbeddedByValue()                              {}

// UnsafeAccountReportServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccountReportServiceServer will
// result in compilation errors.
type UnsafeAccountReportServiceServer interface {
	mustEmbedUnimplementedAccountReportServiceServer()
}

func RegisterAccountReportServiceServer(s grpc.ServiceRegistrar, srv AccountReportServiceServer) {
	// If the following call pancis, it indicates UnimplementedAccountReportServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AccountReportService_ServiceDesc, srv)
}

func _AccountReportService_GetAccountReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountReportServiceServer).GetAccountReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountReportService_GetAccountReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountReportServiceServer).GetAccountReport(ctx, req.(*GetAccountReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountReportService_GetExcelAccountReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExcelAccountReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountReportServiceServer).GetExcelAccountReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountReportService_GetExcelAccountReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountReportServiceServer).GetExcelAccountReport(ctx, req.(*GetExcelAccountReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AccountReportService_ServiceDesc is the grpc.ServiceDesc for AccountReportService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AccountReportService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "meshtrade.reporting.account_report.v1.AccountReportService",
	HandlerType: (*AccountReportServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAccountReport",
			Handler:    _AccountReportService_GetAccountReport_Handler,
		},
		{
			MethodName: "GetExcelAccountReport",
			Handler:    _AccountReportService_GetExcelAccountReport_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "meshtrade/reporting/account_report/v1/service.proto",
}
