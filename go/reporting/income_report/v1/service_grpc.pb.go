// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: meshtrade/reporting/income_report/v1/service.proto

package income_reportv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	IncomeReportService_GetIncomeReport_FullMethodName      = "/meshtrade.reporting.income_report.v1.IncomeReportService/GetIncomeReport"
	IncomeReportService_GetExcelIncomeReport_FullMethodName = "/meshtrade.reporting.income_report.v1.IncomeReportService/GetExcelIncomeReport"
)

// IncomeReportServiceClient is the client API for IncomeReportService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// IncomeReportService manages income report generation and export.
//
// This service allows clients to retrieve structured income reports
// and download them as Excel files. Reports are generated for a
// specified account over a given time range and denominated in
// a selected reporting currency.
//
// All operations require access to financial reporting permissions.
type IncomeReportServiceClient interface {
	// Retrieves a structured income report for a specific account and time range.
	//
	// Parameters:
	// - account_num: Unique account identifier
	// - from: Start timestamp for the report period
	// - to: End timestamp for the report period
	// - reporting_currency_token: Token in which report values are denominated
	//
	// Returns:
	// - GetIncomeReportResponse: Structured income report with earnings breakdown
	GetIncomeReport(ctx context.Context, in *GetIncomeReportRequest, opts ...grpc.CallOption) (*GetIncomeReportResponse, error)
	// Exports an income report to Excel format for download.
	//
	// Parameters:
	// - account_num: Unique account identifier
	// - from: Start timestamp for the report period
	// - to: End timestamp for the report period
	// - reporting_currency_token: Token in which report values are denominated
	//
	// Returns:
	// - GetExcelIncomeReportResponse: Base64-encoded Excel file containing the report
	GetExcelIncomeReport(ctx context.Context, in *GetExcelIncomeReportRequest, opts ...grpc.CallOption) (*GetExcelIncomeReportResponse, error)
}

type incomeReportServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIncomeReportServiceClient(cc grpc.ClientConnInterface) IncomeReportServiceClient {
	return &incomeReportServiceClient{cc}
}

func (c *incomeReportServiceClient) GetIncomeReport(ctx context.Context, in *GetIncomeReportRequest, opts ...grpc.CallOption) (*GetIncomeReportResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetIncomeReportResponse)
	err := c.cc.Invoke(ctx, IncomeReportService_GetIncomeReport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *incomeReportServiceClient) GetExcelIncomeReport(ctx context.Context, in *GetExcelIncomeReportRequest, opts ...grpc.CallOption) (*GetExcelIncomeReportResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetExcelIncomeReportResponse)
	err := c.cc.Invoke(ctx, IncomeReportService_GetExcelIncomeReport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IncomeReportServiceServer is the server API for IncomeReportService service.
// All implementations must embed UnimplementedIncomeReportServiceServer
// for forward compatibility.
//
// IncomeReportService manages income report generation and export.
//
// This service allows clients to retrieve structured income reports
// and download them as Excel files. Reports are generated for a
// specified account over a given time range and denominated in
// a selected reporting currency.
//
// All operations require access to financial reporting permissions.
type IncomeReportServiceServer interface {
	// Retrieves a structured income report for a specific account and time range.
	//
	// Parameters:
	// - account_num: Unique account identifier
	// - from: Start timestamp for the report period
	// - to: End timestamp for the report period
	// - reporting_currency_token: Token in which report values are denominated
	//
	// Returns:
	// - GetIncomeReportResponse: Structured income report with earnings breakdown
	GetIncomeReport(context.Context, *GetIncomeReportRequest) (*GetIncomeReportResponse, error)
	// Exports an income report to Excel format for download.
	//
	// Parameters:
	// - account_num: Unique account identifier
	// - from: Start timestamp for the report period
	// - to: End timestamp for the report period
	// - reporting_currency_token: Token in which report values are denominated
	//
	// Returns:
	// - GetExcelIncomeReportResponse: Base64-encoded Excel file containing the report
	GetExcelIncomeReport(context.Context, *GetExcelIncomeReportRequest) (*GetExcelIncomeReportResponse, error)
	mustEmbedUnimplementedIncomeReportServiceServer()
}

// UnimplementedIncomeReportServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedIncomeReportServiceServer struct{}

func (UnimplementedIncomeReportServiceServer) GetIncomeReport(context.Context, *GetIncomeReportRequest) (*GetIncomeReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIncomeReport not implemented")
}
func (UnimplementedIncomeReportServiceServer) GetExcelIncomeReport(context.Context, *GetExcelIncomeReportRequest) (*GetExcelIncomeReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExcelIncomeReport not implemented")
}
func (UnimplementedIncomeReportServiceServer) mustEmbedUnimplementedIncomeReportServiceServer() {}
func (UnimplementedIncomeReportServiceServer) testEmbeddedByValue()                             {}

// UnsafeIncomeReportServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IncomeReportServiceServer will
// result in compilation errors.
type UnsafeIncomeReportServiceServer interface {
	mustEmbedUnimplementedIncomeReportServiceServer()
}

func RegisterIncomeReportServiceServer(s grpc.ServiceRegistrar, srv IncomeReportServiceServer) {
	// If the following call pancis, it indicates UnimplementedIncomeReportServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&IncomeReportService_ServiceDesc, srv)
}

func _IncomeReportService_GetIncomeReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIncomeReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IncomeReportServiceServer).GetIncomeReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IncomeReportService_GetIncomeReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IncomeReportServiceServer).GetIncomeReport(ctx, req.(*GetIncomeReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IncomeReportService_GetExcelIncomeReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExcelIncomeReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IncomeReportServiceServer).GetExcelIncomeReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IncomeReportService_GetExcelIncomeReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IncomeReportServiceServer).GetExcelIncomeReport(ctx, req.(*GetExcelIncomeReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IncomeReportService_ServiceDesc is the grpc.ServiceDesc for IncomeReportService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IncomeReportService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "meshtrade.reporting.income_report.v1.IncomeReportService",
	HandlerType: (*IncomeReportServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetIncomeReport",
			Handler:    _IncomeReportService_GetIncomeReport_Handler,
		},
		{
			MethodName: "GetExcelIncomeReport",
			Handler:    _IncomeReportService_GetExcelIncomeReport_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "meshtrade/reporting/income_report/v1/service.proto",
}
