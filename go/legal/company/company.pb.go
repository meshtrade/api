// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: api/proto/legal/company/company.proto

package company

import (
	client "github.com/meshtrade/api/go/client"
	legal "github.com/meshtrade/api/go/legal"
	location "github.com/meshtrade/api/go/location"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Company struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Registered name of the company (required field)
	RegisteredName string `protobuf:"bytes,1,opt,name=registeredName,proto3" json:"registeredName,omitempty"`
	// Tax reference number of the company
	TaxReferenceNumber string `protobuf:"bytes,2,opt,name=taxReferenceNumber,proto3" json:"taxReferenceNumber,omitempty"`
	// Registration number of the company
	RegistrationNumber string `protobuf:"bytes,3,opt,name=registrationNumber,proto3" json:"registrationNumber,omitempty"`
	// VAT (Value-Added Tax) registration number of the company
	VatRegistrationNumber string `protobuf:"bytes,4,opt,name=vatRegistrationNumber,proto3" json:"vatRegistrationNumber,omitempty"`
	// Public contact information of the company
	PublicContactInfo *legal.CompanyPublicContactInfo `protobuf:"bytes,5,opt,name=public_contact_info,json=publicContactInfo,proto3" json:"public_contact_info,omitempty"`
	// Details of the company representative
	CompanyRepresentative *legal.CompanyRepresentative `protobuf:"bytes,6,opt,name=companyRepresentative,proto3" json:"companyRepresentative,omitempty"`
	// Industry classification of the company
	IndustryClassification *IndustryClassification `protobuf:"bytes,7,opt,name=industryClassification,proto3" json:"industryClassification,omitempty"`
	// Stock exchange where the company is listed
	ListedExchange string `protobuf:"bytes,8,opt,name=listed_exchange,json=listedExchange,proto3" json:"listed_exchange,omitempty"`
	// Listing reference number for the stock exchange
	ListingReference string `protobuf:"bytes,9,opt,name=listing_reference,json=listingReference,proto3" json:"listing_reference,omitempty"`
	// Country code representing the country of incorporation
	CountryOfIncorporation string `protobuf:"bytes,10,opt,name=countryOfIncorporation,proto3" json:"countryOfIncorporation,omitempty"`
	// Legal form of the company (e.g., Proprietorship, Corporation)
	FormOfIncorporation legal.LegalForm `protobuf:"varint,11,opt,name=formOfIncorporation,proto3,enum=api.legal.LegalForm" json:"formOfIncorporation,omitempty"`
	// The company's registered address
	RegisteredAddress *location.Address `protobuf:"bytes,12,opt,name=registeredAddress,proto3" json:"registeredAddress,omitempty"`
	// The company's business address
	BusinessAddress *location.Address `protobuf:"bytes,13,opt,name=businessAddress,proto3" json:"businessAddress,omitempty"`
	// The company's head office address
	HeadOfficeAddress *location.Address `protobuf:"bytes,14,opt,name=headOfficeAddress,proto3" json:"headOfficeAddress,omitempty"`
	// List of individuals connected to the company, such as directors or stakeholders
	ConnectedIndividuals []*legal.ConnectedIndividual `protobuf:"bytes,15,rep,name=connectedIndividuals,proto3" json:"connectedIndividuals,omitempty"`
	// List of companies connected to the company
	ConnectedCompanies []*legal.ConnectedCompany `protobuf:"bytes,16,rep,name=connectedCompanies,proto3" json:"connectedCompanies,omitempty"`
	ClientType         []client.ClientType       `protobuf:"varint,17,rep,packed,name=clientType,proto3,enum=api.client.ClientType" json:"clientType,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *Company) Reset() {
	*x = Company{}
	mi := &file_api_proto_legal_company_company_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Company) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Company) ProtoMessage() {}

func (x *Company) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_legal_company_company_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Company.ProtoReflect.Descriptor instead.
func (*Company) Descriptor() ([]byte, []int) {
	return file_api_proto_legal_company_company_proto_rawDescGZIP(), []int{0}
}

func (x *Company) GetRegisteredName() string {
	if x != nil {
		return x.RegisteredName
	}
	return ""
}

func (x *Company) GetTaxReferenceNumber() string {
	if x != nil {
		return x.TaxReferenceNumber
	}
	return ""
}

func (x *Company) GetRegistrationNumber() string {
	if x != nil {
		return x.RegistrationNumber
	}
	return ""
}

func (x *Company) GetVatRegistrationNumber() string {
	if x != nil {
		return x.VatRegistrationNumber
	}
	return ""
}

func (x *Company) GetPublicContactInfo() *legal.CompanyPublicContactInfo {
	if x != nil {
		return x.PublicContactInfo
	}
	return nil
}

func (x *Company) GetCompanyRepresentative() *legal.CompanyRepresentative {
	if x != nil {
		return x.CompanyRepresentative
	}
	return nil
}

func (x *Company) GetIndustryClassification() *IndustryClassification {
	if x != nil {
		return x.IndustryClassification
	}
	return nil
}

func (x *Company) GetListedExchange() string {
	if x != nil {
		return x.ListedExchange
	}
	return ""
}

func (x *Company) GetListingReference() string {
	if x != nil {
		return x.ListingReference
	}
	return ""
}

func (x *Company) GetCountryOfIncorporation() string {
	if x != nil {
		return x.CountryOfIncorporation
	}
	return ""
}

func (x *Company) GetFormOfIncorporation() legal.LegalForm {
	if x != nil {
		return x.FormOfIncorporation
	}
	return legal.LegalForm(0)
}

func (x *Company) GetRegisteredAddress() *location.Address {
	if x != nil {
		return x.RegisteredAddress
	}
	return nil
}

func (x *Company) GetBusinessAddress() *location.Address {
	if x != nil {
		return x.BusinessAddress
	}
	return nil
}

func (x *Company) GetHeadOfficeAddress() *location.Address {
	if x != nil {
		return x.HeadOfficeAddress
	}
	return nil
}

func (x *Company) GetConnectedIndividuals() []*legal.ConnectedIndividual {
	if x != nil {
		return x.ConnectedIndividuals
	}
	return nil
}

func (x *Company) GetConnectedCompanies() []*legal.ConnectedCompany {
	if x != nil {
		return x.ConnectedCompanies
	}
	return nil
}

func (x *Company) GetClientType() []client.ClientType {
	if x != nil {
		return x.ClientType
	}
	return nil
}

var File_api_proto_legal_company_company_proto protoreflect.FileDescriptor

const file_api_proto_legal_company_company_proto_rawDesc = "" +
	"\n" +
	"%api/proto/legal/company/company.proto\x12\x11api.legal.company\x1a\x1fgoogle/protobuf/timestamp.proto\x1a api/proto/location/address.proto\x1a.api/proto/legal/companyPublicContactInfo.proto\x1a+api/proto/legal/companyRepresentative.proto\x1a&api/proto/legal/connectedCompany.proto\x1a)api/proto/legal/connectedIndividual.proto\x1a4api/proto/legal/company/industryClassification.proto\x1a\x1fapi/proto/legal/legalform.proto\x1a!api/proto/client/clientType.proto\"\xd1\b\n" +
	"\aCompany\x12&\n" +
	"\x0eregisteredName\x18\x01 \x01(\tR\x0eregisteredName\x12.\n" +
	"\x12taxReferenceNumber\x18\x02 \x01(\tR\x12taxReferenceNumber\x12.\n" +
	"\x12registrationNumber\x18\x03 \x01(\tR\x12registrationNumber\x124\n" +
	"\x15vatRegistrationNumber\x18\x04 \x01(\tR\x15vatRegistrationNumber\x12S\n" +
	"\x13public_contact_info\x18\x05 \x01(\v2#.api.legal.CompanyPublicContactInfoR\x11publicContactInfo\x12V\n" +
	"\x15companyRepresentative\x18\x06 \x01(\v2 .api.legal.CompanyRepresentativeR\x15companyRepresentative\x12a\n" +
	"\x16industryClassification\x18\a \x01(\v2).api.legal.company.IndustryClassificationR\x16industryClassification\x12'\n" +
	"\x0flisted_exchange\x18\b \x01(\tR\x0elistedExchange\x12+\n" +
	"\x11listing_reference\x18\t \x01(\tR\x10listingReference\x126\n" +
	"\x16countryOfIncorporation\x18\n" +
	" \x01(\tR\x16countryOfIncorporation\x12F\n" +
	"\x13formOfIncorporation\x18\v \x01(\x0e2\x14.api.legal.LegalFormR\x13formOfIncorporation\x12C\n" +
	"\x11registeredAddress\x18\f \x01(\v2\x15.api.location.AddressR\x11registeredAddress\x12?\n" +
	"\x0fbusinessAddress\x18\r \x01(\v2\x15.api.location.AddressR\x0fbusinessAddress\x12C\n" +
	"\x11headOfficeAddress\x18\x0e \x01(\v2\x15.api.location.AddressR\x11headOfficeAddress\x12R\n" +
	"\x14connectedIndividuals\x18\x0f \x03(\v2\x1e.api.legal.ConnectedIndividualR\x14connectedIndividuals\x12K\n" +
	"\x12connectedCompanies\x18\x10 \x03(\v2\x1b.api.legal.ConnectedCompanyR\x12connectedCompanies\x126\n" +
	"\n" +
	"clientType\x18\x11 \x03(\x0e2\x16.api.client.ClientTypeR\n" +
	"clientTypeB+Z)github.com/meshtrade/api/go/legal/companyb\x06proto3"

var (
	file_api_proto_legal_company_company_proto_rawDescOnce sync.Once
	file_api_proto_legal_company_company_proto_rawDescData []byte
)

func file_api_proto_legal_company_company_proto_rawDescGZIP() []byte {
	file_api_proto_legal_company_company_proto_rawDescOnce.Do(func() {
		file_api_proto_legal_company_company_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_api_proto_legal_company_company_proto_rawDesc), len(file_api_proto_legal_company_company_proto_rawDesc)))
	})
	return file_api_proto_legal_company_company_proto_rawDescData
}

var file_api_proto_legal_company_company_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_api_proto_legal_company_company_proto_goTypes = []any{
	(*Company)(nil),                        // 0: api.legal.company.Company
	(*legal.CompanyPublicContactInfo)(nil), // 1: api.legal.CompanyPublicContactInfo
	(*legal.CompanyRepresentative)(nil),    // 2: api.legal.CompanyRepresentative
	(*IndustryClassification)(nil),         // 3: api.legal.company.IndustryClassification
	(legal.LegalForm)(0),                   // 4: api.legal.LegalForm
	(*location.Address)(nil),               // 5: api.location.Address
	(*legal.ConnectedIndividual)(nil),      // 6: api.legal.ConnectedIndividual
	(*legal.ConnectedCompany)(nil),         // 7: api.legal.ConnectedCompany
	(client.ClientType)(0),                 // 8: api.client.ClientType
}
var file_api_proto_legal_company_company_proto_depIdxs = []int32{
	1,  // 0: api.legal.company.Company.public_contact_info:type_name -> api.legal.CompanyPublicContactInfo
	2,  // 1: api.legal.company.Company.companyRepresentative:type_name -> api.legal.CompanyRepresentative
	3,  // 2: api.legal.company.Company.industryClassification:type_name -> api.legal.company.IndustryClassification
	4,  // 3: api.legal.company.Company.formOfIncorporation:type_name -> api.legal.LegalForm
	5,  // 4: api.legal.company.Company.registeredAddress:type_name -> api.location.Address
	5,  // 5: api.legal.company.Company.businessAddress:type_name -> api.location.Address
	5,  // 6: api.legal.company.Company.headOfficeAddress:type_name -> api.location.Address
	6,  // 7: api.legal.company.Company.connectedIndividuals:type_name -> api.legal.ConnectedIndividual
	7,  // 8: api.legal.company.Company.connectedCompanies:type_name -> api.legal.ConnectedCompany
	8,  // 9: api.legal.company.Company.clientType:type_name -> api.client.ClientType
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_api_proto_legal_company_company_proto_init() }
func file_api_proto_legal_company_company_proto_init() {
	if File_api_proto_legal_company_company_proto != nil {
		return
	}
	file_api_proto_legal_company_industryClassification_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_api_proto_legal_company_company_proto_rawDesc), len(file_api_proto_legal_company_company_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_proto_legal_company_company_proto_goTypes,
		DependencyIndexes: file_api_proto_legal_company_company_proto_depIdxs,
		MessageInfos:      file_api_proto_legal_company_company_proto_msgTypes,
	}.Build()
	File_api_proto_legal_company_company_proto = out.File
	file_api_proto_legal_company_company_proto_goTypes = nil
	file_api_proto_legal_company_company_proto_depIdxs = nil
}
