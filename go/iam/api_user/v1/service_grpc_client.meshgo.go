// Code generated by protoc-gen-meshgo. DO NOT EDIT.
// source: meshtrade/iam/api_user/v1/service.proto
package api_userv1

import (
	context "context"
	fmt "fmt"
	log "github.com/rs/zerolog/log"
	trace "go.opentelemetry.io/otel/trace"
	grpc "google.golang.org/grpc"
)

// Ensure that ApiUserServiceGRPCClient implements the ApiUserService interface
var _ ApiUserService = &ApiUserServiceGRPCClient{}

// ApiUserServiceGRPCClient is a gRPC client implementation of the ApiUserService interface.
type ApiUserServiceGRPCClient struct {
	tracer     trace.Tracer
	grpcClient ApiUserServiceClient
}

func NewApiUserServiceGRPCClient(
	tracer trace.Tracer,
	grpcClientConnection *grpc.ClientConn,
) *ApiUserServiceGRPCClient {
	return &ApiUserServiceGRPCClient{
		tracer:     tracer,
		grpcClient: NewApiUserServiceClient(grpcClientConnection),
	}
}

func (g *ApiUserServiceGRPCClient) GetApiUser(ctx context.Context, request *GetApiUserRequest) (*APIUser, error) {
	ctx, span := g.tracer.Start(
		ctx,
		ApiUserServiceServiceProviderName+"GetApiUser",
	)
	defer span.End()

	// call given implementation of the adapted service provider interface
	getApiUserResponse, err := g.grpcClient.GetApiUser(ctx, request)
	if err != nil {
		log.Ctx(ctx).Error().Err(err).Msg("could not GetApiUser")
		return nil, fmt.Errorf("could not GetApiUser: %s", err)
	}

	return getApiUserResponse, nil
}

func (g *ApiUserServiceGRPCClient) CreateApiUser(ctx context.Context, request *CreateApiUserRequest) (*APIUser, error) {
	ctx, span := g.tracer.Start(
		ctx,
		ApiUserServiceServiceProviderName+"CreateApiUser",
	)
	defer span.End()

	// call given implementation of the adapted service provider interface
	createApiUserResponse, err := g.grpcClient.CreateApiUser(ctx, request)
	if err != nil {
		log.Ctx(ctx).Error().Err(err).Msg("could not CreateApiUser")
		return nil, fmt.Errorf("could not CreateApiUser: %s", err)
	}

	return createApiUserResponse, nil
}

func (g *ApiUserServiceGRPCClient) ListApiUsers(ctx context.Context, request *ListApiUsersRequest) (*ListApiUsersResponse, error) {
	ctx, span := g.tracer.Start(
		ctx,
		ApiUserServiceServiceProviderName+"ListApiUsers",
	)
	defer span.End()

	// call given implementation of the adapted service provider interface
	listApiUsersResponse, err := g.grpcClient.ListApiUsers(ctx, request)
	if err != nil {
		log.Ctx(ctx).Error().Err(err).Msg("could not ListApiUsers")
		return nil, fmt.Errorf("could not ListApiUsers: %s", err)
	}

	return listApiUsersResponse, nil
}

func (g *ApiUserServiceGRPCClient) SearchApiUsers(ctx context.Context, request *SearchApiUsersRequest) (*SearchApiUsersResponse, error) {
	ctx, span := g.tracer.Start(
		ctx,
		ApiUserServiceServiceProviderName+"SearchApiUsers",
	)
	defer span.End()

	// call given implementation of the adapted service provider interface
	searchApiUsersResponse, err := g.grpcClient.SearchApiUsers(ctx, request)
	if err != nil {
		log.Ctx(ctx).Error().Err(err).Msg("could not SearchApiUsers")
		return nil, fmt.Errorf("could not SearchApiUsers: %s", err)
	}

	return searchApiUsersResponse, nil
}

func (g *ApiUserServiceGRPCClient) ActivateApiUser(ctx context.Context, request *ActivateApiUserRequest) (*APIUser, error) {
	ctx, span := g.tracer.Start(
		ctx,
		ApiUserServiceServiceProviderName+"ActivateApiUser",
	)
	defer span.End()

	// call given implementation of the adapted service provider interface
	activateApiUserResponse, err := g.grpcClient.ActivateApiUser(ctx, request)
	if err != nil {
		log.Ctx(ctx).Error().Err(err).Msg("could not ActivateApiUser")
		return nil, fmt.Errorf("could not ActivateApiUser: %s", err)
	}

	return activateApiUserResponse, nil
}

func (g *ApiUserServiceGRPCClient) DeactivateApiUser(ctx context.Context, request *DeactivateApiUserRequest) (*APIUser, error) {
	ctx, span := g.tracer.Start(
		ctx,
		ApiUserServiceServiceProviderName+"DeactivateApiUser",
	)
	defer span.End()

	// call given implementation of the adapted service provider interface
	deactivateApiUserResponse, err := g.grpcClient.DeactivateApiUser(ctx, request)
	if err != nil {
		log.Ctx(ctx).Error().Err(err).Msg("could not DeactivateApiUser")
		return nil, fmt.Errorf("could not DeactivateApiUser: %s", err)
	}

	return deactivateApiUserResponse, nil
}

func (g *ApiUserServiceGRPCClient) GetApiUserByKeyHash(ctx context.Context, request *GetApiUserByKeyHashRequest) (*APIUser, error) {
	ctx, span := g.tracer.Start(
		ctx,
		ApiUserServiceServiceProviderName+"GetApiUserByKeyHash",
	)
	defer span.End()

	// call given implementation of the adapted service provider interface
	getApiUserByKeyHashResponse, err := g.grpcClient.GetApiUserByKeyHash(ctx, request)
	if err != nil {
		log.Ctx(ctx).Error().Err(err).Msg("could not GetApiUserByKeyHash")
		return nil, fmt.Errorf("could not GetApiUserByKeyHash: %s", err)
	}

	return getApiUserByKeyHashResponse, nil
}
