// Code generated by protoc-gen-meshgo. DO NOT EDIT.
// source: meshtrade/iam/api_user/v1/service.proto
package api_userv1

import (
	context "context"
	fmt "fmt"
	log "github.com/rs/zerolog/log"
	trace "go.opentelemetry.io/otel/trace"
	grpc "google.golang.org/grpc"
)

// Ensure that GRPCClientApiUserService implements the ApiUserService interface
var _ ApiUserService = &GRPCClientApiUserService{}

// GRPCClientApiUserService is a gRPC client implementation of the ApiUserService interface.
type GRPCClientApiUserService struct {
	tracer     trace.Tracer
	grpcClient ApiUserServiceClient
}

func NewGRPCClientApiUserService(
	tracer trace.Tracer,
	grpcClientConnection *grpc.ClientConn,
) *GRPCClientApiUserService {
	return &GRPCClientApiUserService{
		tracer:     tracer,
		grpcClient: NewApiUserServiceClient(grpcClientConnection),
	}
}

func (g *GRPCClientApiUserService) GetApiUser(ctx context.Context, request *GetApiUserRequest) (*APIUser, error) {
	ctx, span := g.tracer.Start(
		ctx,
		ApiUserServiceServiceProviderName+"GetApiUser",
	)
	defer span.End()

	// call given implementation of the adapted service provider interface
	getApiUserResponse, err := g.grpcClient.GetApiUser(ctx, request)
	if err != nil {
		log.Ctx(ctx).Error().Err(err).Msg("could not GetApiUser")
		return nil, fmt.Errorf("could not GetApiUser: %s", err)
	}

	return getApiUserResponse, nil
}

func (g *GRPCClientApiUserService) CreateApiUser(ctx context.Context, request *CreateApiUserRequest) (*APIUser, error) {
	ctx, span := g.tracer.Start(
		ctx,
		ApiUserServiceServiceProviderName+"CreateApiUser",
	)
	defer span.End()

	// call given implementation of the adapted service provider interface
	createApiUserResponse, err := g.grpcClient.CreateApiUser(ctx, request)
	if err != nil {
		log.Ctx(ctx).Error().Err(err).Msg("could not CreateApiUser")
		return nil, fmt.Errorf("could not CreateApiUser: %s", err)
	}

	return createApiUserResponse, nil
}

func (g *GRPCClientApiUserService) ListApiUsers(ctx context.Context, request *ListApiUsersRequest) (*ListApiUsersResponse, error) {
	ctx, span := g.tracer.Start(
		ctx,
		ApiUserServiceServiceProviderName+"ListApiUsers",
	)
	defer span.End()

	// call given implementation of the adapted service provider interface
	listApiUsersResponse, err := g.grpcClient.ListApiUsers(ctx, request)
	if err != nil {
		log.Ctx(ctx).Error().Err(err).Msg("could not ListApiUsers")
		return nil, fmt.Errorf("could not ListApiUsers: %s", err)
	}

	return listApiUsersResponse, nil
}

func (g *GRPCClientApiUserService) SearchApiUsers(ctx context.Context, request *SearchApiUsersRequest) (*SearchApiUsersResponse, error) {
	ctx, span := g.tracer.Start(
		ctx,
		ApiUserServiceServiceProviderName+"SearchApiUsers",
	)
	defer span.End()

	// call given implementation of the adapted service provider interface
	searchApiUsersResponse, err := g.grpcClient.SearchApiUsers(ctx, request)
	if err != nil {
		log.Ctx(ctx).Error().Err(err).Msg("could not SearchApiUsers")
		return nil, fmt.Errorf("could not SearchApiUsers: %s", err)
	}

	return searchApiUsersResponse, nil
}
