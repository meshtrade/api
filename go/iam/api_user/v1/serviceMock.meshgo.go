// Code generated by protoc-gen-meshgo. DO NOT EDIT.
// source: meshtrade/iam/api_user/v1/service.proto
package api_user_v1

import (
	context "context"
	sync "sync"
	testing "testing"
)

// Ensure that MockApiUserService implements the ApiUserService interface
var _ ApiUserService = &MockApiUserService{}

// MockApiUserService is a mock implementation of the ApiUserService interface.
type MockApiUserService struct {
	mutex                              sync.Mutex
	T                                  *testing.T
	GetApiUserFunc                     func(t *testing.T, m *MockApiUserService, ctx context.Context, request *GetApiUserRequest) (*APIUser, error)
	GetApiUserFuncInvocations          int
	CreateApiUserFunc                  func(t *testing.T, m *MockApiUserService, ctx context.Context, request *CreateApiUserRequest) (*APIUser, error)
	CreateApiUserFuncInvocations       int
	AssignRoleToAPIUserFunc            func(t *testing.T, m *MockApiUserService, ctx context.Context, request *AssignRoleToAPIUserRequest) (*APIUser, error)
	AssignRoleToAPIUserFuncInvocations int
	ListApiUsersFunc                   func(t *testing.T, m *MockApiUserService, ctx context.Context, request *ListApiUsersRequest) (*ListApiUsersResponse, error)
	ListApiUsersFuncInvocations        int
	SearchApiUsersFunc                 func(t *testing.T, m *MockApiUserService, ctx context.Context, request *SearchApiUsersRequest) (*SearchApiUsersResponse, error)
	SearchApiUsersFuncInvocations      int
	ActivateApiUserFunc                func(t *testing.T, m *MockApiUserService, ctx context.Context, request *ActivateApiUserRequest) (*APIUser, error)
	ActivateApiUserFuncInvocations     int
	DeactivateApiUserFunc              func(t *testing.T, m *MockApiUserService, ctx context.Context, request *DeactivateApiUserRequest) (*APIUser, error)
	DeactivateApiUserFuncInvocations   int
	GetApiUserByKeyHashFunc            func(t *testing.T, m *MockApiUserService, ctx context.Context, request *GetApiUserByKeyHashRequest) (*APIUser, error)
	GetApiUserByKeyHashFuncInvocations int
}

func (m *MockApiUserService) GetApiUser(ctx context.Context, request *GetApiUserRequest) (*APIUser, error) {
	m.mutex.Lock()
	m.GetApiUserFuncInvocations++
	m.mutex.Unlock()
	if m.GetApiUserFunc == nil {
		return nil, nil
	}
	return m.GetApiUserFunc(m.T, m, ctx, request)
}

func (m *MockApiUserService) CreateApiUser(ctx context.Context, request *CreateApiUserRequest) (*APIUser, error) {
	m.mutex.Lock()
	m.CreateApiUserFuncInvocations++
	m.mutex.Unlock()
	if m.CreateApiUserFunc == nil {
		return nil, nil
	}
	return m.CreateApiUserFunc(m.T, m, ctx, request)
}

func (m *MockApiUserService) AssignRoleToAPIUser(ctx context.Context, request *AssignRoleToAPIUserRequest) (*APIUser, error) {
	m.mutex.Lock()
	m.AssignRoleToAPIUserFuncInvocations++
	m.mutex.Unlock()
	if m.AssignRoleToAPIUserFunc == nil {
		return nil, nil
	}
	return m.AssignRoleToAPIUserFunc(m.T, m, ctx, request)
}

func (m *MockApiUserService) ListApiUsers(ctx context.Context, request *ListApiUsersRequest) (*ListApiUsersResponse, error) {
	m.mutex.Lock()
	m.ListApiUsersFuncInvocations++
	m.mutex.Unlock()
	if m.ListApiUsersFunc == nil {
		return nil, nil
	}
	return m.ListApiUsersFunc(m.T, m, ctx, request)
}

func (m *MockApiUserService) SearchApiUsers(ctx context.Context, request *SearchApiUsersRequest) (*SearchApiUsersResponse, error) {
	m.mutex.Lock()
	m.SearchApiUsersFuncInvocations++
	m.mutex.Unlock()
	if m.SearchApiUsersFunc == nil {
		return nil, nil
	}
	return m.SearchApiUsersFunc(m.T, m, ctx, request)
}

func (m *MockApiUserService) ActivateApiUser(ctx context.Context, request *ActivateApiUserRequest) (*APIUser, error) {
	m.mutex.Lock()
	m.ActivateApiUserFuncInvocations++
	m.mutex.Unlock()
	if m.ActivateApiUserFunc == nil {
		return nil, nil
	}
	return m.ActivateApiUserFunc(m.T, m, ctx, request)
}

func (m *MockApiUserService) DeactivateApiUser(ctx context.Context, request *DeactivateApiUserRequest) (*APIUser, error) {
	m.mutex.Lock()
	m.DeactivateApiUserFuncInvocations++
	m.mutex.Unlock()
	if m.DeactivateApiUserFunc == nil {
		return nil, nil
	}
	return m.DeactivateApiUserFunc(m.T, m, ctx, request)
}

func (m *MockApiUserService) GetApiUserByKeyHash(ctx context.Context, request *GetApiUserByKeyHashRequest) (*APIUser, error) {
	m.mutex.Lock()
	m.GetApiUserByKeyHashFuncInvocations++
	m.mutex.Unlock()
	if m.GetApiUserByKeyHashFunc == nil {
		return nil, nil
	}
	return m.GetApiUserByKeyHashFunc(m.T, m, ctx, request)
}
