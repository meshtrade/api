// Code generated by protoc-gen-meshgo. DO NOT EDIT.
// source: meshtrade/iam/api_user/v1/api_user.proto
package api_userv1

import (
	context "context"
	fmt "fmt"
	log "github.com/rs/zerolog/log"
	trace "go.opentelemetry.io/otel/trace"
	grpc "google.golang.org/grpc"
)

// Ensure that GRPCClientAPIUserService implements the APIUserService interface
var _ APIUserService = &GRPCClientAPIUserService{}

// GRPCClientAPIUserService is a gRPC client implementation of the APIUserService interface.
type GRPCClientAPIUserService struct {
	tracer     trace.Tracer
	grpcClient APIUserServiceClient
}

func NewGRPCClientAPIUserService(
	tracer trace.Tracer,
	grpcClientConnection *grpc.ClientConn,
) *GRPCClientAPIUserService {
	return &GRPCClientAPIUserService{
		tracer:     tracer,
		grpcClient: NewAPIUserServiceClient(grpcClientConnection),
	}
}

func (g *GRPCClientAPIUserService) GetAPIUser(ctx context.Context, request *GetAPIUserRequest) (*APIUser, error) {
	ctx, span := g.tracer.Start(
		ctx,
		APIUserServiceServiceProviderName+"GetAPIUser",
	)
	defer span.End()

	// call given implementation of the adapted service provider interface
	getAPIUserResponse, err := g.grpcClient.GetAPIUser(ctx, request)
	if err != nil {
		log.Ctx(ctx).Error().Err(err).Msg("could not GetAPIUser")
		return nil, fmt.Errorf("could not GetAPIUser: %s", err)
	}

	return getAPIUserResponse, nil
}

func (g *GRPCClientAPIUserService) GetAPIUserByKeyHash(ctx context.Context, request *GetAPIUserByKeyHashRequest) (*APIUser, error) {
	ctx, span := g.tracer.Start(
		ctx,
		APIUserServiceServiceProviderName+"GetAPIUserByKeyHash",
	)
	defer span.End()

	// call given implementation of the adapted service provider interface
	getAPIUserByKeyHashResponse, err := g.grpcClient.GetAPIUserByKeyHash(ctx, request)
	if err != nil {
		log.Ctx(ctx).Error().Err(err).Msg("could not GetAPIUserByKeyHash")
		return nil, fmt.Errorf("could not GetAPIUserByKeyHash: %s", err)
	}

	return getAPIUserByKeyHashResponse, nil
}
