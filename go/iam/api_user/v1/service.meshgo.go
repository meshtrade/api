// Code generated by protoc-gen-meshgo. DO NOT EDIT.
// source: meshtrade/iam/api_user/v1/service.proto
package api_userv1

import (
	context "context"
	grpc "github.com/meshtrade/api/go/grpc"
	config "github.com/meshtrade/api/go/grpc/config"
)

// ApiUserServiceClientInterface is a gRPC service for the ApiUserService service.
// It combines the service interface with resource management capabilities using
// the common BaseGRPCClient for consistent authentication, timeouts, and tracing.
//
// Example usage:
//
//	service, err := NewApiUserService(
//		config.WithAPIKey("your-api-key"),
//		config.WithGroup("groups/your-group-id"),
//		config.WithTimeout(30 * time.Second),
//	)
//	if err != nil {
//		log.Fatal(err)
//	}
//	defer service.Close()
type ApiUserServiceClientInterface interface {
	ApiUserService
	grpc.GRPCClient
}

// apiUserService is the internal implementation of the ApiUserServiceClientInterface interface.
// It embeds BaseGRPCClient to provide all common gRPC functionality.
type apiUserService struct {
	*grpc.BaseGRPCClient[ApiUserServiceClient]
}

// ensure apiUserService implements the ApiUserServiceClientInterface interface
var _ ApiUserServiceClientInterface = &apiUserService{}

// NewApiUserService creates a new gRPC service for the ApiUserService service.
// The service uses the common BaseGRPCClient for all functionality including
// connection management, authentication, timeouts, and distributed tracing.
//
// Parameters:
//   - opts: Functional options to configure the client
//
// Returns:
//   - ApiUserServiceClientInterface: Configured service instance
//   - error: Configuration or connection error
func NewApiUserService(opts ...config.ServiceOption) (ApiUserServiceClientInterface, error) {
	base, err := grpc.NewBaseGRPCClient(
		ApiUserServiceServiceProviderName,
		NewApiUserServiceClient,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return &apiUserService{BaseGRPCClient: base}, nil
}

// GetApiUser executes the GetApiUser RPC method with automatic
// timeout handling, distributed tracing, and authentication.
func (s *apiUserService) GetApiUser(ctx context.Context, request *GetApiUserRequest) (*APIUser, error) {
	return grpc.Execute(s.Executor(), ctx, "GetApiUser", func(ctx context.Context) (*APIUser, error) {
		return s.GrpcClient().GetApiUser(ctx, request)
	})
}

// CreateApiUser executes the CreateApiUser RPC method with automatic
// timeout handling, distributed tracing, and authentication.
func (s *apiUserService) CreateApiUser(ctx context.Context, request *CreateApiUserRequest) (*APIUser, error) {
	return grpc.Execute(s.Executor(), ctx, "CreateApiUser", func(ctx context.Context) (*APIUser, error) {
		return s.GrpcClient().CreateApiUser(ctx, request)
	})
}

// ListApiUsers executes the ListApiUsers RPC method with automatic
// timeout handling, distributed tracing, and authentication.
func (s *apiUserService) ListApiUsers(ctx context.Context, request *ListApiUsersRequest) (*ListApiUsersResponse, error) {
	return grpc.Execute(s.Executor(), ctx, "ListApiUsers", func(ctx context.Context) (*ListApiUsersResponse, error) {
		return s.GrpcClient().ListApiUsers(ctx, request)
	})
}

// SearchApiUsers executes the SearchApiUsers RPC method with automatic
// timeout handling, distributed tracing, and authentication.
func (s *apiUserService) SearchApiUsers(ctx context.Context, request *SearchApiUsersRequest) (*SearchApiUsersResponse, error) {
	return grpc.Execute(s.Executor(), ctx, "SearchApiUsers", func(ctx context.Context) (*SearchApiUsersResponse, error) {
		return s.GrpcClient().SearchApiUsers(ctx, request)
	})
}

// ActivateApiUser executes the ActivateApiUser RPC method with automatic
// timeout handling, distributed tracing, and authentication.
func (s *apiUserService) ActivateApiUser(ctx context.Context, request *ActivateApiUserRequest) (*APIUser, error) {
	return grpc.Execute(s.Executor(), ctx, "ActivateApiUser", func(ctx context.Context) (*APIUser, error) {
		return s.GrpcClient().ActivateApiUser(ctx, request)
	})
}

// DeactivateApiUser executes the DeactivateApiUser RPC method with automatic
// timeout handling, distributed tracing, and authentication.
func (s *apiUserService) DeactivateApiUser(ctx context.Context, request *DeactivateApiUserRequest) (*APIUser, error) {
	return grpc.Execute(s.Executor(), ctx, "DeactivateApiUser", func(ctx context.Context) (*APIUser, error) {
		return s.GrpcClient().DeactivateApiUser(ctx, request)
	})
}

// GetApiUserByKeyHash executes the GetApiUserByKeyHash RPC method with automatic
// timeout handling, distributed tracing, and authentication.
func (s *apiUserService) GetApiUserByKeyHash(ctx context.Context, request *GetApiUserByKeyHashRequest) (*APIUser, error) {
	return grpc.Execute(s.Executor(), ctx, "GetApiUserByKeyHash", func(ctx context.Context) (*APIUser, error) {
		return s.GrpcClient().GetApiUserByKeyHash(ctx, request)
	})
}
