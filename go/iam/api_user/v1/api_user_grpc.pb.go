// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: meshtrade/iam/api_user/v1/api_user.proto

package api_userv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	APIUserService_GetAPIUser_FullMethodName          = "/meshtrade.iam.api_user.v1.APIUserService/GetAPIUser"
	APIUserService_GetAPIUserByKeyHash_FullMethodName = "/meshtrade.iam.api_user.v1.APIUserService/GetAPIUserByKeyHash"
)

// APIUserServiceClient is the client API for APIUserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type APIUserServiceClient interface {
	GetAPIUser(ctx context.Context, in *GetAPIUserRequest, opts ...grpc.CallOption) (*APIUser, error)
	GetAPIUserByKeyHash(ctx context.Context, in *GetAPIUserByKeyHashRequest, opts ...grpc.CallOption) (*APIUser, error)
}

type aPIUserServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAPIUserServiceClient(cc grpc.ClientConnInterface) APIUserServiceClient {
	return &aPIUserServiceClient{cc}
}

func (c *aPIUserServiceClient) GetAPIUser(ctx context.Context, in *GetAPIUserRequest, opts ...grpc.CallOption) (*APIUser, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(APIUser)
	err := c.cc.Invoke(ctx, APIUserService_GetAPIUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIUserServiceClient) GetAPIUserByKeyHash(ctx context.Context, in *GetAPIUserByKeyHashRequest, opts ...grpc.CallOption) (*APIUser, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(APIUser)
	err := c.cc.Invoke(ctx, APIUserService_GetAPIUserByKeyHash_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// APIUserServiceServer is the server API for APIUserService service.
// All implementations must embed UnimplementedAPIUserServiceServer
// for forward compatibility.
type APIUserServiceServer interface {
	GetAPIUser(context.Context, *GetAPIUserRequest) (*APIUser, error)
	GetAPIUserByKeyHash(context.Context, *GetAPIUserByKeyHashRequest) (*APIUser, error)
	mustEmbedUnimplementedAPIUserServiceServer()
}

// UnimplementedAPIUserServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAPIUserServiceServer struct{}

func (UnimplementedAPIUserServiceServer) GetAPIUser(context.Context, *GetAPIUserRequest) (*APIUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAPIUser not implemented")
}
func (UnimplementedAPIUserServiceServer) GetAPIUserByKeyHash(context.Context, *GetAPIUserByKeyHashRequest) (*APIUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAPIUserByKeyHash not implemented")
}
func (UnimplementedAPIUserServiceServer) mustEmbedUnimplementedAPIUserServiceServer() {}
func (UnimplementedAPIUserServiceServer) testEmbeddedByValue()                        {}

// UnsafeAPIUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to APIUserServiceServer will
// result in compilation errors.
type UnsafeAPIUserServiceServer interface {
	mustEmbedUnimplementedAPIUserServiceServer()
}

func RegisterAPIUserServiceServer(s grpc.ServiceRegistrar, srv APIUserServiceServer) {
	// If the following call pancis, it indicates UnimplementedAPIUserServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&APIUserService_ServiceDesc, srv)
}

func _APIUserService_GetAPIUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAPIUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIUserServiceServer).GetAPIUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIUserService_GetAPIUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIUserServiceServer).GetAPIUser(ctx, req.(*GetAPIUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIUserService_GetAPIUserByKeyHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAPIUserByKeyHashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIUserServiceServer).GetAPIUserByKeyHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIUserService_GetAPIUserByKeyHash_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIUserServiceServer).GetAPIUserByKeyHash(ctx, req.(*GetAPIUserByKeyHashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// APIUserService_ServiceDesc is the grpc.ServiceDesc for APIUserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var APIUserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "meshtrade.iam.api_user.v1.APIUserService",
	HandlerType: (*APIUserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAPIUser",
			Handler:    _APIUserService_GetAPIUser_Handler,
		},
		{
			MethodName: "GetAPIUserByKeyHash",
			Handler:    _APIUserService_GetAPIUserByKeyHash_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "meshtrade/iam/api_user/v1/api_user.proto",
}
