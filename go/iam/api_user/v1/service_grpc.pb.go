// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: meshtrade/iam/api_user/v1/service.proto

package api_user_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ApiUserService_GetApiUser_FullMethodName          = "/meshtrade.iam.api_user.v1.ApiUserService/GetApiUser"
	ApiUserService_CreateApiUser_FullMethodName       = "/meshtrade.iam.api_user.v1.ApiUserService/CreateApiUser"
	ApiUserService_AssignRoleToAPIUser_FullMethodName = "/meshtrade.iam.api_user.v1.ApiUserService/AssignRoleToAPIUser"
	ApiUserService_ListApiUsers_FullMethodName        = "/meshtrade.iam.api_user.v1.ApiUserService/ListApiUsers"
	ApiUserService_SearchApiUsers_FullMethodName      = "/meshtrade.iam.api_user.v1.ApiUserService/SearchApiUsers"
	ApiUserService_ActivateApiUser_FullMethodName     = "/meshtrade.iam.api_user.v1.ApiUserService/ActivateApiUser"
	ApiUserService_DeactivateApiUser_FullMethodName   = "/meshtrade.iam.api_user.v1.ApiUserService/DeactivateApiUser"
	ApiUserService_GetApiUserByKeyHash_FullMethodName = "/meshtrade.iam.api_user.v1.ApiUserService/GetApiUserByKeyHash"
)

// ApiUserServiceClient is the client API for ApiUserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ApiUserService manages API user lifecycle and authentication credentials.
//
// API users represent automated clients that can authenticate with API keys
// and perform operations within a specific group context. Each API user has:
// - A unique identifier and display name
// - Group ownership for resource isolation
// - Role-based permissions for authorization
// - Active/inactive state for access control
//
// All operations require IAM domain permissions and operate within
// the authenticated group context.
type ApiUserServiceClient interface {
	// Retrieves a single API user by its unique identifier.
	GetApiUser(ctx context.Context, in *GetApiUserRequest, opts ...grpc.CallOption) (*APIUser, error)
	// Creates a new API user with the specified configuration.
	//
	// The API user will be created in the authenticated group context
	// and assigned the provided roles. The system generates a unique
	// identifier and API key for authentication.
	CreateApiUser(ctx context.Context, in *CreateApiUserRequest, opts ...grpc.CallOption) (*APIUser, error)
	// Assigns a role to an existing api user within the authenticated group context.
	//
	// The role assignment enables the api user to perform operations according
	// to the permissions associated with that role within the group hierarchy.
	AssignRoleToAPIUser(ctx context.Context, in *AssignRoleToAPIUserRequest, opts ...grpc.CallOption) (*APIUser, error)
	// Lists all API users in the authenticated group context.
	//
	// Returns all API users that belong to the current group,
	// regardless of their active/inactive state.
	ListApiUsers(ctx context.Context, in *ListApiUsersRequest, opts ...grpc.CallOption) (*ListApiUsersResponse, error)
	// Searches API users using display name filtering.
	//
	// Performs substring matching on API user display names
	// within the authenticated group context.
	SearchApiUsers(ctx context.Context, in *SearchApiUsersRequest, opts ...grpc.CallOption) (*SearchApiUsersResponse, error)
	// Activates an API user, enabling API key authentication.
	//
	// Changes the API user state to active, allowing the associated
	// API key to be used for authentication and authorization.
	ActivateApiUser(ctx context.Context, in *ActivateApiUserRequest, opts ...grpc.CallOption) (*APIUser, error)
	// Deactivates an API user, disabling API key authentication.
	//
	// Changes the API user state to inactive, preventing the associated
	// API key from being used for authentication.
	DeactivateApiUser(ctx context.Context, in *DeactivateApiUserRequest, opts ...grpc.CallOption) (*APIUser, error)
	// Retrieves an API user using its API key hash.
	//
	// This method is used for authentication flows to lookup
	// an API user based on the hash of their API key.
	GetApiUserByKeyHash(ctx context.Context, in *GetApiUserByKeyHashRequest, opts ...grpc.CallOption) (*APIUser, error)
}

type apiUserServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewApiUserServiceClient(cc grpc.ClientConnInterface) ApiUserServiceClient {
	return &apiUserServiceClient{cc}
}

func (c *apiUserServiceClient) GetApiUser(ctx context.Context, in *GetApiUserRequest, opts ...grpc.CallOption) (*APIUser, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(APIUser)
	err := c.cc.Invoke(ctx, ApiUserService_GetApiUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiUserServiceClient) CreateApiUser(ctx context.Context, in *CreateApiUserRequest, opts ...grpc.CallOption) (*APIUser, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(APIUser)
	err := c.cc.Invoke(ctx, ApiUserService_CreateApiUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiUserServiceClient) AssignRoleToAPIUser(ctx context.Context, in *AssignRoleToAPIUserRequest, opts ...grpc.CallOption) (*APIUser, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(APIUser)
	err := c.cc.Invoke(ctx, ApiUserService_AssignRoleToAPIUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiUserServiceClient) ListApiUsers(ctx context.Context, in *ListApiUsersRequest, opts ...grpc.CallOption) (*ListApiUsersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListApiUsersResponse)
	err := c.cc.Invoke(ctx, ApiUserService_ListApiUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiUserServiceClient) SearchApiUsers(ctx context.Context, in *SearchApiUsersRequest, opts ...grpc.CallOption) (*SearchApiUsersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchApiUsersResponse)
	err := c.cc.Invoke(ctx, ApiUserService_SearchApiUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiUserServiceClient) ActivateApiUser(ctx context.Context, in *ActivateApiUserRequest, opts ...grpc.CallOption) (*APIUser, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(APIUser)
	err := c.cc.Invoke(ctx, ApiUserService_ActivateApiUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiUserServiceClient) DeactivateApiUser(ctx context.Context, in *DeactivateApiUserRequest, opts ...grpc.CallOption) (*APIUser, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(APIUser)
	err := c.cc.Invoke(ctx, ApiUserService_DeactivateApiUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiUserServiceClient) GetApiUserByKeyHash(ctx context.Context, in *GetApiUserByKeyHashRequest, opts ...grpc.CallOption) (*APIUser, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(APIUser)
	err := c.cc.Invoke(ctx, ApiUserService_GetApiUserByKeyHash_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApiUserServiceServer is the server API for ApiUserService service.
// All implementations must embed UnimplementedApiUserServiceServer
// for forward compatibility.
//
// ApiUserService manages API user lifecycle and authentication credentials.
//
// API users represent automated clients that can authenticate with API keys
// and perform operations within a specific group context. Each API user has:
// - A unique identifier and display name
// - Group ownership for resource isolation
// - Role-based permissions for authorization
// - Active/inactive state for access control
//
// All operations require IAM domain permissions and operate within
// the authenticated group context.
type ApiUserServiceServer interface {
	// Retrieves a single API user by its unique identifier.
	GetApiUser(context.Context, *GetApiUserRequest) (*APIUser, error)
	// Creates a new API user with the specified configuration.
	//
	// The API user will be created in the authenticated group context
	// and assigned the provided roles. The system generates a unique
	// identifier and API key for authentication.
	CreateApiUser(context.Context, *CreateApiUserRequest) (*APIUser, error)
	// Assigns a role to an existing api user within the authenticated group context.
	//
	// The role assignment enables the api user to perform operations according
	// to the permissions associated with that role within the group hierarchy.
	AssignRoleToAPIUser(context.Context, *AssignRoleToAPIUserRequest) (*APIUser, error)
	// Lists all API users in the authenticated group context.
	//
	// Returns all API users that belong to the current group,
	// regardless of their active/inactive state.
	ListApiUsers(context.Context, *ListApiUsersRequest) (*ListApiUsersResponse, error)
	// Searches API users using display name filtering.
	//
	// Performs substring matching on API user display names
	// within the authenticated group context.
	SearchApiUsers(context.Context, *SearchApiUsersRequest) (*SearchApiUsersResponse, error)
	// Activates an API user, enabling API key authentication.
	//
	// Changes the API user state to active, allowing the associated
	// API key to be used for authentication and authorization.
	ActivateApiUser(context.Context, *ActivateApiUserRequest) (*APIUser, error)
	// Deactivates an API user, disabling API key authentication.
	//
	// Changes the API user state to inactive, preventing the associated
	// API key from being used for authentication.
	DeactivateApiUser(context.Context, *DeactivateApiUserRequest) (*APIUser, error)
	// Retrieves an API user using its API key hash.
	//
	// This method is used for authentication flows to lookup
	// an API user based on the hash of their API key.
	GetApiUserByKeyHash(context.Context, *GetApiUserByKeyHashRequest) (*APIUser, error)
	mustEmbedUnimplementedApiUserServiceServer()
}

// UnimplementedApiUserServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedApiUserServiceServer struct{}

func (UnimplementedApiUserServiceServer) GetApiUser(context.Context, *GetApiUserRequest) (*APIUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApiUser not implemented")
}
func (UnimplementedApiUserServiceServer) CreateApiUser(context.Context, *CreateApiUserRequest) (*APIUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateApiUser not implemented")
}
func (UnimplementedApiUserServiceServer) AssignRoleToAPIUser(context.Context, *AssignRoleToAPIUserRequest) (*APIUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignRoleToAPIUser not implemented")
}
func (UnimplementedApiUserServiceServer) ListApiUsers(context.Context, *ListApiUsersRequest) (*ListApiUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListApiUsers not implemented")
}
func (UnimplementedApiUserServiceServer) SearchApiUsers(context.Context, *SearchApiUsersRequest) (*SearchApiUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchApiUsers not implemented")
}
func (UnimplementedApiUserServiceServer) ActivateApiUser(context.Context, *ActivateApiUserRequest) (*APIUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActivateApiUser not implemented")
}
func (UnimplementedApiUserServiceServer) DeactivateApiUser(context.Context, *DeactivateApiUserRequest) (*APIUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeactivateApiUser not implemented")
}
func (UnimplementedApiUserServiceServer) GetApiUserByKeyHash(context.Context, *GetApiUserByKeyHashRequest) (*APIUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApiUserByKeyHash not implemented")
}
func (UnimplementedApiUserServiceServer) mustEmbedUnimplementedApiUserServiceServer() {}
func (UnimplementedApiUserServiceServer) testEmbeddedByValue()                        {}

// UnsafeApiUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApiUserServiceServer will
// result in compilation errors.
type UnsafeApiUserServiceServer interface {
	mustEmbedUnimplementedApiUserServiceServer()
}

func RegisterApiUserServiceServer(s grpc.ServiceRegistrar, srv ApiUserServiceServer) {
	// If the following call pancis, it indicates UnimplementedApiUserServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ApiUserService_ServiceDesc, srv)
}

func _ApiUserService_GetApiUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetApiUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiUserServiceServer).GetApiUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiUserService_GetApiUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiUserServiceServer).GetApiUser(ctx, req.(*GetApiUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiUserService_CreateApiUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateApiUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiUserServiceServer).CreateApiUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiUserService_CreateApiUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiUserServiceServer).CreateApiUser(ctx, req.(*CreateApiUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiUserService_AssignRoleToAPIUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignRoleToAPIUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiUserServiceServer).AssignRoleToAPIUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiUserService_AssignRoleToAPIUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiUserServiceServer).AssignRoleToAPIUser(ctx, req.(*AssignRoleToAPIUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiUserService_ListApiUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListApiUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiUserServiceServer).ListApiUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiUserService_ListApiUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiUserServiceServer).ListApiUsers(ctx, req.(*ListApiUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiUserService_SearchApiUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchApiUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiUserServiceServer).SearchApiUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiUserService_SearchApiUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiUserServiceServer).SearchApiUsers(ctx, req.(*SearchApiUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiUserService_ActivateApiUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivateApiUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiUserServiceServer).ActivateApiUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiUserService_ActivateApiUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiUserServiceServer).ActivateApiUser(ctx, req.(*ActivateApiUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiUserService_DeactivateApiUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeactivateApiUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiUserServiceServer).DeactivateApiUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiUserService_DeactivateApiUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiUserServiceServer).DeactivateApiUser(ctx, req.(*DeactivateApiUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiUserService_GetApiUserByKeyHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetApiUserByKeyHashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiUserServiceServer).GetApiUserByKeyHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiUserService_GetApiUserByKeyHash_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiUserServiceServer).GetApiUserByKeyHash(ctx, req.(*GetApiUserByKeyHashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ApiUserService_ServiceDesc is the grpc.ServiceDesc for ApiUserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ApiUserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "meshtrade.iam.api_user.v1.ApiUserService",
	HandlerType: (*ApiUserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetApiUser",
			Handler:    _ApiUserService_GetApiUser_Handler,
		},
		{
			MethodName: "CreateApiUser",
			Handler:    _ApiUserService_CreateApiUser_Handler,
		},
		{
			MethodName: "AssignRoleToAPIUser",
			Handler:    _ApiUserService_AssignRoleToAPIUser_Handler,
		},
		{
			MethodName: "ListApiUsers",
			Handler:    _ApiUserService_ListApiUsers_Handler,
		},
		{
			MethodName: "SearchApiUsers",
			Handler:    _ApiUserService_SearchApiUsers_Handler,
		},
		{
			MethodName: "ActivateApiUser",
			Handler:    _ApiUserService_ActivateApiUser_Handler,
		},
		{
			MethodName: "DeactivateApiUser",
			Handler:    _ApiUserService_DeactivateApiUser_Handler,
		},
		{
			MethodName: "GetApiUserByKeyHash",
			Handler:    _ApiUserService_GetApiUserByKeyHash_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "meshtrade/iam/api_user/v1/service.proto",
}
