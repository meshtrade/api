// Code generated by protoc-gen-meshgo. DO NOT EDIT.
// source: meshtrade/iam/role/v1/service.proto
package rolev1

import (
	context "context"
	fmt "fmt"
	log "github.com/rs/zerolog/log"
	trace "go.opentelemetry.io/otel/trace"
	grpc "google.golang.org/grpc"
)

// Ensure that GRPCClientRoleService implements the RoleService interface
var _ RoleService = &GRPCClientRoleService{}

// GRPCClientRoleService is a gRPC client implementation of the RoleService interface.
type GRPCClientRoleService struct {
	tracer     trace.Tracer
	grpcClient RoleServiceClient
}

func NewGRPCClientRoleService(
	tracer trace.Tracer,
	grpcClientConnection *grpc.ClientConn,
) *GRPCClientRoleService {
	return &GRPCClientRoleService{
		tracer:     tracer,
		grpcClient: NewRoleServiceClient(grpcClientConnection),
	}
}

func (g *GRPCClientRoleService) Get(ctx context.Context, request *GetRoleRequest) (*GetRoleResponse, error) {
	ctx, span := g.tracer.Start(
		ctx,
		RoleServiceServiceProviderName+"Get",
	)
	defer span.End()

	// call given implementation of the adapted service provider interface
	getResponse, err := g.grpcClient.Get(ctx, request)
	if err != nil {
		log.Ctx(ctx).Error().Err(err).Msg("could not Get")
		return nil, fmt.Errorf("could not Get: %s", err)
	}

	return getResponse, nil
}
