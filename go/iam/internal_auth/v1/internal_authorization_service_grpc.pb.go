// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: meshtrade/iam/internal_auth/v1/internal_authorization_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	InternalAuthorizationService_CheckAuthorization_FullMethodName = "/meshtrade.iam.internal_auth.v1.InternalAuthorizationService/CheckAuthorization"
	InternalAuthorizationService_HealthCheck_FullMethodName        = "/meshtrade.iam.internal_auth.v1.InternalAuthorizationService/HealthCheck"
)

// InternalAuthorizationServiceClient is the client API for InternalAuthorizationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// InternalAuthorizationService provides authorization services for internal communication
// between microservices within the mesh. This service receives authorization requests
// from the api-gateway-sidecar and delegates to the main authoriser app's business logic.
//
// This protocol is designed specifically for internal service-to-service communication
// and should not be exposed to external clients.
type InternalAuthorizationServiceClient interface {
	// CheckAuthorization performs authorization checks for internal service requests.
	// This method receives authorization requests from the sidecar and returns
	// authorization decisions from the main authoriser application's business logic.
	CheckAuthorization(ctx context.Context, in *CheckAuthorizationRequest, opts ...grpc.CallOption) (*CheckAuthorizationResponse, error)
	// HealthCheck provides health checking for the internal authorization service.
	// This allows the sidecar to verify connectivity and readiness of the main
	// authoriser application.
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
}

type internalAuthorizationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInternalAuthorizationServiceClient(cc grpc.ClientConnInterface) InternalAuthorizationServiceClient {
	return &internalAuthorizationServiceClient{cc}
}

func (c *internalAuthorizationServiceClient) CheckAuthorization(ctx context.Context, in *CheckAuthorizationRequest, opts ...grpc.CallOption) (*CheckAuthorizationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckAuthorizationResponse)
	err := c.cc.Invoke(ctx, InternalAuthorizationService_CheckAuthorization_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalAuthorizationServiceClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, InternalAuthorizationService_HealthCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InternalAuthorizationServiceServer is the server API for InternalAuthorizationService service.
// All implementations must embed UnimplementedInternalAuthorizationServiceServer
// for forward compatibility.
//
// InternalAuthorizationService provides authorization services for internal communication
// between microservices within the mesh. This service receives authorization requests
// from the api-gateway-sidecar and delegates to the main authoriser app's business logic.
//
// This protocol is designed specifically for internal service-to-service communication
// and should not be exposed to external clients.
type InternalAuthorizationServiceServer interface {
	// CheckAuthorization performs authorization checks for internal service requests.
	// This method receives authorization requests from the sidecar and returns
	// authorization decisions from the main authoriser application's business logic.
	CheckAuthorization(context.Context, *CheckAuthorizationRequest) (*CheckAuthorizationResponse, error)
	// HealthCheck provides health checking for the internal authorization service.
	// This allows the sidecar to verify connectivity and readiness of the main
	// authoriser application.
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	mustEmbedUnimplementedInternalAuthorizationServiceServer()
}

// UnimplementedInternalAuthorizationServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedInternalAuthorizationServiceServer struct{}

func (UnimplementedInternalAuthorizationServiceServer) CheckAuthorization(context.Context, *CheckAuthorizationRequest) (*CheckAuthorizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckAuthorization not implemented")
}
func (UnimplementedInternalAuthorizationServiceServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedInternalAuthorizationServiceServer) mustEmbedUnimplementedInternalAuthorizationServiceServer() {
}
func (UnimplementedInternalAuthorizationServiceServer) testEmbeddedByValue() {}

// UnsafeInternalAuthorizationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InternalAuthorizationServiceServer will
// result in compilation errors.
type UnsafeInternalAuthorizationServiceServer interface {
	mustEmbedUnimplementedInternalAuthorizationServiceServer()
}

func RegisterInternalAuthorizationServiceServer(s grpc.ServiceRegistrar, srv InternalAuthorizationServiceServer) {
	// If the following call pancis, it indicates UnimplementedInternalAuthorizationServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&InternalAuthorizationService_ServiceDesc, srv)
}

func _InternalAuthorizationService_CheckAuthorization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckAuthorizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalAuthorizationServiceServer).CheckAuthorization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InternalAuthorizationService_CheckAuthorization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalAuthorizationServiceServer).CheckAuthorization(ctx, req.(*CheckAuthorizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalAuthorizationService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalAuthorizationServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InternalAuthorizationService_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalAuthorizationServiceServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InternalAuthorizationService_ServiceDesc is the grpc.ServiceDesc for InternalAuthorizationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InternalAuthorizationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "meshtrade.iam.internal_auth.v1.InternalAuthorizationService",
	HandlerType: (*InternalAuthorizationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckAuthorization",
			Handler:    _InternalAuthorizationService_CheckAuthorization_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _InternalAuthorizationService_HealthCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "meshtrade/iam/internal_auth/v1/internal_authorization_service.proto",
}
