// Code generated by protoc-gen-meshgo. DO NOT EDIT.
// source: meshtrade/iam/user/v1/service.proto
package userv1

import (
	context "context"
	fmt "fmt"
	log "github.com/rs/zerolog/log"
	trace "go.opentelemetry.io/otel/trace"
	grpc "google.golang.org/grpc"
)

// Ensure that GRPCClientUserService implements the UserService interface
var _ UserService = &GRPCClientUserService{}

// GRPCClientUserService is a gRPC client implementation of the UserService interface.
type GRPCClientUserService struct {
	tracer     trace.Tracer
	grpcClient UserServiceClient
}

func NewGRPCClientUserService(
	tracer trace.Tracer,
	grpcClientConnection *grpc.ClientConn,
) *GRPCClientUserService {
	return &GRPCClientUserService{
		tracer:     tracer,
		grpcClient: NewUserServiceClient(grpcClientConnection),
	}
}

func (g *GRPCClientUserService) AssignRoleToUser(ctx context.Context, request *AssignRoleToUserRequest) (*User, error) {
	ctx, span := g.tracer.Start(
		ctx,
		UserServiceServiceProviderName+"AssignRoleToUser",
	)
	defer span.End()

	// call given implementation of the adapted service provider interface
	assignRoleToUserResponse, err := g.grpcClient.AssignRoleToUser(ctx, request)
	if err != nil {
		log.Ctx(ctx).Error().Err(err).Msg("could not AssignRoleToUser")
		return nil, fmt.Errorf("could not AssignRoleToUser: %s", err)
	}

	return assignRoleToUserResponse, nil
}
