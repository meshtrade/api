// Code generated by protoc-gen-meshgo. DO NOT EDIT.
// source: meshtrade/iam/user/v1/service.proto
package userv1

import (
	"context"
	"errors"
	fmt "fmt"
	"time"

	"github.com/meshtrade/api/go/common"
	trace "go.opentelemetry.io/otel/trace"
	"go.opentelemetry.io/otel/trace/noop"
	grpc "google.golang.org/grpc"
	"google.golang.org/grpc/credentials"
	"google.golang.org/grpc/credentials/insecure"
	"google.golang.org/grpc/metadata"
)

// UserServiceGRPCClient is a gRPC client for the UserService service.
// It combines the service interface with resource management capabilities, providing
// authentication, timeouts, and tracing.
//
// Features:
//   - Automatic authentication via API key with group ID support
//   - Credentials file loading from MESH_API_CREDENTIALS environment variable
//   - Configurable request timeouts with deadline handling
//   - OpenTelemetry distributed tracing support
//   - TLS support with configurable transport credentials
//   - Proper resource cleanup with Close() method
//   - Proper connection management
//
// Thread Safety:
//
//	This client uses gRPC's thread-safe underlying connections.
//
// Example usage:
//
//	client, err := NewUserServiceGRPCClient(
//		WithAPIKey("your-api-key"),
//		WithGroup("your-group-id"),
//		WithTimeout(30 * time.Second),
//	)
//	if err != nil {
//		log.Fatal(err)
//	}
//	defer client.Close()
//
//	// Use client methods as defined in the service interface
type UserServiceGRPCClient interface {
	UserService
	common.GRPCClient
}

// ensure userServiceGRPCClient implements the UserServiceGRPCClient interface
var _ UserServiceGRPCClient = &userServiceGRPCClient{}

// userServiceGRPCClient is the internal implementation of the UserServiceGRPCClient interface.
// This struct maintains the gRPC connection state, authentication credentials,
// and configuration options for the client.
type userServiceGRPCClient struct {
	url                     string
	port                    int
	tls                     bool
	conn                    *grpc.ClientConn
	grpcClient              UserServiceClient
	tracer                  trace.Tracer
	apiKey                  string
	groupID                 string
	timeout                 time.Duration
	unaryClientInterceptors []grpc.UnaryClientInterceptor
}

// NewUserServiceGRPCClient creates a new gRPC client for the UserService service.
// The client is configured using functional options and automatically handles connection
// management, authentication, timeouts, and distributed tracing.
//
// Default Configuration:
//   - Server: Uses common.DefaultGRPCURL and common.DefaultGRPCPort
//   - TLS: Enabled by default (common.DefaultTLS)
//   - Timeout: 30 seconds for all method calls
//   - Authentication: Attempts to load credentials from MESH_API_CREDENTIALS file
//   - Tracing: Disabled by default (no-op tracer)
//
// Parameters:
//   - opts: Functional options to configure the client (WithAPIKey, WithTimeout, etc.)
//
// Returns:
//   - UserServiceGRPCClient: Configured client instance
//   - error: Configuration or connection error
//
// Example:
//
//	client, err := NewUserServiceGRPCClient(
//		WithAPIKey("your-api-key-here"),
//		WithGroup("your-group-id"),
//		WithAddress("api.example.com", 443),
//		WithTimeout(10 * time.Second),
//	)
//	if err != nil {
//		return fmt.Errorf("failed to create client: %w", err)
//	}
//	defer client.Close()
//
// Thread Safety:
//
//	The returned client uses gRPC's thread-safe underlying connections.
func NewUserServiceGRPCClient(opts ...ClientOption) (UserServiceGRPCClient, error) {
	// prepare client with default configuration
	client := &userServiceGRPCClient{
		url:     common.DefaultGRPCURL,
		port:    common.DefaultGRPCPort,
		tls:     common.DefaultTLS,
		tracer:  noop.NewTracerProvider().Tracer(""),
		timeout: 30 * time.Second, // default 30 second timeout

		// set once options are applied and connection opened
		grpcClient:              nil,
		unaryClientInterceptors: nil,
	}

	// attempt to load credentials from environment file
	if creds, err := common.CredentialsFromEnvironment(); err == nil {
		client.apiKey = creds.APIKey
		client.groupID = creds.GroupID
	}

	// apply options to the client (these can override credentials from file)
	for _, opt := range opts {
		opt(client)
	}

	// validate authentication credentials
	if err := client.validateAuth(); err != nil {
		return nil, err
	}

	// prepare authentication interceptor
	client.unaryClientInterceptors = []grpc.UnaryClientInterceptor{
		client.authInterceptor(),
	}

	// prepare dial options
	dialOpts := make([]grpc.DialOption, 0)

	// set transport credentials
	if client.tls {
		dialOpts = append(dialOpts, grpc.WithTransportCredentials(credentials.NewClientTLSFromCert(nil, "")))
	} else {
		dialOpts = append(dialOpts, grpc.WithTransportCredentials(insecure.NewCredentials()))
	}

	dialOpts = append(dialOpts, grpc.WithChainUnaryInterceptor(client.unaryClientInterceptors...))

	// construct gRPC client connection
	conn, err := grpc.NewClient(
		fmt.Sprintf("%s:%d", client.url, client.port),
		dialOpts...,
	)
	if err != nil {
		return nil, fmt.Errorf("error constructing grpc client connection: %w", err)
	}

	// set client connection and gRPC client
	client.conn = conn
	client.grpcClient = NewUserServiceClient(conn)

	// return constructed client
	return client, nil
}

// AssignRoleToUser executes the AssignRoleToUser RPC method on the UserService service.
// This method automatically handles authentication, timeouts, and distributed tracing.
//
// Timeout Behavior:
//   - If the context already has a deadline, it will be respected
//   - If no deadline is set, the client's configured timeout will be applied
//   - The method will be cancelled if the timeout is exceeded
//
// Authentication:
//   - Automatically includes API key in request headers
//   - Authentication is configured during client creation
//
// Distributed Tracing:
//   - Creates a new span for this method call
//   - Span is automatically finished when the method returns
//
// Parameters:
//   - ctx: Context for the request (can include custom timeout, tracing, etc.)
//   - request: The AssignRoleToUserRequest containing the method parameters
//
// Returns:
//   - *User: The successful response from the service
//   - error: Any error that occurred during the request
//
// Example:
//
//	resp, err := client.AssignRoleToUser(ctx, &AssignRoleToUserRequest{
//		// populate request fields
//	})
//	if err != nil {
//		return fmt.Errorf("assignroletouser failed: %w", err)
//	}
func (s *userServiceGRPCClient) AssignRoleToUser(ctx context.Context, request *AssignRoleToUserRequest) (*User, error) {
	// apply timeout if no deadline is already set
	if _, hasDeadline := ctx.Deadline(); !hasDeadline {
		var cancel context.CancelFunc
		ctx, cancel = context.WithTimeout(ctx, s.timeout)
		defer cancel()
	}

	ctx, span := s.tracer.Start(
		ctx,
		UserServiceServiceProviderName+"AssignRoleToUser",
	)
	defer span.End()

	// call the underlying gRPC client method
	assignRoleToUserResponse, err := s.grpcClient.AssignRoleToUser(ctx, request)
	if err != nil {
		return nil, err
	}

	return assignRoleToUserResponse, nil
}

// Close gracefully shuts down the gRPC client connection and releases all associated resources.
// This method should be called when the client is no longer needed to prevent resource leaks.
// It's safe to call Close() multiple times - subsequent calls will be no-ops.
//
// Best Practices:
//   - Always call Close() when done with the client
//   - Use defer client.Close() immediately after successful client creation
//   - Do not use the client after calling Close()
//
// Example:
//
//	client, err := NewUserServiceGRPCClient(...)
//	if err != nil {
//		return err
//	}
//	defer client.Close() // Ensure cleanup
//
// Returns:
//   - error: Any error that occurred while closing the connection
func (s *userServiceGRPCClient) Close() error {
	if s.conn != nil {
		return s.conn.Close()
	}
	return nil
}

// validateAuth ensures that authentication credentials and group ID are properly configured.
// This method is called during client initialization to prevent runtime authentication failures.
//
// Requirements:
//   - At least one authentication method must be configured
//   - Group ID must be set for all public API calls
//
// Supported Authentication Methods:
//   - API Key: Set via WithAPIKey() option or MESH_API_CREDENTIALS file
//
// Returns:
//   - nil: If authentication and group ID are properly configured
//   - error: If authentication method or group ID is missing
func (c *userServiceGRPCClient) validateAuth() error {
	if c.apiKey == "" {
		return errors.New("api key not set. set credentials via MESH_API_CREDENTIALS file, or use WithAPIKey option")
	}
	if c.groupID == "" {
		return errors.New("group id not set. set via MESH_API_CREDENTIALS file or WithGroup option")
	}
	return nil
}

// authInterceptor creates and returns the gRPC unary interceptor for authentication.
// This interceptor automatically adds authentication and group ID headers to all outgoing requests.
//
// Headers Added:
//   - API Key: "Authorization: Bearer <api-key>" header
//   - Group ID: "x-group-id: <group-id>" header
//
// The interceptor is automatically applied to all method calls and handles the
// authentication and authorization context transparently without requiring manual header management.
//
// Returns:
//   - grpc.UnaryClientInterceptor: Configured authentication and group context interceptor
func (c *userServiceGRPCClient) authInterceptor() grpc.UnaryClientInterceptor {
	return func(ctx context.Context, method string, req, reply any, cc *grpc.ClientConn, invoker grpc.UnaryInvoker, opts ...grpc.CallOption) error {
		ctx = metadata.AppendToOutgoingContext(
			ctx,
			common.AuthorizationHeaderKey,
			common.BearerPrefix+c.apiKey,
			common.GroupIDHeaderKey,
			c.groupID,
		)
		return invoker(ctx, method, req, reply, cc, opts...)
	}
}
