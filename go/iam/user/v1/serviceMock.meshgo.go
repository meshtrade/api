// Code generated by protoc-gen-meshgo. DO NOT EDIT.
// source: meshtrade/iam/user/v1/service.proto
package user_v1

import (
	context "context"
	sync "sync"
	testing "testing"
)

// Ensure that MockUserService implements the UserService interface
var _ UserService = &MockUserService{}

// MockUserService is a mock implementation of the UserService interface.
type MockUserService struct {
	mutex                              sync.Mutex
	T                                  *testing.T
	AssignRolesToUserFunc              func(t *testing.T, m *MockUserService, ctx context.Context, request *AssignRolesToUserRequest) (*User, error)
	AssignRolesToUserFuncInvocations   int
	RevokeRolesFromUserFunc            func(t *testing.T, m *MockUserService, ctx context.Context, request *RevokeRolesFromUserRequest) (*User, error)
	RevokeRolesFromUserFuncInvocations int
	GetUserFunc                        func(t *testing.T, m *MockUserService, ctx context.Context, request *GetUserRequest) (*User, error)
	GetUserFuncInvocations             int
	ListUsersFunc                      func(t *testing.T, m *MockUserService, ctx context.Context, request *ListUsersRequest) (*ListUsersResponse, error)
	ListUsersFuncInvocations           int
	SearchUsersFunc                    func(t *testing.T, m *MockUserService, ctx context.Context, request *SearchUsersRequest) (*SearchUsersResponse, error)
	SearchUsersFuncInvocations         int
	CreateUserFunc                     func(t *testing.T, m *MockUserService, ctx context.Context, request *CreateUserRequest) (*User, error)
	CreateUserFuncInvocations          int
	UpdateUserFunc                     func(t *testing.T, m *MockUserService, ctx context.Context, request *UpdateUserRequest) (*User, error)
	UpdateUserFuncInvocations          int
}

func (m *MockUserService) AssignRolesToUser(ctx context.Context, request *AssignRolesToUserRequest) (*User, error) {
	m.mutex.Lock()
	m.AssignRolesToUserFuncInvocations++
	m.mutex.Unlock()
	if m.AssignRolesToUserFunc == nil {
		return nil, nil
	}
	return m.AssignRolesToUserFunc(m.T, m, ctx, request)
}

func (m *MockUserService) RevokeRolesFromUser(ctx context.Context, request *RevokeRolesFromUserRequest) (*User, error) {
	m.mutex.Lock()
	m.RevokeRolesFromUserFuncInvocations++
	m.mutex.Unlock()
	if m.RevokeRolesFromUserFunc == nil {
		return nil, nil
	}
	return m.RevokeRolesFromUserFunc(m.T, m, ctx, request)
}

func (m *MockUserService) GetUser(ctx context.Context, request *GetUserRequest) (*User, error) {
	m.mutex.Lock()
	m.GetUserFuncInvocations++
	m.mutex.Unlock()
	if m.GetUserFunc == nil {
		return nil, nil
	}
	return m.GetUserFunc(m.T, m, ctx, request)
}

func (m *MockUserService) ListUsers(ctx context.Context, request *ListUsersRequest) (*ListUsersResponse, error) {
	m.mutex.Lock()
	m.ListUsersFuncInvocations++
	m.mutex.Unlock()
	if m.ListUsersFunc == nil {
		return nil, nil
	}
	return m.ListUsersFunc(m.T, m, ctx, request)
}

func (m *MockUserService) SearchUsers(ctx context.Context, request *SearchUsersRequest) (*SearchUsersResponse, error) {
	m.mutex.Lock()
	m.SearchUsersFuncInvocations++
	m.mutex.Unlock()
	if m.SearchUsersFunc == nil {
		return nil, nil
	}
	return m.SearchUsersFunc(m.T, m, ctx, request)
}

func (m *MockUserService) CreateUser(ctx context.Context, request *CreateUserRequest) (*User, error) {
	m.mutex.Lock()
	m.CreateUserFuncInvocations++
	m.mutex.Unlock()
	if m.CreateUserFunc == nil {
		return nil, nil
	}
	return m.CreateUserFunc(m.T, m, ctx, request)
}

func (m *MockUserService) UpdateUser(ctx context.Context, request *UpdateUserRequest) (*User, error) {
	m.mutex.Lock()
	m.UpdateUserFuncInvocations++
	m.mutex.Unlock()
	if m.UpdateUserFunc == nil {
		return nil, nil
	}
	return m.UpdateUserFunc(m.T, m, ctx, request)
}
