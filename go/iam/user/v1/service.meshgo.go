// Code generated by protoc-gen-meshgo. DO NOT EDIT.
// source: meshtrade/iam/user/v1/service.proto
package user_v1

import (
	context "context"
	grpc "github.com/meshtrade/api/go/grpc"
	config "github.com/meshtrade/api/go/grpc/config"
)

// UserServiceClientInterface is a gRPC service for the UserService service.
// It combines the service interface with resource management capabilities using
// the common BaseGRPCClient for consistent authentication, timeouts, and tracing.
//
// Full Service documentation: https://meshtrade.github.io/api/docs/api-reference/iam/user/v1
//
// Basic service usage with default SDK Configuration:
//
//	service, err := NewUserService()
//	if err != nil {
//		log.Fatal(err)
//	}
//	defer service.Close() // ensures proper cleanup of underlying connection
//
// With default configuration API credentials are searched for using the standard discovery hierarchy:
//
// 1. MESH_API_CREDENTIALS environment variable
//
// 2. Default credential file location:
//
//   - Linux:   $XDG_CONFIG_HOME/mesh/credentials.json or fallback to $HOME/.config/mesh/credentials.json
//   - macOS:   $HOME/Library/Application Support/mesh/credentials.json
//   - Windows: C:\Users\<user>\AppData\Roaming\mesh\credentials.json
//
// For more information on authentication: https://meshtrade.github.io/api/docs/architecture/authentication
//
// The service may also be configured with custom options:
//
//	service, err := NewUserService(
//		config.WithURL("api.staging.example.com:443"),
//		config.WithAPIKey("your-api-key"),
//		config.WithGroup("groups/your-group-id"),
//		config.WithTimeout(30 * time.Second),
//	)
//	if err != nil {
//		log.Fatal(err)
//	}
//	defer service.Close() // ensures proper cleanup of underlying connection
//
// For more information on service configuration: https://meshtrade.github.io/api/docs/architecture/sdk-configuration
type UserServiceClientInterface interface {
	grpc.GRPCClient

	// Assign roles to an existing user within the authenticated group context.
	// The role assignment enables the user to perform operations according
	// to the permissions associated with that role within the group hierarchy.
	AssignRolesToUser(ctx context.Context, request *AssignRolesToUserRequest) (*User, error)
	// Revoke roles from an existing user within the authenticated group context.
	// The role revocation removes the permissions associated with that role from
	// the user within the group hierarchy. The user will no longer be able
	// to perform operations that require the revoked role.
	RevokeRolesFromUser(ctx context.Context, request *RevokeRolesFromUserRequest) (*User, error)
	// Retrieves a single user by its unique identifier.
	// Returns user details including name, email, ownership information,
	// and assigned roles within the authenticated group's access scope.
	GetUser(ctx context.Context, request *GetUserRequest) (*User, error)
	// Returns all users accessible within the authenticated group's hierarchy.
	// Results include users directly owned and those accessible through the
	// group's hierarchical permissions, optionally sorted by email address.
	ListUsers(ctx context.Context, request *ListUsersRequest) (*ListUsersResponse, error)
	// Searches for users by email address using substring matching.
	// Returns users whose email addresses contain the provided search term,
	// filtered by the authenticated group's access permissions and optionally
	// sorted by email address.
	SearchUsers(ctx context.Context, request *SearchUsersRequest) (*SearchUsersResponse, error)
	// Creates a new user within the authenticated group context.
	// The user will be created with the provided email and group ownership,
	// with system-generated unique identifier and ownership hierarchy.
	// Additional roles can be assigned after creation.
	CreateUser(ctx context.Context, request *CreateUserRequest) (*User, error)
	// Updates an existing user with modified field values.
	// Only mutable fields can be updated while preserving system-generated
	// identifiers and ownership relationships. Role modifications should
	// use dedicated role management operations.
	UpdateUser(ctx context.Context, request *UpdateUserRequest) (*User, error)

	// WithGroup returns a new client instance with a different group context
	WithGroup(group string) UserServiceClientInterface
}

// userService is the internal implementation of the UserServiceClientInterface interface.
// It embeds BaseGRPCClient to provide all common gRPC functionality including validation.
type userService struct {
	*grpc.BaseGRPCClient[UserServiceClient]
}

// ensure userService implements the UserServiceClientInterface interface
var _ UserServiceClientInterface = &userService{}

// NewUserService creates and initializes the UserService service.
// The service uses the common BaseGRPCClient for all functionality including
// connection management, authentication, timeouts, and distributed tracing.
//
// Full Service documentation: https://meshtrade.github.io/api/docs/api-reference/iam/user/v1
//
// With default configuration API credentials are searched for using the standard discovery hierarchy:
//
// 1. MESH_API_CREDENTIALS environment variable
//
// 2. Default credential file location:
//
//   - Linux:   $XDG_CONFIG_HOME/mesh/credentials.json or fallback to $HOME/.config/mesh/credentials.json
//   - macOS:   $HOME/Library/Application Support/mesh/credentials.json
//   - Windows: C:\Users\<user>\AppData\Roaming\mesh\credentials.json
//
// For more information on authentication: https://meshtrade.github.io/api/docs/architecture/authentication
//
// For more information on service configuration: https://meshtrade.github.io/api/docs/architecture/sdk-configuration
//
// Examples:
//
//	// Create with default configuration
//	service, err := NewUserService()
//	if err != nil {
//		log.Fatal(err)
//	}
//	defer service.Close()
//
//	// Create with custom configuration
//	service, err := NewUserService(
//		config.WithURL("api.example.com:443"),
//		config.WithAPIKey("your-api-key"),
//		config.WithGroup("groups/your-group-id"),
//	)
//	if err != nil {
//		log.Fatal(err)
//	}
//	defer service.Close()
//
// Parameters:
//   - opts: Functional options to configure the client
//
// Returns:
//   - UserServiceClientInterface: Configured service instance
//   - error: Configuration or connection error
func NewUserService(opts ...config.ServiceOption) (UserServiceClientInterface, error) {
	base, err := grpc.NewBaseGRPCClient(
		UserServiceServiceProviderName,
		NewUserServiceClient,
		opts...,
	)
	if err != nil {
		return nil, err
	}

	return &userService{BaseGRPCClient: base}, nil
}

// WithGroup returns a new client instance configured with a different group context.
// This enables convenient group context switching without reconstructing the entire client.
// All other configuration (URL, port, timeout, tracer, API key, etc.) is preserved.
//
// The group parameter must be in the format 'groups/{group_id}' where group_id is a valid
// group identifier (typically a ULID). The new client instance shares no state with the
// original client, allowing safe concurrent usage across different goroutines.
//
// Example:
//
//	// Create initial client with default group from credentials
//	service, err := NewUserService()
//	if err != nil {
//		log.Fatal(err)
//	}
//	defer service.Close()
//
//	// Switch to a different group context
//	altService := service.WithGroup("groups/01ARZ3NDEKTSV4RRFFQ69G5FAV")
//	defer altService.Close()
//
//	// Both clients can be used independently
//	resp1, _ := service.SomeMethod(ctx, req)      // Uses original group
//	resp2, _ := altService.SomeMethod(ctx, req)   // Uses alternative group
//
// Parameters:
//   - group: The group resource name in format 'groups/{group_id}'
//
// Returns:
//   - UserServiceClientInterface: New client instance with updated group context
func (s *userService) WithGroup(group string) UserServiceClientInterface {
	// Create new base client with copied configuration but new group
	newBase := s.BaseGRPCClient.WithGroup(group)

	// Return new service instance wrapping the new base client
	return &userService{BaseGRPCClient: newBase}
}

// AssignRolesToUser executes the AssignRolesToUser RPC method with automatic
// client-side validation, timeout handling, distributed tracing, and authentication.
func (s *userService) AssignRolesToUser(ctx context.Context, request *AssignRolesToUserRequest) (*User, error) {
	return grpc.Execute(s.Executor(), ctx, "AssignRolesToUser", request, func(ctx context.Context) (*User, error) {
		return s.GrpcClient().AssignRolesToUser(ctx, request)
	})
}

// RevokeRolesFromUser executes the RevokeRolesFromUser RPC method with automatic
// client-side validation, timeout handling, distributed tracing, and authentication.
func (s *userService) RevokeRolesFromUser(ctx context.Context, request *RevokeRolesFromUserRequest) (*User, error) {
	return grpc.Execute(s.Executor(), ctx, "RevokeRolesFromUser", request, func(ctx context.Context) (*User, error) {
		return s.GrpcClient().RevokeRolesFromUser(ctx, request)
	})
}

// GetUser executes the GetUser RPC method with automatic
// client-side validation, timeout handling, distributed tracing, and authentication.
func (s *userService) GetUser(ctx context.Context, request *GetUserRequest) (*User, error) {
	return grpc.Execute(s.Executor(), ctx, "GetUser", request, func(ctx context.Context) (*User, error) {
		return s.GrpcClient().GetUser(ctx, request)
	})
}

// ListUsers executes the ListUsers RPC method with automatic
// client-side validation, timeout handling, distributed tracing, and authentication.
func (s *userService) ListUsers(ctx context.Context, request *ListUsersRequest) (*ListUsersResponse, error) {
	return grpc.Execute(s.Executor(), ctx, "ListUsers", request, func(ctx context.Context) (*ListUsersResponse, error) {
		return s.GrpcClient().ListUsers(ctx, request)
	})
}

// SearchUsers executes the SearchUsers RPC method with automatic
// client-side validation, timeout handling, distributed tracing, and authentication.
func (s *userService) SearchUsers(ctx context.Context, request *SearchUsersRequest) (*SearchUsersResponse, error) {
	return grpc.Execute(s.Executor(), ctx, "SearchUsers", request, func(ctx context.Context) (*SearchUsersResponse, error) {
		return s.GrpcClient().SearchUsers(ctx, request)
	})
}

// CreateUser executes the CreateUser RPC method with automatic
// client-side validation, timeout handling, distributed tracing, and authentication.
func (s *userService) CreateUser(ctx context.Context, request *CreateUserRequest) (*User, error) {
	return grpc.Execute(s.Executor(), ctx, "CreateUser", request, func(ctx context.Context) (*User, error) {
		return s.GrpcClient().CreateUser(ctx, request)
	})
}

// UpdateUser executes the UpdateUser RPC method with automatic
// client-side validation, timeout handling, distributed tracing, and authentication.
func (s *userService) UpdateUser(ctx context.Context, request *UpdateUserRequest) (*User, error) {
	return grpc.Execute(s.Executor(), ctx, "UpdateUser", request, func(ctx context.Context) (*User, error) {
		return s.GrpcClient().UpdateUser(ctx, request)
	})
}
