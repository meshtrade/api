// Code generated by protoc-gen-meshgo. DO NOT EDIT.
// source: meshtrade/iam/user/v1/service.proto
package userv1

import (
	context "context"
	grpc "github.com/meshtrade/api/go/grpc"
	config "github.com/meshtrade/api/go/grpc/config"
)

// UserServiceClientInterface is a gRPC service for the UserService service.
// It combines the service interface with resource management capabilities using
// the common BaseGRPCClient for consistent authentication, timeouts, and tracing.
//
// Example usage:
//
//	service, err := NewUserService(
//		config.WithAPIKey("your-api-key"),
//		config.WithGroup("groups/your-group-id"),
//		config.WithTimeout(30 * time.Second),
//	)
//	if err != nil {
//		log.Fatal(err)
//	}
//	defer service.Close()
type UserServiceClientInterface interface {
	UserService
	grpc.GRPCClient
}

// userService is the internal implementation of the UserServiceClientInterface interface.
// It embeds BaseGRPCClient to provide all common gRPC functionality.
type userService struct {
	*grpc.BaseGRPCClient[UserServiceClient]
}

// ensure userService implements the UserServiceClientInterface interface
var _ UserServiceClientInterface = &userService{}

// NewUserService creates a new gRPC service for the UserService service.
// The service uses the common BaseGRPCClient for all functionality including
// connection management, authentication, timeouts, and distributed tracing.
//
// Parameters:
//   - opts: Functional options to configure the client
//
// Returns:
//   - UserServiceClientInterface: Configured service instance
//   - error: Configuration or connection error
func NewUserService(opts ...config.ServiceOption) (UserServiceClientInterface, error) {
	base, err := grpc.NewBaseGRPCClient(
		UserServiceServiceProviderName,
		NewUserServiceClient,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return &userService{BaseGRPCClient: base}, nil
}

// AssignRoleToUser executes the AssignRoleToUser RPC method with automatic
// timeout handling, distributed tracing, and authentication.
func (s *userService) AssignRoleToUser(ctx context.Context, request *AssignRoleToUserRequest) (*User, error) {
	return grpc.Execute(s.Executor(), ctx, "AssignRoleToUser", func(ctx context.Context) (*User, error) {
		return s.GrpcClient().AssignRoleToUser(ctx, request)
	})
}
