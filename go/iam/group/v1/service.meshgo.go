// Code generated by protoc-gen-meshgo. DO NOT EDIT.
// source: meshtrade/iam/group/v1/service.proto
package groupv1

import (
	context "context"
	grpc "github.com/meshtrade/api/go/grpc"
	config "github.com/meshtrade/api/go/grpc/config"
)

// GroupServiceClientInterface is a gRPC service for the GroupService service.
// It combines the service interface with resource management capabilities using
// the common BaseGRPCClient for consistent authentication, timeouts, and tracing.
//
// Example usage:
//
//	service, err := NewGroupService(
//		config.WithAPIKey("your-api-key"),
//		config.WithGroup("groups/your-group-id"),
//		config.WithTimeout(30 * time.Second),
//	)
//	if err != nil {
//		log.Fatal(err)
//	}
//	defer service.Close()
type GroupServiceClientInterface interface {
	GroupService
	grpc.GRPCClient
}

// groupService is the internal implementation of the GroupServiceClientInterface interface.
// It embeds BaseGRPCClient to provide all common gRPC functionality.
type groupService struct {
	*grpc.BaseGRPCClient[GroupServiceClient]
}

// ensure groupService implements the GroupServiceClientInterface interface
var _ GroupServiceClientInterface = &groupService{}

// NewGroupService creates a new gRPC service for the GroupService service.
// The service uses the common BaseGRPCClient for all functionality including
// connection management, authentication, timeouts, and distributed tracing.
//
// Parameters:
//   - opts: Functional options to configure the client
//
// Returns:
//   - GroupServiceClientInterface: Configured service instance
//   - error: Configuration or connection error
func NewGroupService(opts ...config.ServiceOption) (GroupServiceClientInterface, error) {
	base, err := grpc.NewBaseGRPCClient(
		GroupServiceServiceProviderName,
		NewGroupServiceClient,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return &groupService{BaseGRPCClient: base}, nil
}

// GetGroup executes the GetGroup RPC method with automatic
// timeout handling, distributed tracing, and authentication.
func (s *groupService) GetGroup(ctx context.Context, request *GetGroupRequest) (*Group, error) {
	return grpc.Execute(s.Executor(), ctx, "GetGroup", func(ctx context.Context) (*Group, error) {
		return s.GrpcClient().GetGroup(ctx, request)
	})
}

// ListGroups executes the ListGroups RPC method with automatic
// timeout handling, distributed tracing, and authentication.
func (s *groupService) ListGroups(ctx context.Context, request *ListGroupsRequest) (*ListGroupsResponse, error) {
	return grpc.Execute(s.Executor(), ctx, "ListGroups", func(ctx context.Context) (*ListGroupsResponse, error) {
		return s.GrpcClient().ListGroups(ctx, request)
	})
}

// SearchGroups executes the SearchGroups RPC method with automatic
// timeout handling, distributed tracing, and authentication.
func (s *groupService) SearchGroups(ctx context.Context, request *SearchGroupsRequest) (*SearchGroupsResponse, error) {
	return grpc.Execute(s.Executor(), ctx, "SearchGroups", func(ctx context.Context) (*SearchGroupsResponse, error) {
		return s.GrpcClient().SearchGroups(ctx, request)
	})
}
