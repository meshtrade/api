// Code generated by protoc-gen-meshgo. DO NOT EDIT.
// source: meshtrade/iam/group/v1/service.proto
package groupv1

import (
	context "context"
	fmt "fmt"
	log "github.com/rs/zerolog/log"
	trace "go.opentelemetry.io/otel/trace"
	grpc "google.golang.org/grpc"
)

// Ensure that GroupServiceGRPCClient implements the GroupService interface
var _ GroupService = &GroupServiceGRPCClient{}

// GroupServiceGRPCClient is a gRPC client implementation of the GroupService interface.
type GroupServiceGRPCClient struct {
	tracer     trace.Tracer
	grpcClient GroupServiceClient
}

func NewGroupServiceGRPCClient(
	tracer trace.Tracer,
	grpcClientConnection *grpc.ClientConn,
) *GroupServiceGRPCClient {
	return &GroupServiceGRPCClient{
		tracer:     tracer,
		grpcClient: NewGroupServiceClient(grpcClientConnection),
	}
}

func (g *GroupServiceGRPCClient) GetGroup(ctx context.Context, request *GetGroupRequest) (*Group, error) {
	ctx, span := g.tracer.Start(
		ctx,
		GroupServiceServiceProviderName+"GetGroup",
	)
	defer span.End()

	// call given implementation of the adapted service provider interface
	getGroupResponse, err := g.grpcClient.GetGroup(ctx, request)
	if err != nil {
		log.Ctx(ctx).Error().Err(err).Msg("could not GetGroup")
		return nil, fmt.Errorf("could not GetGroup: %s", err)
	}

	return getGroupResponse, nil
}

func (g *GroupServiceGRPCClient) ListGroups(ctx context.Context, request *ListGroupsRequest) (*ListGroupsResponse, error) {
	ctx, span := g.tracer.Start(
		ctx,
		GroupServiceServiceProviderName+"ListGroups",
	)
	defer span.End()

	// call given implementation of the adapted service provider interface
	listGroupsResponse, err := g.grpcClient.ListGroups(ctx, request)
	if err != nil {
		log.Ctx(ctx).Error().Err(err).Msg("could not ListGroups")
		return nil, fmt.Errorf("could not ListGroups: %s", err)
	}

	return listGroupsResponse, nil
}

func (g *GroupServiceGRPCClient) SearchGroups(ctx context.Context, request *SearchGroupsRequest) (*SearchGroupsResponse, error) {
	ctx, span := g.tracer.Start(
		ctx,
		GroupServiceServiceProviderName+"SearchGroups",
	)
	defer span.End()

	// call given implementation of the adapted service provider interface
	searchGroupsResponse, err := g.grpcClient.SearchGroups(ctx, request)
	if err != nil {
		log.Ctx(ctx).Error().Err(err).Msg("could not SearchGroups")
		return nil, fmt.Errorf("could not SearchGroups: %s", err)
	}

	return searchGroupsResponse, nil
}
