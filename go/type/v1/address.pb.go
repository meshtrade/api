// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: meshtrade/type/v1/address.proto

package typev1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Represents a postal address, e.g. for postal delivery or payments addresses.
// Given a postal address, a postal service can deliver items to a premise, P.O.
// Box or similar.
// It is not intended to model geographical locations (roads, towns,
// mountains).
//
// In typical usage an address would be created via user input or from importing
// existing data, depending on the type of process.
//
// Advice on address input / editing:
//   - Use an i18n-ready address widget such as
//     https://github.com/google/libaddressinput)
//   - Users should not be presented with UI elements for input or editing of
//     fields outside countries where that field is used.
//
// For more guidance on how to use this schema, please see:
// https://support.google.com/business/answer/6397478
type PostalAddress struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Unstructured address lines describing the address.
	// --> Required
	AddressLines []string `protobuf:"bytes,1,rep,name=address_lines,json=addressLines,proto3" json:"address_lines,omitempty"`
	// Suburb of the address.
	// --> Optional
	Suburb string `protobuf:"bytes,2,opt,name=suburb,proto3" json:"suburb,omitempty"`
	// City of the address.
	// --> Required
	City string `protobuf:"bytes,3,opt,name=city,proto3" json:"city,omitempty"`
	// Province or state of the address
	// --> Required
	Province string `protobuf:"bytes,4,opt,name=province,proto3" json:"province,omitempty"`
	// Country code of the address in ISO format.
	// CLDR region code of the country/region of the address. This
	// is never inferred and it is up to the user to ensure the value is
	// correct. See http://cldr.unicode.org/ and
	// http://www.unicode.org/cldr/charts/30/supplemental/territory_information.html
	// for details. Example: "CH" for Switzerland.
	// --> Required.
	CountryCode string `protobuf:"bytes,5,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"`
	// Postal code of the address.
	// --> Optional
	PostalCode    string `protobuf:"bytes,6,opt,name=postal_code,json=postalCode,proto3" json:"postal_code,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PostalAddress) Reset() {
	*x = PostalAddress{}
	mi := &file_meshtrade_type_v1_address_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PostalAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostalAddress) ProtoMessage() {}

func (x *PostalAddress) ProtoReflect() protoreflect.Message {
	mi := &file_meshtrade_type_v1_address_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostalAddress.ProtoReflect.Descriptor instead.
func (*PostalAddress) Descriptor() ([]byte, []int) {
	return file_meshtrade_type_v1_address_proto_rawDescGZIP(), []int{0}
}

func (x *PostalAddress) GetAddressLines() []string {
	if x != nil {
		return x.AddressLines
	}
	return nil
}

func (x *PostalAddress) GetSuburb() string {
	if x != nil {
		return x.Suburb
	}
	return ""
}

func (x *PostalAddress) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *PostalAddress) GetProvince() string {
	if x != nil {
		return x.Province
	}
	return ""
}

func (x *PostalAddress) GetCountryCode() string {
	if x != nil {
		return x.CountryCode
	}
	return ""
}

func (x *PostalAddress) GetPostalCode() string {
	if x != nil {
		return x.PostalCode
	}
	return ""
}

var File_meshtrade_type_v1_address_proto protoreflect.FileDescriptor

const file_meshtrade_type_v1_address_proto_rawDesc = "" +
	"\n" +
	"\x1fmeshtrade/type/v1/address.proto\x12\x11meshtrade.type.v1\"\xc0\x01\n" +
	"\rPostalAddress\x12#\n" +
	"\raddress_lines\x18\x01 \x03(\tR\faddressLines\x12\x16\n" +
	"\x06suburb\x18\x02 \x01(\tR\x06suburb\x12\x12\n" +
	"\x04city\x18\x03 \x01(\tR\x04city\x12\x1a\n" +
	"\bprovince\x18\x04 \x01(\tR\bprovince\x12!\n" +
	"\fcountry_code\x18\x05 \x01(\tR\vcountryCode\x12\x1f\n" +
	"\vpostal_code\x18\x06 \x01(\tR\n" +
	"postalCodeB,Z*github.com/meshtrade/api/go/type/v1;typev1b\x06proto3"

var (
	file_meshtrade_type_v1_address_proto_rawDescOnce sync.Once
	file_meshtrade_type_v1_address_proto_rawDescData []byte
)

func file_meshtrade_type_v1_address_proto_rawDescGZIP() []byte {
	file_meshtrade_type_v1_address_proto_rawDescOnce.Do(func() {
		file_meshtrade_type_v1_address_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_meshtrade_type_v1_address_proto_rawDesc), len(file_meshtrade_type_v1_address_proto_rawDesc)))
	})
	return file_meshtrade_type_v1_address_proto_rawDescData
}

var file_meshtrade_type_v1_address_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_meshtrade_type_v1_address_proto_goTypes = []any{
	(*PostalAddress)(nil), // 0: meshtrade.type.v1.PostalAddress
}
var file_meshtrade_type_v1_address_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_meshtrade_type_v1_address_proto_init() }
func file_meshtrade_type_v1_address_proto_init() {
	if File_meshtrade_type_v1_address_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_meshtrade_type_v1_address_proto_rawDesc), len(file_meshtrade_type_v1_address_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_meshtrade_type_v1_address_proto_goTypes,
		DependencyIndexes: file_meshtrade_type_v1_address_proto_depIdxs,
		MessageInfos:      file_meshtrade_type_v1_address_proto_msgTypes,
	}.Build()
	File_meshtrade_type_v1_address_proto = out.File
	file_meshtrade_type_v1_address_proto_goTypes = nil
	file_meshtrade_type_v1_address_proto_depIdxs = nil
}
