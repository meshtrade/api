// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: meshtrade/type/v1/token.proto

package typev1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Token is Mesh's canonical model for uniquely and unambiguously identifying any
// digital asset across any supported ledger. It provides a powerful abstraction
// layer that resolves the complexities of multi-chain/ledger asset representation.
// This allows any part of the Mesh system to work with a single, universal
// concept of a token, regardless of the underlying ledger's specific
// implementation.
type Token struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The commonly accepted symbol, ticker, or code for the token (e.g., "BTC", "ETH", "USDC").
	// It is not unique without the `issuer` and `ledger`.
	// Required field.
	Code string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	// Issuer is a reference to issuing entity of the token.
	// For NATIVE assets on a ledger (e.g., ETH on Ethereum), the issuer is the ledger itself,
	// represented by the reserved string __LEDGER__.
	// For ALL other issued assets (e.g., ERC-20 tokens), this is the unique identifier of the issuing entity,
	// such as a smart contract address on Ethereum or an issuance account public key on Stellar.
	// Required field.
	Issuer string `protobuf:"bytes,2,opt,name=issuer,proto3" json:"issuer,omitempty"`
	// The ledger ledger on which the token exists. This field disambiguates
	// assets that may share a code and issuer across different chains
	// (e.g., USDC on Ethereum vs. USDC on Polygon).
	// Required field.
	Ledger        Ledger `protobuf:"varint,3,opt,name=ledger,proto3,enum=meshtrade.type.v1.Ledger" json:"ledger,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Token) Reset() {
	*x = Token{}
	mi := &file_meshtrade_type_v1_token_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Token) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Token) ProtoMessage() {}

func (x *Token) ProtoReflect() protoreflect.Message {
	mi := &file_meshtrade_type_v1_token_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Token.ProtoReflect.Descriptor instead.
func (*Token) Descriptor() ([]byte, []int) {
	return file_meshtrade_type_v1_token_proto_rawDescGZIP(), []int{0}
}

func (x *Token) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Token) GetIssuer() string {
	if x != nil {
		return x.Issuer
	}
	return ""
}

func (x *Token) GetLedger() Ledger {
	if x != nil {
		return x.Ledger
	}
	return Ledger_LEDGER_UNSPECIFIED
}

var File_meshtrade_type_v1_token_proto protoreflect.FileDescriptor

const file_meshtrade_type_v1_token_proto_rawDesc = "" +
	"\n" +
	"\x1dmeshtrade/type/v1/token.proto\x12\x11meshtrade.type.v1\x1a\x1emeshtrade/type/v1/ledger.proto\"f\n" +
	"\x05Token\x12\x12\n" +
	"\x04code\x18\x01 \x01(\tR\x04code\x12\x16\n" +
	"\x06issuer\x18\x02 \x01(\tR\x06issuer\x121\n" +
	"\x06ledger\x18\x03 \x01(\x0e2\x19.meshtrade.type.v1.LedgerR\x06ledgerBF\n" +
	"\x18co.meshtrade.api.type.v1Z*github.com/meshtrade/api/go/type/v1;typev1b\x06proto3"

var (
	file_meshtrade_type_v1_token_proto_rawDescOnce sync.Once
	file_meshtrade_type_v1_token_proto_rawDescData []byte
)

func file_meshtrade_type_v1_token_proto_rawDescGZIP() []byte {
	file_meshtrade_type_v1_token_proto_rawDescOnce.Do(func() {
		file_meshtrade_type_v1_token_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_meshtrade_type_v1_token_proto_rawDesc), len(file_meshtrade_type_v1_token_proto_rawDesc)))
	})
	return file_meshtrade_type_v1_token_proto_rawDescData
}

var file_meshtrade_type_v1_token_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_meshtrade_type_v1_token_proto_goTypes = []any{
	(*Token)(nil), // 0: meshtrade.type.v1.Token
	(Ledger)(0),   // 1: meshtrade.type.v1.Ledger
}
var file_meshtrade_type_v1_token_proto_depIdxs = []int32{
	1, // 0: meshtrade.type.v1.Token.ledger:type_name -> meshtrade.type.v1.Ledger
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_meshtrade_type_v1_token_proto_init() }
func file_meshtrade_type_v1_token_proto_init() {
	if File_meshtrade_type_v1_token_proto != nil {
		return
	}
	file_meshtrade_type_v1_ledger_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_meshtrade_type_v1_token_proto_rawDesc), len(file_meshtrade_type_v1_token_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_meshtrade_type_v1_token_proto_goTypes,
		DependencyIndexes: file_meshtrade_type_v1_token_proto_depIdxs,
		MessageInfos:      file_meshtrade_type_v1_token_proto_msgTypes,
	}.Build()
	File_meshtrade_type_v1_token_proto = out.File
	file_meshtrade_type_v1_token_proto_goTypes = nil
	file_meshtrade_type_v1_token_proto_depIdxs = nil
}
