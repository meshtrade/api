// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: meshtrade/type/v1/ledger.proto

package type_v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Ledger represents the various distributed and centralized systems that Mesh
// interacts with where value is accounted for. The term "Ledger" is used
// inclusively to cover both blockchain and other value-tracking systems.
// Note that numbering is not sequential for legacy reasons.
type Ledger int32

const (
	// Indicates an unknown or unspecified ledger. This default value helps
	// prevent accidental assignment and should not be used in practice.
	Ledger_LEDGER_UNSPECIFIED Ledger = 0
	// The Stellar public ledger network.
	// See: https://stellar.org
	Ledger_LEDGER_STELLAR Ledger = 3
	// The Bitcoin public ledger network.
	// See: https://bitcoin.org
	Ledger_LEDGER_BITCOIN Ledger = 5
	// The Litecoin public ledger network.
	// See: https://litecoin.org
	Ledger_LEDGER_LITECOIN Ledger = 7
	// The Ethereum public ledger network.
	// See: https://ethereum.org
	Ledger_LEDGER_ETHEREUM Ledger = 9
	// The XRP Ledger (formerly Ripple).
	// See: https://xrpl.org
	Ledger_LEDGER_XRP Ledger = 11
	// The proprietary ledger for the SA Stockbrokers platform.
	Ledger_LEDGER_SA_STOCK_BROKERS Ledger = 15
	// A null ledger, used as a placeholder for assets that do not have
	// an external or on-chain accounting ledger.
	Ledger_LEDGER_NULL Ledger = 16
)

// Enum value maps for Ledger.
var (
	Ledger_name = map[int32]string{
		0:  "LEDGER_UNSPECIFIED",
		3:  "LEDGER_STELLAR",
		5:  "LEDGER_BITCOIN",
		7:  "LEDGER_LITECOIN",
		9:  "LEDGER_ETHEREUM",
		11: "LEDGER_XRP",
		15: "LEDGER_SA_STOCK_BROKERS",
		16: "LEDGER_NULL",
	}
	Ledger_value = map[string]int32{
		"LEDGER_UNSPECIFIED":      0,
		"LEDGER_STELLAR":          3,
		"LEDGER_BITCOIN":          5,
		"LEDGER_LITECOIN":         7,
		"LEDGER_ETHEREUM":         9,
		"LEDGER_XRP":              11,
		"LEDGER_SA_STOCK_BROKERS": 15,
		"LEDGER_NULL":             16,
	}
)

func (x Ledger) Enum() *Ledger {
	p := new(Ledger)
	*p = x
	return p
}

func (x Ledger) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ledger) Descriptor() protoreflect.EnumDescriptor {
	return file_meshtrade_type_v1_ledger_proto_enumTypes[0].Descriptor()
}

func (Ledger) Type() protoreflect.EnumType {
	return &file_meshtrade_type_v1_ledger_proto_enumTypes[0]
}

func (x Ledger) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ledger.Descriptor instead.
func (Ledger) EnumDescriptor() ([]byte, []int) {
	return file_meshtrade_type_v1_ledger_proto_rawDescGZIP(), []int{0}
}

var File_meshtrade_type_v1_ledger_proto protoreflect.FileDescriptor

const file_meshtrade_type_v1_ledger_proto_rawDesc = "" +
	"\n" +
	"\x1emeshtrade/type/v1/ledger.proto\x12\x11meshtrade.type.v1*\xb0\x01\n" +
	"\x06Ledger\x12\x16\n" +
	"\x12LEDGER_UNSPECIFIED\x10\x00\x12\x12\n" +
	"\x0eLEDGER_STELLAR\x10\x03\x12\x12\n" +
	"\x0eLEDGER_BITCOIN\x10\x05\x12\x13\n" +
	"\x0fLEDGER_LITECOIN\x10\a\x12\x13\n" +
	"\x0fLEDGER_ETHEREUM\x10\t\x12\x0e\n" +
	"\n" +
	"LEDGER_XRP\x10\v\x12\x1b\n" +
	"\x17LEDGER_SA_STOCK_BROKERS\x10\x0f\x12\x0f\n" +
	"\vLEDGER_NULL\x10\x10BG\n" +
	"\x18co.meshtrade.api.type.v1Z+github.com/meshtrade/api/go/type/v1;type_v1b\x06proto3"

var (
	file_meshtrade_type_v1_ledger_proto_rawDescOnce sync.Once
	file_meshtrade_type_v1_ledger_proto_rawDescData []byte
)

func file_meshtrade_type_v1_ledger_proto_rawDescGZIP() []byte {
	file_meshtrade_type_v1_ledger_proto_rawDescOnce.Do(func() {
		file_meshtrade_type_v1_ledger_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_meshtrade_type_v1_ledger_proto_rawDesc), len(file_meshtrade_type_v1_ledger_proto_rawDesc)))
	})
	return file_meshtrade_type_v1_ledger_proto_rawDescData
}

var file_meshtrade_type_v1_ledger_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_meshtrade_type_v1_ledger_proto_goTypes = []any{
	(Ledger)(0), // 0: meshtrade.type.v1.Ledger
}
var file_meshtrade_type_v1_ledger_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_meshtrade_type_v1_ledger_proto_init() }
func file_meshtrade_type_v1_ledger_proto_init() {
	if File_meshtrade_type_v1_ledger_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_meshtrade_type_v1_ledger_proto_rawDesc), len(file_meshtrade_type_v1_ledger_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_meshtrade_type_v1_ledger_proto_goTypes,
		DependencyIndexes: file_meshtrade_type_v1_ledger_proto_depIdxs,
		EnumInfos:         file_meshtrade_type_v1_ledger_proto_enumTypes,
	}.Build()
	File_meshtrade_type_v1_ledger_proto = out.File
	file_meshtrade_type_v1_ledger_proto_goTypes = nil
	file_meshtrade_type_v1_ledger_proto_depIdxs = nil
}
