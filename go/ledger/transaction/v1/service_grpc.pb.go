// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: meshtrade/ledger/transaction/v1/service.proto

package transaction_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TransactionService_GetTransactionState_FullMethodName     = "/meshtrade.ledger.transaction.v1.TransactionService/GetTransactionState"
	TransactionService_MonitorTransactionState_FullMethodName = "/meshtrade.ledger.transaction.v1.TransactionService/MonitorTransactionState"
)

// TransactionServiceClient is the client API for TransactionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// TransactionService manages Transaction lifecycle.
type TransactionServiceClient interface {
	// Retrieves a single Transaction state by the unique identifier of the transaction
	GetTransactionState(ctx context.Context, in *GetTransactionStateRequest, opts ...grpc.CallOption) (*GetTransactionStateResponse, error)
	// Monitor Transaction state changes by the unique identifier of the transaction.
	// Server-side streaming method that sends state updates as the transaction progresses.
	MonitorTransactionState(ctx context.Context, in *MonitorTransactionStateRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[MonitorTransactionStateResponse], error)
}

type transactionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTransactionServiceClient(cc grpc.ClientConnInterface) TransactionServiceClient {
	return &transactionServiceClient{cc}
}

func (c *transactionServiceClient) GetTransactionState(ctx context.Context, in *GetTransactionStateRequest, opts ...grpc.CallOption) (*GetTransactionStateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTransactionStateResponse)
	err := c.cc.Invoke(ctx, TransactionService_GetTransactionState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) MonitorTransactionState(ctx context.Context, in *MonitorTransactionStateRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[MonitorTransactionStateResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TransactionService_ServiceDesc.Streams[0], TransactionService_MonitorTransactionState_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[MonitorTransactionStateRequest, MonitorTransactionStateResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TransactionService_MonitorTransactionStateClient = grpc.ServerStreamingClient[MonitorTransactionStateResponse]

// TransactionServiceServer is the server API for TransactionService service.
// All implementations must embed UnimplementedTransactionServiceServer
// for forward compatibility.
//
// TransactionService manages Transaction lifecycle.
type TransactionServiceServer interface {
	// Retrieves a single Transaction state by the unique identifier of the transaction
	GetTransactionState(context.Context, *GetTransactionStateRequest) (*GetTransactionStateResponse, error)
	// Monitor Transaction state changes by the unique identifier of the transaction.
	// Server-side streaming method that sends state updates as the transaction progresses.
	MonitorTransactionState(*MonitorTransactionStateRequest, grpc.ServerStreamingServer[MonitorTransactionStateResponse]) error
	mustEmbedUnimplementedTransactionServiceServer()
}

// UnimplementedTransactionServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTransactionServiceServer struct{}

func (UnimplementedTransactionServiceServer) GetTransactionState(context.Context, *GetTransactionStateRequest) (*GetTransactionStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionState not implemented")
}
func (UnimplementedTransactionServiceServer) MonitorTransactionState(*MonitorTransactionStateRequest, grpc.ServerStreamingServer[MonitorTransactionStateResponse]) error {
	return status.Errorf(codes.Unimplemented, "method MonitorTransactionState not implemented")
}
func (UnimplementedTransactionServiceServer) mustEmbedUnimplementedTransactionServiceServer() {}
func (UnimplementedTransactionServiceServer) testEmbeddedByValue()                            {}

// UnsafeTransactionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransactionServiceServer will
// result in compilation errors.
type UnsafeTransactionServiceServer interface {
	mustEmbedUnimplementedTransactionServiceServer()
}

func RegisterTransactionServiceServer(s grpc.ServiceRegistrar, srv TransactionServiceServer) {
	// If the following call pancis, it indicates UnimplementedTransactionServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TransactionService_ServiceDesc, srv)
}

func _TransactionService_GetTransactionState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).GetTransactionState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionService_GetTransactionState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).GetTransactionState(ctx, req.(*GetTransactionStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_MonitorTransactionState_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MonitorTransactionStateRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TransactionServiceServer).MonitorTransactionState(m, &grpc.GenericServerStream[MonitorTransactionStateRequest, MonitorTransactionStateResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TransactionService_MonitorTransactionStateServer = grpc.ServerStreamingServer[MonitorTransactionStateResponse]

// TransactionService_ServiceDesc is the grpc.ServiceDesc for TransactionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TransactionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "meshtrade.ledger.transaction.v1.TransactionService",
	HandlerType: (*TransactionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTransactionState",
			Handler:    _TransactionService_GetTransactionState_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "MonitorTransactionState",
			Handler:       _TransactionService_MonitorTransactionState_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "meshtrade/ledger/transaction/v1/service.proto",
}
