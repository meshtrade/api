// Code generated by protoc-gen-meshgo. DO NOT EDIT.
// source: meshtrade/ledger/transaction/v1/service.proto
package transaction_v1

import (
	context "context"
)

// TransactionService_MonitorTransactionStateStream is a transport-agnostic interface for server-side streaming.
// The service implementation uses this interface to send multiple responses to the client.
type TransactionService_MonitorTransactionStateStream interface {
	// Send sends a MonitorTransactionStateResponse to the client.
	// It can be called multiple times to stream responses.
	// Returns an error if the stream is closed or the client has disconnected.
	Send(*MonitorTransactionStateResponse) error

	// Context returns the stream's context.
	// The context is canceled when the client disconnects or the deadline expires.
	Context() context.Context
}

// TransactionService manages Transaction lifecycle.
type TransactionService interface {
	// Retrieves a single Transaction state by the unique identifier of the transaction
	GetTransactionState(ctx context.Context, request *GetTransactionStateRequest) (*GetTransactionStateResponse, error)

	// Monitor Transaction state changes by the unique identifier of the transaction.
	// Server-side streaming method that sends state updates as the transaction progresses.
	MonitorTransactionState(ctx context.Context, request *MonitorTransactionStateRequest, stream TransactionService_MonitorTransactionStateStream) error
}

const TransactionServiceServiceProviderName = "meshtrade-ledger-transaction-v1-TransactionService"
