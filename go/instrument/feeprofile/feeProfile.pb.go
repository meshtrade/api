// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        (unknown)
// source: instrument/feeprofile/feeProfile.proto

package feeprofile

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// FeeProfile defines the fee structure associated with a specific
// Instrument.
// It determines the types of fees applicable, the conditions under
// which they are generated, and the schedule for charging these fees
// to the Issuer.
type FeeProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// InstrumentID references the instrument against which this FeeProfile
	// is applied.
	InstrumentID string `protobuf:"bytes,1,opt,name=instrumentID,proto3" json:"instrumentID,omitempty"`
	// Tokenisation configures the fees related to the tokenisation processes
	// of the Instrument.
	// Tokenisation involves converting the Instrument into digital tokens,
	// which may include actions like:
	// - Minting: The creation of new tokens representing the Instrument.
	// - Burning: The destruction of existing tokens, reducing the total
	// supply.
	Tokenisation *Tokenisation `protobuf:"bytes,2,opt,name=tokenisation,proto3" json:"tokenisation,omitempty"`
	// LifecycleEvents configures the fees associated with various stages in the
	// Instrument's lifecycle.
	// Lifecycle events are significant milestones or actions that may incur
	// fees, such as:
	// - Listing: Fees for listing the Instrument on Mesh.
	// - Primary Market Settlement: Fees related to the settlement of
	// transactions in the primary market.
	//
	// Multiple lifecycle events can be configured and managed within a single
	// FeeProfile.
	LifecycleEvents []*LifecycleEvent `protobuf:"bytes,3,rep,name=lifecycleEvents,proto3" json:"lifecycleEvents,omitempty"`
	// AUM (Assets Under Management) configures the fees related to the
	// management of the Instrument on Mesh.
	// These fees are typically based on the total value of assets being
	// managed on Mesh, or a flat amount.
	Aum *AUM `protobuf:"bytes,4,opt,name=aum,proto3" json:"aum,omitempty"`
}

func (x *FeeProfile) Reset() {
	*x = FeeProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instrument_feeprofile_feeProfile_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeeProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeeProfile) ProtoMessage() {}

func (x *FeeProfile) ProtoReflect() protoreflect.Message {
	mi := &file_instrument_feeprofile_feeProfile_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeeProfile.ProtoReflect.Descriptor instead.
func (*FeeProfile) Descriptor() ([]byte, []int) {
	return file_instrument_feeprofile_feeProfile_proto_rawDescGZIP(), []int{0}
}

func (x *FeeProfile) GetInstrumentID() string {
	if x != nil {
		return x.InstrumentID
	}
	return ""
}

func (x *FeeProfile) GetTokenisation() *Tokenisation {
	if x != nil {
		return x.Tokenisation
	}
	return nil
}

func (x *FeeProfile) GetLifecycleEvents() []*LifecycleEvent {
	if x != nil {
		return x.LifecycleEvents
	}
	return nil
}

func (x *FeeProfile) GetAum() *AUM {
	if x != nil {
		return x.Aum
	}
	return nil
}

var File_instrument_feeprofile_feeProfile_proto protoreflect.FileDescriptor

var file_instrument_feeprofile_feeProfile_proto_rawDesc = []byte{
	0x0a, 0x26, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x66, 0x65, 0x65,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2f, 0x66, 0x65, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x19, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x66, 0x65, 0x65, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x1a, 0x28, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2f,
	0x66, 0x65, 0x65, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x69, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2a, 0x69,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x66, 0x65, 0x65, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x2f, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x69, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x66, 0x65, 0x65, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x2f, 0x61, 0x75, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x84, 0x02, 0x0a, 0x0a, 0x46,
	0x65, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x4b, 0x0a,
	0x0c, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x69, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x66, 0x65, 0x65, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x69, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x69, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x53, 0x0a, 0x0f, 0x6c, 0x69,
	0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x66, 0x65, 0x65, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e,
	0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x0f,
	0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x30, 0x0a, 0x03, 0x61, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x66, 0x65,
	0x65, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x41, 0x55, 0x4d, 0x52, 0x03, 0x61, 0x75,
	0x6d, 0x42, 0x33, 0x5a, 0x31, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x6d, 0x65, 0x73, 0x68, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x6f,
	0x2f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x66, 0x65, 0x65, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_instrument_feeprofile_feeProfile_proto_rawDescOnce sync.Once
	file_instrument_feeprofile_feeProfile_proto_rawDescData = file_instrument_feeprofile_feeProfile_proto_rawDesc
)

func file_instrument_feeprofile_feeProfile_proto_rawDescGZIP() []byte {
	file_instrument_feeprofile_feeProfile_proto_rawDescOnce.Do(func() {
		file_instrument_feeprofile_feeProfile_proto_rawDescData = protoimpl.X.CompressGZIP(file_instrument_feeprofile_feeProfile_proto_rawDescData)
	})
	return file_instrument_feeprofile_feeProfile_proto_rawDescData
}

var file_instrument_feeprofile_feeProfile_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_instrument_feeprofile_feeProfile_proto_goTypes = []interface{}{
	(*FeeProfile)(nil),     // 0: api.instrument.feeprofile.FeeProfile
	(*Tokenisation)(nil),   // 1: api.instrument.feeprofile.Tokenisation
	(*LifecycleEvent)(nil), // 2: api.instrument.feeprofile.LifecycleEvent
	(*AUM)(nil),            // 3: api.instrument.feeprofile.AUM
}
var file_instrument_feeprofile_feeProfile_proto_depIdxs = []int32{
	1, // 0: api.instrument.feeprofile.FeeProfile.tokenisation:type_name -> api.instrument.feeprofile.Tokenisation
	2, // 1: api.instrument.feeprofile.FeeProfile.lifecycleEvents:type_name -> api.instrument.feeprofile.LifecycleEvent
	3, // 2: api.instrument.feeprofile.FeeProfile.aum:type_name -> api.instrument.feeprofile.AUM
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_instrument_feeprofile_feeProfile_proto_init() }
func file_instrument_feeprofile_feeProfile_proto_init() {
	if File_instrument_feeprofile_feeProfile_proto != nil {
		return
	}
	file_instrument_feeprofile_tokenisation_proto_init()
	file_instrument_feeprofile_lifecycleEvent_proto_init()
	file_instrument_feeprofile_aum_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_instrument_feeprofile_feeProfile_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeeProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_instrument_feeprofile_feeProfile_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_instrument_feeprofile_feeProfile_proto_goTypes,
		DependencyIndexes: file_instrument_feeprofile_feeProfile_proto_depIdxs,
		MessageInfos:      file_instrument_feeprofile_feeProfile_proto_msgTypes,
	}.Build()
	File_instrument_feeprofile_feeProfile_proto = out.File
	file_instrument_feeprofile_feeProfile_proto_rawDesc = nil
	file_instrument_feeprofile_feeProfile_proto_goTypes = nil
	file_instrument_feeprofile_feeProfile_proto_depIdxs = nil
}
