// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: instrument/feeprofile/feeProfile.proto

package feeprofile

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// FeeProfile defines the fee structure associated with a specific
// Instrument.
// It determines the types of fees applicable, the conditions under
// which they are generated, and the schedule for charging these fees
// to the Issuer.
type FeeProfile struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// InstrumentID references the instrument against which this FeeProfile
	// is applied.
	InstrumentID string `protobuf:"bytes,1,opt,name=instrumentID,proto3" json:"instrumentID,omitempty"`
	// Tokenisation configures the fees related to the tokenisation processes
	// of the Instrument.
	// Tokenisation involves converting the Instrument into digital tokens,
	// which may include actions like:
	// - Minting: The creation of new tokens representing the Instrument.
	// - Burning: The destruction of existing tokens, reducing the total
	// supply.
	Tokenisation *Tokenisation `protobuf:"bytes,2,opt,name=tokenisation,proto3" json:"tokenisation,omitempty"`
	// LifecycleEvents configures the fees associated with various stages in the
	// Instrument's lifecycle.
	// Lifecycle events are significant milestones or actions that may incur
	// fees, such as:
	// - Listing: Fees for listing the Instrument on Mesh.
	// - Primary Market Settlement: Fees related to the settlement of
	// transactions in the primary market.
	//
	// Multiple lifecycle events can be configured and managed within a single
	// FeeProfile.
	LifecycleEvents []*LifecycleEvent `protobuf:"bytes,3,rep,name=lifecycleEvents,proto3" json:"lifecycleEvents,omitempty"`
	// AUM (Assets Under Management) configures the fees related to the
	// management of the Instrument on Mesh.
	// These fees are typically based on the total value of assets being
	// managed on Mesh, or a flat amount.
	Aum           *AUM `protobuf:"bytes,4,opt,name=aum,proto3" json:"aum,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FeeProfile) Reset() {
	*x = FeeProfile{}
	mi := &file_instrument_feeprofile_feeProfile_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FeeProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeeProfile) ProtoMessage() {}

func (x *FeeProfile) ProtoReflect() protoreflect.Message {
	mi := &file_instrument_feeprofile_feeProfile_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeeProfile.ProtoReflect.Descriptor instead.
func (*FeeProfile) Descriptor() ([]byte, []int) {
	return file_instrument_feeprofile_feeProfile_proto_rawDescGZIP(), []int{0}
}

func (x *FeeProfile) GetInstrumentID() string {
	if x != nil {
		return x.InstrumentID
	}
	return ""
}

func (x *FeeProfile) GetTokenisation() *Tokenisation {
	if x != nil {
		return x.Tokenisation
	}
	return nil
}

func (x *FeeProfile) GetLifecycleEvents() []*LifecycleEvent {
	if x != nil {
		return x.LifecycleEvents
	}
	return nil
}

func (x *FeeProfile) GetAum() *AUM {
	if x != nil {
		return x.Aum
	}
	return nil
}

var File_instrument_feeprofile_feeProfile_proto protoreflect.FileDescriptor

const file_instrument_feeprofile_feeProfile_proto_rawDesc = "" +
	"\n" +
	"&instrument/feeprofile/feeProfile.proto\x12\x19api.instrument.feeprofile\x1a(instrument/feeprofile/tokenisation.proto\x1a*instrument/feeprofile/lifecycleEvent.proto\x1a\x1finstrument/feeprofile/aum.proto\"\x84\x02\n" +
	"\n" +
	"FeeProfile\x12\"\n" +
	"\finstrumentID\x18\x01 \x01(\tR\finstrumentID\x12K\n" +
	"\ftokenisation\x18\x02 \x01(\v2'.api.instrument.feeprofile.TokenisationR\ftokenisation\x12S\n" +
	"\x0flifecycleEvents\x18\x03 \x03(\v2).api.instrument.feeprofile.LifecycleEventR\x0flifecycleEvents\x120\n" +
	"\x03aum\x18\x04 \x01(\v2\x1e.api.instrument.feeprofile.AUMR\x03aumB3Z1github.com/meshtrade/api/go/instrument/feeprofileb\x06proto3"

var (
	file_instrument_feeprofile_feeProfile_proto_rawDescOnce sync.Once
	file_instrument_feeprofile_feeProfile_proto_rawDescData []byte
)

func file_instrument_feeprofile_feeProfile_proto_rawDescGZIP() []byte {
	file_instrument_feeprofile_feeProfile_proto_rawDescOnce.Do(func() {
		file_instrument_feeprofile_feeProfile_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_instrument_feeprofile_feeProfile_proto_rawDesc), len(file_instrument_feeprofile_feeProfile_proto_rawDesc)))
	})
	return file_instrument_feeprofile_feeProfile_proto_rawDescData
}

var file_instrument_feeprofile_feeProfile_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_instrument_feeprofile_feeProfile_proto_goTypes = []any{
	(*FeeProfile)(nil),     // 0: api.instrument.feeprofile.FeeProfile
	(*Tokenisation)(nil),   // 1: api.instrument.feeprofile.Tokenisation
	(*LifecycleEvent)(nil), // 2: api.instrument.feeprofile.LifecycleEvent
	(*AUM)(nil),            // 3: api.instrument.feeprofile.AUM
}
var file_instrument_feeprofile_feeProfile_proto_depIdxs = []int32{
	1, // 0: api.instrument.feeprofile.FeeProfile.tokenisation:type_name -> api.instrument.feeprofile.Tokenisation
	2, // 1: api.instrument.feeprofile.FeeProfile.lifecycleEvents:type_name -> api.instrument.feeprofile.LifecycleEvent
	3, // 2: api.instrument.feeprofile.FeeProfile.aum:type_name -> api.instrument.feeprofile.AUM
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_instrument_feeprofile_feeProfile_proto_init() }
func file_instrument_feeprofile_feeProfile_proto_init() {
	if File_instrument_feeprofile_feeProfile_proto != nil {
		return
	}
	file_instrument_feeprofile_tokenisation_proto_init()
	file_instrument_feeprofile_lifecycleEvent_proto_init()
	file_instrument_feeprofile_aum_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_instrument_feeprofile_feeProfile_proto_rawDesc), len(file_instrument_feeprofile_feeProfile_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_instrument_feeprofile_feeProfile_proto_goTypes,
		DependencyIndexes: file_instrument_feeprofile_feeProfile_proto_depIdxs,
		MessageInfos:      file_instrument_feeprofile_feeProfile_proto_msgTypes,
	}.Build()
	File_instrument_feeprofile_feeProfile_proto = out.File
	file_instrument_feeprofile_feeProfile_proto_goTypes = nil
	file_instrument_feeprofile_feeProfile_proto_depIdxs = nil
}
