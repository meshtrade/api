// Code generated by protoc-gen-meshgo. DO NOT EDIT.
// source: api/proto/instrument/feeprofile/service.proto
package feeprofile

import (
	context "context"
	fmt "fmt"
	log "github.com/rs/zerolog/log"
	trace "go.opentelemetry.io/otel/trace"
	grpc "google.golang.org/grpc"
)

// Ensure that GRPCClientService implements the Service interface
var _ Service = &GRPCClientService{}

// GRPCClientService is a gRPC client implementation of the Service interface.
type GRPCClientService struct {
	tracer     trace.Tracer
	grpcClient ServiceClient
}

func NewGRPCClientService(
	tracer trace.Tracer,
	grpcClientConnection *grpc.ClientConn,
) *GRPCClientService {
	return &GRPCClientService{
		tracer:     tracer,
		grpcClient: NewServiceClient(grpcClientConnection),
	}
}

func (g *GRPCClientService) Create(ctx context.Context, request *CreateRequest) (*CreateResponse, error) {
	ctx, span := g.tracer.Start(
		ctx,
		ServiceServiceProviderName+"Create",
	)
	defer span.End()

	// call given implementation of the adapted service provider interface
	createResponse, err := g.grpcClient.Create(ctx, request)
	if err != nil {
		log.Ctx(ctx).Error().Err(err).Msg("could not Create")
		return nil, fmt.Errorf("could not Create: %s", err)
	}

	return createResponse, nil
}

func (g *GRPCClientService) Update(ctx context.Context, request *UpdateRequest) (*UpdateResponse, error) {
	ctx, span := g.tracer.Start(
		ctx,
		ServiceServiceProviderName+"Update",
	)
	defer span.End()

	// call given implementation of the adapted service provider interface
	updateResponse, err := g.grpcClient.Update(ctx, request)
	if err != nil {
		log.Ctx(ctx).Error().Err(err).Msg("could not Update")
		return nil, fmt.Errorf("could not Update: %s", err)
	}

	return updateResponse, nil
}

func (g *GRPCClientService) List(ctx context.Context, request *ListRequest) (*ListResponse, error) {
	ctx, span := g.tracer.Start(
		ctx,
		ServiceServiceProviderName+"List",
	)
	defer span.End()

	// call given implementation of the adapted service provider interface
	listResponse, err := g.grpcClient.List(ctx, request)
	if err != nil {
		log.Ctx(ctx).Error().Err(err).Msg("could not List")
		return nil, fmt.Errorf("could not List: %s", err)
	}

	return listResponse, nil
}

func (g *GRPCClientService) Get(ctx context.Context, request *GetRequest) (*GetResponse, error) {
	ctx, span := g.tracer.Start(
		ctx,
		ServiceServiceProviderName+"Get",
	)
	defer span.End()

	// call given implementation of the adapted service provider interface
	getResponse, err := g.grpcClient.Get(ctx, request)
	if err != nil {
		log.Ctx(ctx).Error().Err(err).Msg("could not Get")
		return nil, fmt.Errorf("could not Get: %s", err)
	}

	return getResponse, nil
}
