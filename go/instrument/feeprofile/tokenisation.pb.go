// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: api/proto/instrument/feeprofile/tokenisation.proto

package feeprofile

import (
	ledger "github.com/meshtrade/api/go/ledger"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Tokenisation configures the fees related to the tokenisation
// processes of the Instrument.
type Tokenisation struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// FirstTimeMintingAmount is the fee amount charged when
	// minting tokens of the Instrument for the first time.
	FirstTimeMintingAmount *ledger.Amount `protobuf:"bytes,1,opt,name=firstTimeMintingAmount,proto3" json:"firstTimeMintingAmount,omitempty"`
	// MintingAmount is minting fee charged per token minted.
	MintingAmount *ledger.Amount `protobuf:"bytes,2,opt,name=mintingAmount,proto3" json:"mintingAmount,omitempty"`
	// BurningAmount is minting fee charged per token burned.
	BurningAmount *ledger.Amount `protobuf:"bytes,3,opt,name=burningAmount,proto3" json:"burningAmount,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Tokenisation) Reset() {
	*x = Tokenisation{}
	mi := &file_api_proto_instrument_feeprofile_tokenisation_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Tokenisation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tokenisation) ProtoMessage() {}

func (x *Tokenisation) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_instrument_feeprofile_tokenisation_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tokenisation.ProtoReflect.Descriptor instead.
func (*Tokenisation) Descriptor() ([]byte, []int) {
	return file_api_proto_instrument_feeprofile_tokenisation_proto_rawDescGZIP(), []int{0}
}

func (x *Tokenisation) GetFirstTimeMintingAmount() *ledger.Amount {
	if x != nil {
		return x.FirstTimeMintingAmount
	}
	return nil
}

func (x *Tokenisation) GetMintingAmount() *ledger.Amount {
	if x != nil {
		return x.MintingAmount
	}
	return nil
}

func (x *Tokenisation) GetBurningAmount() *ledger.Amount {
	if x != nil {
		return x.BurningAmount
	}
	return nil
}

var File_api_proto_instrument_feeprofile_tokenisation_proto protoreflect.FileDescriptor

const file_api_proto_instrument_feeprofile_tokenisation_proto_rawDesc = "" +
	"\n" +
	"2api/proto/instrument/feeprofile/tokenisation.proto\x12\x19api.instrument.feeprofile\x1a\x1dapi/proto/ledger/amount.proto\"\xce\x01\n" +
	"\fTokenisation\x12J\n" +
	"\x16firstTimeMintingAmount\x18\x01 \x01(\v2\x12.api.ledger.AmountR\x16firstTimeMintingAmount\x128\n" +
	"\rmintingAmount\x18\x02 \x01(\v2\x12.api.ledger.AmountR\rmintingAmount\x128\n" +
	"\rburningAmount\x18\x03 \x01(\v2\x12.api.ledger.AmountR\rburningAmountB3Z1github.com/meshtrade/api/go/instrument/feeprofileb\x06proto3"

var (
	file_api_proto_instrument_feeprofile_tokenisation_proto_rawDescOnce sync.Once
	file_api_proto_instrument_feeprofile_tokenisation_proto_rawDescData []byte
)

func file_api_proto_instrument_feeprofile_tokenisation_proto_rawDescGZIP() []byte {
	file_api_proto_instrument_feeprofile_tokenisation_proto_rawDescOnce.Do(func() {
		file_api_proto_instrument_feeprofile_tokenisation_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_api_proto_instrument_feeprofile_tokenisation_proto_rawDesc), len(file_api_proto_instrument_feeprofile_tokenisation_proto_rawDesc)))
	})
	return file_api_proto_instrument_feeprofile_tokenisation_proto_rawDescData
}

var file_api_proto_instrument_feeprofile_tokenisation_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_api_proto_instrument_feeprofile_tokenisation_proto_goTypes = []any{
	(*Tokenisation)(nil),  // 0: api.instrument.feeprofile.Tokenisation
	(*ledger.Amount)(nil), // 1: api.ledger.Amount
}
var file_api_proto_instrument_feeprofile_tokenisation_proto_depIdxs = []int32{
	1, // 0: api.instrument.feeprofile.Tokenisation.firstTimeMintingAmount:type_name -> api.ledger.Amount
	1, // 1: api.instrument.feeprofile.Tokenisation.mintingAmount:type_name -> api.ledger.Amount
	1, // 2: api.instrument.feeprofile.Tokenisation.burningAmount:type_name -> api.ledger.Amount
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_api_proto_instrument_feeprofile_tokenisation_proto_init() }
func file_api_proto_instrument_feeprofile_tokenisation_proto_init() {
	if File_api_proto_instrument_feeprofile_tokenisation_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_api_proto_instrument_feeprofile_tokenisation_proto_rawDesc), len(file_api_proto_instrument_feeprofile_tokenisation_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_proto_instrument_feeprofile_tokenisation_proto_goTypes,
		DependencyIndexes: file_api_proto_instrument_feeprofile_tokenisation_proto_depIdxs,
		MessageInfos:      file_api_proto_instrument_feeprofile_tokenisation_proto_msgTypes,
	}.Build()
	File_api_proto_instrument_feeprofile_tokenisation_proto = out.File
	file_api_proto_instrument_feeprofile_tokenisation_proto_goTypes = nil
	file_api_proto_instrument_feeprofile_tokenisation_proto_depIdxs = nil
}
