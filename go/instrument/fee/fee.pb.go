// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v5.28.0
// source: instrument/fee/fee.proto

package fee

import (
	ledger "github.com/meshtrade/api/go/ledger"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// State is the state of a Fee in its state diagram.
type State int32

const (
	State_UNDEFINED_STATE           State = 0 // 0 not used to prevent unexpected default value behaviour.
	State_UPCOMING_STATE            State = 1
	State_DUE_STATE                 State = 2
	State_PAYMENT_IN_PROGRESS_STATE State = 3
	State_FAILED_STATE              State = 4
	State_CANCELLED_STATE           State = 5
	State_PAID_STATE                State = 6
)

// Enum value maps for State.
var (
	State_name = map[int32]string{
		0: "UNDEFINED_STATE",
		1: "UPCOMING_STATE",
		2: "DUE_STATE",
		3: "PAYMENT_IN_PROGRESS_STATE",
		4: "FAILED_STATE",
		5: "CANCELLED_STATE",
		6: "PAID_STATE",
	}
	State_value = map[string]int32{
		"UNDEFINED_STATE":           0,
		"UPCOMING_STATE":            1,
		"DUE_STATE":                 2,
		"PAYMENT_IN_PROGRESS_STATE": 3,
		"FAILED_STATE":              4,
		"CANCELLED_STATE":           5,
		"PAID_STATE":                6,
	}
)

func (x State) Enum() *State {
	p := new(State)
	*p = x
	return p
}

func (x State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (State) Descriptor() protoreflect.EnumDescriptor {
	return file_instrument_fee_fee_proto_enumTypes[0].Descriptor()
}

func (State) Type() protoreflect.EnumType {
	return &file_instrument_fee_fee_proto_enumTypes[0]
}

func (x State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use State.Descriptor instead.
func (State) EnumDescriptor() ([]byte, []int) {
	return file_instrument_fee_fee_proto_rawDescGZIP(), []int{0}
}

// Category defines the different types of Fees that can be applied to an instrument.
type Category int32

const (
	Category_UNDEFINED_CATEGORY                 Category = 0 // 0 not used to prevent unexpected default value behaviour.
	Category_TOKENISATION_CATEGORY              Category = 1
	Category_LISTING_CATEGORY                   Category = 2
	Category_PRIMARY_MARKET_SETTLEMENT_CATEGORY Category = 3
	Category_AUM_CATEGORY                       Category = 4
)

// Enum value maps for Category.
var (
	Category_name = map[int32]string{
		0: "UNDEFINED_CATEGORY",
		1: "TOKENISATION_CATEGORY",
		2: "LISTING_CATEGORY",
		3: "PRIMARY_MARKET_SETTLEMENT_CATEGORY",
		4: "AUM_CATEGORY",
	}
	Category_value = map[string]int32{
		"UNDEFINED_CATEGORY":                 0,
		"TOKENISATION_CATEGORY":              1,
		"LISTING_CATEGORY":                   2,
		"PRIMARY_MARKET_SETTLEMENT_CATEGORY": 3,
		"AUM_CATEGORY":                       4,
	}
)

func (x Category) Enum() *Category {
	p := new(Category)
	*p = x
	return p
}

func (x Category) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Category) Descriptor() protoreflect.EnumDescriptor {
	return file_instrument_fee_fee_proto_enumTypes[1].Descriptor()
}

func (Category) Type() protoreflect.EnumType {
	return &file_instrument_fee_fee_proto_enumTypes[1]
}

func (x Category) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Category.Descriptor instead.
func (Category) EnumDescriptor() ([]byte, []int) {
	return file_instrument_fee_fee_proto_rawDescGZIP(), []int{1}
}

// Fee represents a financial charge associated with an Instrument,
// imposed by the Instrument Issuer.
// A Fee is generated using a FeeProfile, which determines its amount
// and other related fields.
// Only Mesh is authorized to create and update Fee records.
//
// @bson-marshalled
type Fee struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID is a universally unique identifier set in the application layer.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// InstrumentName refers to the instrument against which this Fee applied.
	InstrumentName string `protobuf:"bytes,2,opt,name=instrumentName,proto3" json:"instrumentName,omitempty"`
	// State is the fee status.
	State State `protobuf:"varint,3,opt,name=state,proto3,enum=fee.State" json:"state,omitempty"`
	// Description is the description of this Fee.
	// It explains the purpose and context behind the charge.
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// AmountInclVAT is the total amount charged, inclusive of VAT.
	// This field captures the gross charge that the instrument issuer must pay.
	AmountInclVAT *ledger.Amount `protobuf:"bytes,5,opt,name=amountInclVAT,proto3" json:"amountInclVAT,omitempty"`
	// VATAmount is the portion of the AmountInclVAT that constitutes VAT.
	VatAmount *ledger.Amount `protobuf:"bytes,6,opt,name=vatAmount,proto3" json:"vatAmount,omitempty"`
	// Category is the type of Fee being applied. It categorises fees based on
	// their purpose and the services they correspond to. Supported categories
	// include:
	// - Tokenisation: Fee for tokenizing assets.
	// - Listing: Fee for listing the instrument on a platform.
	// - PrimaryMarketSettlement: Fee related to primary market transaction
	// settlements.
	// - AUM: Assets Under Management fee.
	Category Category `protobuf:"varint,7,opt,name=category,proto3,enum=fee.Category" json:"category,omitempty"`
	// PaymentDate is the date on which the Fee was paid.
	PaymentDate *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=paymentDate,proto3" json:"paymentDate,omitempty"`
	// Data is the additional contextual information related to calculation,
	// taxation and billing of the Fee.
	Data *Data `protobuf:"bytes,9,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *Fee) Reset() {
	*x = Fee{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instrument_fee_fee_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Fee) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Fee) ProtoMessage() {}

func (x *Fee) ProtoReflect() protoreflect.Message {
	mi := &file_instrument_fee_fee_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Fee.ProtoReflect.Descriptor instead.
func (*Fee) Descriptor() ([]byte, []int) {
	return file_instrument_fee_fee_proto_rawDescGZIP(), []int{0}
}

func (x *Fee) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Fee) GetInstrumentName() string {
	if x != nil {
		return x.InstrumentName
	}
	return ""
}

func (x *Fee) GetState() State {
	if x != nil {
		return x.State
	}
	return State_UNDEFINED_STATE
}

func (x *Fee) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Fee) GetAmountInclVAT() *ledger.Amount {
	if x != nil {
		return x.AmountInclVAT
	}
	return nil
}

func (x *Fee) GetVatAmount() *ledger.Amount {
	if x != nil {
		return x.VatAmount
	}
	return nil
}

func (x *Fee) GetCategory() Category {
	if x != nil {
		return x.Category
	}
	return Category_UNDEFINED_CATEGORY
}

func (x *Fee) GetPaymentDate() *timestamppb.Timestamp {
	if x != nil {
		return x.PaymentDate
	}
	return nil
}

func (x *Fee) GetData() *Data {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_instrument_fee_fee_proto protoreflect.FileDescriptor

var file_instrument_fee_fee_proto_rawDesc = []byte{
	0x0a, 0x18, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x66, 0x65, 0x65,
	0x2f, 0x66, 0x65, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x66, 0x65, 0x65, 0x1a,
	0x19, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x66, 0x65, 0x65, 0x2f,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x72, 0x2f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xed, 0x02, 0x0a, 0x03, 0x46, 0x65, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0a, 0x2e, 0x66, 0x65, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x0d, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e,
	0x63, 0x6c, 0x56, 0x41, 0x54, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x72, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0d, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x6e, 0x63, 0x6c, 0x56, 0x41, 0x54, 0x12, 0x2c, 0x0a, 0x09, 0x76, 0x61,
	0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x09, 0x76,
	0x61, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x66, 0x65, 0x65,
	0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x12, 0x3c, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61,
	0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x1d, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x09, 0x2e, 0x66, 0x65, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x2a, 0x95, 0x01, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x55, 0x4e,
	0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0x00, 0x12,
	0x12, 0x0a, 0x0e, 0x55, 0x50, 0x43, 0x4f, 0x4d, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x55, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x4e,
	0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10,
	0x03, 0x12, 0x10, 0x0a, 0x0c, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0x05, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x41, 0x49, 0x44,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0x06, 0x2a, 0x8d, 0x01, 0x0a, 0x08, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x12, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e,
	0x45, 0x44, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x10, 0x00, 0x12, 0x19, 0x0a,
	0x15, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x49, 0x53, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x41,
	0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x49, 0x53, 0x54,
	0x49, 0x4e, 0x47, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x10, 0x02, 0x12, 0x26,
	0x0a, 0x22, 0x50, 0x52, 0x49, 0x4d, 0x41, 0x52, 0x59, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54,
	0x5f, 0x53, 0x45, 0x54, 0x54, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x41, 0x54, 0x45,
	0x47, 0x4f, 0x52, 0x59, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x55, 0x4d, 0x5f, 0x43, 0x41,
	0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x10, 0x04, 0x42, 0x2c, 0x5a, 0x2a, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x65, 0x73, 0x68, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x6f, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x2f, 0x66, 0x65, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_instrument_fee_fee_proto_rawDescOnce sync.Once
	file_instrument_fee_fee_proto_rawDescData = file_instrument_fee_fee_proto_rawDesc
)

func file_instrument_fee_fee_proto_rawDescGZIP() []byte {
	file_instrument_fee_fee_proto_rawDescOnce.Do(func() {
		file_instrument_fee_fee_proto_rawDescData = protoimpl.X.CompressGZIP(file_instrument_fee_fee_proto_rawDescData)
	})
	return file_instrument_fee_fee_proto_rawDescData
}

var file_instrument_fee_fee_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_instrument_fee_fee_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_instrument_fee_fee_proto_goTypes = []interface{}{
	(State)(0),                    // 0: fee.State
	(Category)(0),                 // 1: fee.Category
	(*Fee)(nil),                   // 2: fee.Fee
	(*ledger.Amount)(nil),         // 3: ledger.Amount
	(*timestamppb.Timestamp)(nil), // 4: google.protobuf.Timestamp
	(*Data)(nil),                  // 5: fee.Data
}
var file_instrument_fee_fee_proto_depIdxs = []int32{
	0, // 0: fee.Fee.state:type_name -> fee.State
	3, // 1: fee.Fee.amountInclVAT:type_name -> ledger.Amount
	3, // 2: fee.Fee.vatAmount:type_name -> ledger.Amount
	1, // 3: fee.Fee.category:type_name -> fee.Category
	4, // 4: fee.Fee.paymentDate:type_name -> google.protobuf.Timestamp
	5, // 5: fee.Fee.data:type_name -> fee.Data
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_instrument_fee_fee_proto_init() }
func file_instrument_fee_fee_proto_init() {
	if File_instrument_fee_fee_proto != nil {
		return
	}
	file_instrument_fee_data_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_instrument_fee_fee_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Fee); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_instrument_fee_fee_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_instrument_fee_fee_proto_goTypes,
		DependencyIndexes: file_instrument_fee_fee_proto_depIdxs,
		EnumInfos:         file_instrument_fee_fee_proto_enumTypes,
		MessageInfos:      file_instrument_fee_fee_proto_msgTypes,
	}.Build()
	File_instrument_fee_fee_proto = out.File
	file_instrument_fee_fee_proto_rawDesc = nil
	file_instrument_fee_fee_proto_goTypes = nil
	file_instrument_fee_fee_proto_depIdxs = nil
}
