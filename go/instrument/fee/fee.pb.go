// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: api/proto/instrument/fee/fee.proto

package fee

import (
	ledger "github.com/meshtrade/api/go/ledger"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// State is the state of a Fee in its state diagram.
type State int32

const (
	State_UNDEFINED_STATE           State = 0 // 0 not used to prevent unexpected default value behaviour.
	State_UPCOMING_STATE            State = 1
	State_DUE_STATE                 State = 2
	State_PAYMENT_IN_PROGRESS_STATE State = 3
	State_FAILED_STATE              State = 4
	State_CANCELLED_STATE           State = 5
	State_PAID_STATE                State = 6
)

// Enum value maps for State.
var (
	State_name = map[int32]string{
		0: "UNDEFINED_STATE",
		1: "UPCOMING_STATE",
		2: "DUE_STATE",
		3: "PAYMENT_IN_PROGRESS_STATE",
		4: "FAILED_STATE",
		5: "CANCELLED_STATE",
		6: "PAID_STATE",
	}
	State_value = map[string]int32{
		"UNDEFINED_STATE":           0,
		"UPCOMING_STATE":            1,
		"DUE_STATE":                 2,
		"PAYMENT_IN_PROGRESS_STATE": 3,
		"FAILED_STATE":              4,
		"CANCELLED_STATE":           5,
		"PAID_STATE":                6,
	}
)

func (x State) Enum() *State {
	p := new(State)
	*p = x
	return p
}

func (x State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (State) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_instrument_fee_fee_proto_enumTypes[0].Descriptor()
}

func (State) Type() protoreflect.EnumType {
	return &file_api_proto_instrument_fee_fee_proto_enumTypes[0]
}

func (x State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use State.Descriptor instead.
func (State) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_instrument_fee_fee_proto_rawDescGZIP(), []int{0}
}

// Category defines the different types of Fees that can be applied to an instrument.
type Category int32

const (
	Category_UNDEFINED_CATEGORY                 Category = 0 // 0 not used to prevent unexpected default value behaviour.
	Category_TOKENISATION_CATEGORY              Category = 1
	Category_LISTING_CATEGORY                   Category = 2
	Category_PRIMARY_MARKET_SETTLEMENT_CATEGORY Category = 3
	Category_AUM_CATEGORY                       Category = 4
)

// Enum value maps for Category.
var (
	Category_name = map[int32]string{
		0: "UNDEFINED_CATEGORY",
		1: "TOKENISATION_CATEGORY",
		2: "LISTING_CATEGORY",
		3: "PRIMARY_MARKET_SETTLEMENT_CATEGORY",
		4: "AUM_CATEGORY",
	}
	Category_value = map[string]int32{
		"UNDEFINED_CATEGORY":                 0,
		"TOKENISATION_CATEGORY":              1,
		"LISTING_CATEGORY":                   2,
		"PRIMARY_MARKET_SETTLEMENT_CATEGORY": 3,
		"AUM_CATEGORY":                       4,
	}
)

func (x Category) Enum() *Category {
	p := new(Category)
	*p = x
	return p
}

func (x Category) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Category) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_instrument_fee_fee_proto_enumTypes[1].Descriptor()
}

func (Category) Type() protoreflect.EnumType {
	return &file_api_proto_instrument_fee_fee_proto_enumTypes[1]
}

func (x Category) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Category.Descriptor instead.
func (Category) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_instrument_fee_fee_proto_rawDescGZIP(), []int{1}
}

// Fee represents a financial charge associated with an Instrument,
// imposed on the Instrument Issuer.
// A Fee is generated using a FeeProfile, which determines its amount
// and other related fields.
// Only Mesh is authorized to create and update Fee records.
//
// @bson-marshalled
type Fee struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID is a universally unique identifier set in the application layer.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// InstrumentName refers to the instrument against which this Fee applied.
	InstrumentName string `protobuf:"bytes,2,opt,name=instrumentName,proto3" json:"instrumentName,omitempty"`
	// State is the fee status.
	State State `protobuf:"varint,3,opt,name=state,proto3,enum=api.instrument.fee.State" json:"state,omitempty"`
	// Description is the description of this Fee.
	// It explains the purpose and context behind the charge.
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// AmountInclVAT is the total amount charged, inclusive of VAT.
	// This field captures the gross charge that the instrument issuer must pay.
	AmountInclVAT *ledger.Amount `protobuf:"bytes,5,opt,name=amountInclVAT,proto3" json:"amountInclVAT,omitempty"`
	// VATAmount is the portion of the AmountInclVAT that constitutes VAT.
	VatAmount *ledger.Amount `protobuf:"bytes,6,opt,name=vatAmount,proto3" json:"vatAmount,omitempty"`
	// Category is the type of Fee being applied. It categorises fees based on
	// their purpose and the services they correspond to. Supported categories
	// include:
	// - Tokenisation: Fee for tokenizing assets.
	// - Listing: Fee for listing the instrument on a platform.
	// - PrimaryMarketSettlement: Fee related to primary market transaction
	// settlements.
	// - AUM: Assets Under Management fee.
	Category Category `protobuf:"varint,7,opt,name=category,proto3,enum=api.instrument.fee.Category" json:"category,omitempty"`
	// PaymentDate is the date on which the Fee was paid.
	PaymentDate *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=paymentDate,proto3" json:"paymentDate,omitempty"`
	// Data is the additional contextual information related to calculation,
	// taxation and billing of the Fee.
	Data          *Data `protobuf:"bytes,9,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Fee) Reset() {
	*x = Fee{}
	mi := &file_api_proto_instrument_fee_fee_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Fee) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Fee) ProtoMessage() {}

func (x *Fee) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_instrument_fee_fee_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Fee.ProtoReflect.Descriptor instead.
func (*Fee) Descriptor() ([]byte, []int) {
	return file_api_proto_instrument_fee_fee_proto_rawDescGZIP(), []int{0}
}

func (x *Fee) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Fee) GetInstrumentName() string {
	if x != nil {
		return x.InstrumentName
	}
	return ""
}

func (x *Fee) GetState() State {
	if x != nil {
		return x.State
	}
	return State_UNDEFINED_STATE
}

func (x *Fee) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Fee) GetAmountInclVAT() *ledger.Amount {
	if x != nil {
		return x.AmountInclVAT
	}
	return nil
}

func (x *Fee) GetVatAmount() *ledger.Amount {
	if x != nil {
		return x.VatAmount
	}
	return nil
}

func (x *Fee) GetCategory() Category {
	if x != nil {
		return x.Category
	}
	return Category_UNDEFINED_CATEGORY
}

func (x *Fee) GetPaymentDate() *timestamppb.Timestamp {
	if x != nil {
		return x.PaymentDate
	}
	return nil
}

func (x *Fee) GetData() *Data {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_api_proto_instrument_fee_fee_proto protoreflect.FileDescriptor

const file_api_proto_instrument_fee_fee_proto_rawDesc = "" +
	"\n" +
	"\"api/proto/instrument/fee/fee.proto\x12\x12api.instrument.fee\x1a#api/proto/instrument/fee/data.proto\x1a\x1dapi/proto/ledger/amount.proto\x1a\x1fgoogle/protobuf/timestamp.proto\"\xa2\x03\n" +
	"\x03Fee\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12&\n" +
	"\x0einstrumentName\x18\x02 \x01(\tR\x0einstrumentName\x12/\n" +
	"\x05state\x18\x03 \x01(\x0e2\x19.api.instrument.fee.StateR\x05state\x12 \n" +
	"\vdescription\x18\x04 \x01(\tR\vdescription\x128\n" +
	"\ramountInclVAT\x18\x05 \x01(\v2\x12.api.ledger.AmountR\ramountInclVAT\x120\n" +
	"\tvatAmount\x18\x06 \x01(\v2\x12.api.ledger.AmountR\tvatAmount\x128\n" +
	"\bcategory\x18\a \x01(\x0e2\x1c.api.instrument.fee.CategoryR\bcategory\x12<\n" +
	"\vpaymentDate\x18\b \x01(\v2\x1a.google.protobuf.TimestampR\vpaymentDate\x12,\n" +
	"\x04data\x18\t \x01(\v2\x18.api.instrument.fee.DataR\x04data*\x95\x01\n" +
	"\x05State\x12\x13\n" +
	"\x0fUNDEFINED_STATE\x10\x00\x12\x12\n" +
	"\x0eUPCOMING_STATE\x10\x01\x12\r\n" +
	"\tDUE_STATE\x10\x02\x12\x1d\n" +
	"\x19PAYMENT_IN_PROGRESS_STATE\x10\x03\x12\x10\n" +
	"\fFAILED_STATE\x10\x04\x12\x13\n" +
	"\x0fCANCELLED_STATE\x10\x05\x12\x0e\n" +
	"\n" +
	"PAID_STATE\x10\x06*\x8d\x01\n" +
	"\bCategory\x12\x16\n" +
	"\x12UNDEFINED_CATEGORY\x10\x00\x12\x19\n" +
	"\x15TOKENISATION_CATEGORY\x10\x01\x12\x14\n" +
	"\x10LISTING_CATEGORY\x10\x02\x12&\n" +
	"\"PRIMARY_MARKET_SETTLEMENT_CATEGORY\x10\x03\x12\x10\n" +
	"\fAUM_CATEGORY\x10\x04B,Z*github.com/meshtrade/api/go/instrument/feeb\x06proto3"

var (
	file_api_proto_instrument_fee_fee_proto_rawDescOnce sync.Once
	file_api_proto_instrument_fee_fee_proto_rawDescData []byte
)

func file_api_proto_instrument_fee_fee_proto_rawDescGZIP() []byte {
	file_api_proto_instrument_fee_fee_proto_rawDescOnce.Do(func() {
		file_api_proto_instrument_fee_fee_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_api_proto_instrument_fee_fee_proto_rawDesc), len(file_api_proto_instrument_fee_fee_proto_rawDesc)))
	})
	return file_api_proto_instrument_fee_fee_proto_rawDescData
}

var file_api_proto_instrument_fee_fee_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_api_proto_instrument_fee_fee_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_api_proto_instrument_fee_fee_proto_goTypes = []any{
	(State)(0),                    // 0: api.instrument.fee.State
	(Category)(0),                 // 1: api.instrument.fee.Category
	(*Fee)(nil),                   // 2: api.instrument.fee.Fee
	(*ledger.Amount)(nil),         // 3: api.ledger.Amount
	(*timestamppb.Timestamp)(nil), // 4: google.protobuf.Timestamp
	(*Data)(nil),                  // 5: api.instrument.fee.Data
}
var file_api_proto_instrument_fee_fee_proto_depIdxs = []int32{
	0, // 0: api.instrument.fee.Fee.state:type_name -> api.instrument.fee.State
	3, // 1: api.instrument.fee.Fee.amountInclVAT:type_name -> api.ledger.Amount
	3, // 2: api.instrument.fee.Fee.vatAmount:type_name -> api.ledger.Amount
	1, // 3: api.instrument.fee.Fee.category:type_name -> api.instrument.fee.Category
	4, // 4: api.instrument.fee.Fee.paymentDate:type_name -> google.protobuf.Timestamp
	5, // 5: api.instrument.fee.Fee.data:type_name -> api.instrument.fee.Data
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_api_proto_instrument_fee_fee_proto_init() }
func file_api_proto_instrument_fee_fee_proto_init() {
	if File_api_proto_instrument_fee_fee_proto != nil {
		return
	}
	file_api_proto_instrument_fee_data_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_api_proto_instrument_fee_fee_proto_rawDesc), len(file_api_proto_instrument_fee_fee_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_proto_instrument_fee_fee_proto_goTypes,
		DependencyIndexes: file_api_proto_instrument_fee_fee_proto_depIdxs,
		EnumInfos:         file_api_proto_instrument_fee_fee_proto_enumTypes,
		MessageInfos:      file_api_proto_instrument_fee_fee_proto_msgTypes,
	}.Build()
	File_api_proto_instrument_fee_fee_proto = out.File
	file_api_proto_instrument_fee_fee_proto_goTypes = nil
	file_api_proto_instrument_fee_fee_proto_depIdxs = nil
}
