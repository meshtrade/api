// Code generated by protoc-gen-meshgo. DO NOT EDIT.
// source: api/proto/instrument/fee/fee.proto
package fee

import (
	fmt "fmt"
	bson "go.mongodb.org/mongo-driver/bson"
	bsontype "go.mongodb.org/mongo-driver/bson/bsontype"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	time "time"
)

// feeBSONAtTypeName is the annotation used when marshalling a Fee to BSON for mongo db persistence
const feeBSONAtTypeName = "mesh::fee/Fee"

// Ensure that Fee implements the bson.Marshaler interface
var _ bson.Marshaler = &Fee{}

// MarshalBSONValue is called to marshal Fee when it is embedded as a field in another struct.
// This behaviour is overridden to get desired nil behaviour.
func (f *Fee) MarshalBSONValue() (bsontype.Type, []byte, error) {
	// if this Fee is nil then return the bson null type and no data
	if f == nil {
		return bsontype.Null, nil, nil
	}

	// otherwise call the MarshalBSON method to get data and a possible error
	bsonData, err := f.MarshalBSON()

	// then return the bson embedded document type along with the associated data and error
	return bsontype.EmbeddedDocument, bsonData, err
}

// MarshalBSON controls the marshalling of a Fee to BSON for persistence to mongo db
func (f *Fee) MarshalBSON() ([]byte, error) {
	type Alias Fee
	return bson.Marshal(struct {
		AtType      string `bson:"@type"`
		Alias       `bson:"inline"`
		PaymentDate *time.Time
	}{
		AtType: feeBSONAtTypeName,
		Alias:  Alias(*f),
		// convert protobuf time to go native time for better bson marshalled representation
		PaymentDate: func() *time.Time {
			if f.PaymentDate == nil {
				return nil
			} else {
				t := f.PaymentDate.AsTime()
				return &t
			}
		}(),
	})
}

// Ensure that Fee implements the bson.Unmarshaler interface
var _ bson.Unmarshaler = &Fee{}

// MarshalBSON controls the unmarshalling of a Fee from BSON
func (f *Fee) UnmarshalBSON(data []byte) error {
	// prepare marshalled type to unmarshall into
	type Alias Fee
	var marshalled = struct {
		Alias       `bson:"inline"`
		PaymentDate *time.Time
	}{}

	// perform unmarshal
	if err := bson.Unmarshal(data, &marshalled); err != nil {
		return fmt.Errorf("error unmarshalling Fee: %w", err)
	}

	// set alias fields
	*f = Fee(marshalled.Alias)

	// set overridden fields
	if marshalled.PaymentDate == nil {
		f.PaymentDate = nil
	} else {
		f.PaymentDate = timestamppb.New(*marshalled.PaymentDate)
	}

	return nil
}
