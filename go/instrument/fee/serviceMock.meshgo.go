// Code generated by protoc-gen-meshgo. DO NOT EDIT.
// source: api/proto/instrument/fee/service.proto
package fee

import (
	context "context"
	sync "sync"
	testing "testing"
)

// Ensure that MockService implements the Service interface
var _ Service = &MockService{}

// MockService is a mock implementation of the Service interface.
type MockService struct {
	mutex                                 sync.Mutex
	T                                     *testing.T
	GetFunc                               func(t *testing.T, m *MockService, ctx context.Context, request *GetRequest) (*GetResponse, error)
	GetFuncInvocations                    int
	ListFunc                              func(t *testing.T, m *MockService, ctx context.Context, request *ListRequest) (*ListResponse, error)
	ListFuncInvocations                   int
	CalculateMintingFeesFunc              func(t *testing.T, m *MockService, ctx context.Context, request *CalculateMintingFeesRequest) (*CalculateMintingFeesResponse, error)
	CalculateMintingFeesFuncInvocations   int
	CalculateBurningFeesFunc              func(t *testing.T, m *MockService, ctx context.Context, request *CalculateBurningFeesRequest) (*CalculateBurningFeesResponse, error)
	CalculateBurningFeesFuncInvocations   int
	CalculateLifecycleFeesFunc            func(t *testing.T, m *MockService, ctx context.Context, request *CalculateLifecycleFeesRequest) (*CalculateLifecycleFeesResponse, error)
	CalculateLifecycleFeesFuncInvocations int
	FullUpdateFunc                        func(t *testing.T, m *MockService, ctx context.Context, request *FullUpdateRequest) (*FullUpdateResponse, error)
	FullUpdateFuncInvocations             int
}

func (m *MockService) Get(ctx context.Context, request *GetRequest) (*GetResponse, error) {
	m.mutex.Lock()
	m.GetFuncInvocations++
	m.mutex.Unlock()
	if m.GetFunc == nil {
		return nil, nil
	}
	return m.GetFunc(m.T, m, ctx, request)
}

func (m *MockService) List(ctx context.Context, request *ListRequest) (*ListResponse, error) {
	m.mutex.Lock()
	m.ListFuncInvocations++
	m.mutex.Unlock()
	if m.ListFunc == nil {
		return nil, nil
	}
	return m.ListFunc(m.T, m, ctx, request)
}

func (m *MockService) CalculateMintingFees(ctx context.Context, request *CalculateMintingFeesRequest) (*CalculateMintingFeesResponse, error) {
	m.mutex.Lock()
	m.CalculateMintingFeesFuncInvocations++
	m.mutex.Unlock()
	if m.CalculateMintingFeesFunc == nil {
		return nil, nil
	}
	return m.CalculateMintingFeesFunc(m.T, m, ctx, request)
}

func (m *MockService) CalculateBurningFees(ctx context.Context, request *CalculateBurningFeesRequest) (*CalculateBurningFeesResponse, error) {
	m.mutex.Lock()
	m.CalculateBurningFeesFuncInvocations++
	m.mutex.Unlock()
	if m.CalculateBurningFeesFunc == nil {
		return nil, nil
	}
	return m.CalculateBurningFeesFunc(m.T, m, ctx, request)
}

func (m *MockService) CalculateLifecycleFees(ctx context.Context, request *CalculateLifecycleFeesRequest) (*CalculateLifecycleFeesResponse, error) {
	m.mutex.Lock()
	m.CalculateLifecycleFeesFuncInvocations++
	m.mutex.Unlock()
	if m.CalculateLifecycleFeesFunc == nil {
		return nil, nil
	}
	return m.CalculateLifecycleFeesFunc(m.T, m, ctx, request)
}

func (m *MockService) FullUpdate(ctx context.Context, request *FullUpdateRequest) (*FullUpdateResponse, error) {
	m.mutex.Lock()
	m.FullUpdateFuncInvocations++
	m.mutex.Unlock()
	if m.FullUpdateFunc == nil {
		return nil, nil
	}
	return m.FullUpdateFunc(m.T, m, ctx, request)
}
