// Code generated by protoc-gen-meshgo. DO NOT EDIT.
// source: api/proto/instrument/fee/dataPerUnit.proto
package fee

import (
	fmt "fmt"
	bson "go.mongodb.org/mongo-driver/bson"
	bsontype "go.mongodb.org/mongo-driver/bson/bsontype"
)

// perUnitDataBSONAtTypeName is the annotation used when marshalling a PerUnitData to BSON for mongo db persistence
const perUnitDataBSONAtTypeName = "mesh::fee/PerUnitData"

// Ensure that PerUnitData implements the bson.Marshaler interface
var _ bson.Marshaler = &PerUnitData{}

// MarshalBSONValue is called to marshal PerUnitData when it is embedded as a field in another struct.
// This behaviour is overridden to get desired nil behaviour.
func (p *PerUnitData) MarshalBSONValue() (bsontype.Type, []byte, error) {
	// if this PerUnitData is nil then return the bson null type and no data
	if p == nil {
		return bson.TypeNull, nil, nil
	}

	// otherwise call the MarshalBSON method to get data and a possible error
	bsonData, err := p.MarshalBSON()

	// then return the bson embedded document type along with the associated data and error
	return bson.TypeEmbeddedDocument, bsonData, err
}

// MarshalBSON controls the marshalling of a PerUnitData to BSON for persistence to mongo db
func (p *PerUnitData) MarshalBSON() ([]byte, error) {
	type Alias PerUnitData
	return bson.Marshal(struct {
		AtType string `bson:"@type"`
		Alias  `bson:"inline"`
	}{
		AtType: perUnitDataBSONAtTypeName,
		Alias:  Alias(*p),
	})
}

// Ensure that PerUnitData implements the bson.Unmarshaler interface
var _ bson.Unmarshaler = &PerUnitData{}

// MarshalBSON controls the unmarshalling of a PerUnitData from BSON
func (p *PerUnitData) UnmarshalBSON(data []byte) error {
	// prepare marshalled type to unmarshall into
	type Alias PerUnitData
	var marshalled = struct {
		Alias `bson:"inline"`
	}{}

	// perform unmarshal
	if err := bson.Unmarshal(data, &marshalled); err != nil {
		return fmt.Errorf("error unmarshalling PerUnitData: %w", err)
	}

	// set alias fields
	*p = PerUnitData(marshalled.Alias)

	// set overridden fields

	return nil
}
