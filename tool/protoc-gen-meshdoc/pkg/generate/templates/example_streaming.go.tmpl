package main

import (
	"context"
	"io"
	"log"

	{{.ServiceVariable}}v1 "github.com/meshtrade/api/go/{{.Domain}}/{{.ServiceName}}/{{.Version}}"
)

func main() {
	{{if .NeedsContext}}ctx := context.Background()
	{{end}}
	// Default configuration is used and credentials come from MESH_API_CREDENTIALS
	// environment variable or default discovery methods. Zero config required
	// unless you want custom configuration.
	service, err := {{.ServiceVariable}}v1.{{.ServiceConstructor}}()
	if err != nil {
		log.Fatalf("Failed to create service: %v", err)
	}
	defer service.Close()

	{{if .HasRequest}}// Create request with service-specific parameters
	request := &{{.ServiceVariable}}v1.{{.RequestType}}{
		// FIXME: Populate service-specific request fields
	}

	// Call the {{.MethodName}} streaming method
	stream, err := service.{{.MethodName}}({{if .NeedsContext}}ctx, {{end}}request)
	if err != nil {
		log.Fatalf("Failed to initiate stream: %v", err)
	}

	// Consume stream responses
	for {
		{{if .ReturnsEntityType}}{{.ResponseVariable}}, err := stream.Recv(){{else}}response, err := stream.Recv(){{end}}
		if err == io.EOF {
			break  // Stream completed normally
		}
		if err != nil {
			log.Fatalf("Stream error: %v", err)
		}

		// Process each response as it arrives
		log.Printf("Received: %+v", {{if .ReturnsEntityType}}{{.ResponseVariable}}{{else}}response{{end}})
	}

	log.Println("Stream completed successfully"){{else}}// Call the {{.MethodName}} streaming method (no request parameters)
	stream, err := service.{{.MethodName}}({{if .NeedsContext}}ctx{{end}})
	if err != nil {
		log.Fatalf("Failed to initiate stream: %v", err)
	}

	// Consume stream responses
	for {
		{{if .ReturnsEntityType}}{{.ResponseVariable}}, err := stream.Recv(){{else}}response, err := stream.Recv(){{end}}
		if err == io.EOF {
			break  // Stream completed normally
		}
		if err != nil {
			log.Fatalf("Stream error: %v", err)
		}

		// Process each response as it arrives
		log.Printf("Received: %+v", {{if .ReturnsEntityType}}{{.ResponseVariable}}{{else}}response{{end}})
	}

	log.Println("Stream completed successfully"){{end}}
}
