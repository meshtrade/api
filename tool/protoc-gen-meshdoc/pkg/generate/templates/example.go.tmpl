package main

import (
	"context"
	"log"

	{{.ServiceVariable}}v1 "github.com/meshtrade/api/go/{{.Domain}}/{{.ServiceName}}/{{.Version}}"
)

func main() {
	{{if .NeedsContext}}ctx := context.Background()
	{{end}}
	// Default configuration is used and credentials come from MESH_API_CREDENTIALS 
	// environment variable or default discovery methods. Zero config required 
	// unless you want custom configuration.
	service, err := {{.ServiceVariable}}v1.{{.ServiceConstructor}}()
	if err != nil {
		log.Fatalf("Failed to create service: %v", err)
	}
	defer service.Close()

	{{if .HasRequest}}// Create request with service-specific parameters
	request := &{{.ServiceVariable}}v1.{{.RequestType}}{
		// FIXME: Populate service-specific request fields
	}

	// Call the {{.MethodName}} method
	{{if .ReturnsEntityType}}{{.ResponseVariable}}, err := service.{{.MethodName}}({{if .NeedsContext}}ctx, {{end}}request){{else}}response, err := service.{{.MethodName}}({{if .NeedsContext}}ctx, {{end}}request){{end}}
	if err != nil {
		log.Fatalf("{{.MethodName}} failed: %v", err)
	}

	// FIXME: Add relevant response object usage
	log.Printf("{{.MethodName}} successful: %+v", {{if .ReturnsEntityType}}{{.ResponseVariable}}{{else}}response{{end}}){{else}}// Call the {{.MethodName}} method (no request parameters)
	{{if .ReturnsEntityType}}{{.ResponseVariable}}, err := service.{{.MethodName}}({{if .NeedsContext}}ctx{{end}}){{else}}response, err := service.{{.MethodName}}({{if .NeedsContext}}ctx{{end}}){{end}}
	if err != nil {
		log.Fatalf("{{.MethodName}} failed: %v", err)
	}

	// FIXME: Add relevant response object usage
	log.Printf("{{.MethodName}} successful: %+v", {{if .ReturnsEntityType}}{{.ResponseVariable}}{{else}}response{{end}}){{end}}
}