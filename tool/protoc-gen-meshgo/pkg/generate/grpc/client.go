package grpc

import (
	"strings"

	"github.com/meshtrade/api/tool/protoc-gen-meshgo/pkg/generate"
	"github.com/meshtrade/api/tool/protoc-gen-meshgo/pkg/generate/serviceProvider"
	"google.golang.org/protobuf/compiler/protogen"
)

func Client(p *protogen.Plugin, f *protogen.File, svc *protogen.Service) error {
	// generate a new go file for the clean service interface
	g := p.NewGeneratedFile(
		serviceProvider.GenerateFilename(f.Desc.Path(), "GRPCClient"),
		f.GoImportPath,
	)

	// get grpcclient service provider name
	grpcclientServiceProviderName := "GRPCClient" + svc.GoName

	// add header
	g.P("// Code generated by protoc-gen-meshgo. DO NOT EDIT.")
	g.P("// source: ", f.Desc.Path())
	g.P("package ", f.GoPackageName)

	g.P()

	// add compile time interface implementation check
	g.P("// Ensure that ", grpcclientServiceProviderName, " implements the ", svc.GoName, " interface")
	g.P("var _ ", svc.GoName, " = &", grpcclientServiceProviderName, "{}")

	g.P()

	// Start the grpcclient struct
	g.P("// ", grpcclientServiceProviderName, " is a gRPC client implementation of the ", svc.GoName, " interface.")
	g.P("type ", grpcclientServiceProviderName, " struct {")

	// add tracer and grpcClient
	g.P("tracer ", generate.TracingPkg.Ident("Tracer"))
	g.P("grpcClient ", svc.GoName, "Client")

	// end the struct
	g.P("}")

	g.P()

	// write the constructor
	g.P("func New", grpcclientServiceProviderName, "(")
	g.P("tracer ", generate.TracingPkg.Ident("Tracer"), ",")
	g.P("grpcClientConnection *", generate.GRPCPkg.Ident("ClientConn"), ",")
	g.P(") *", grpcclientServiceProviderName, " {")
	g.P("return &", grpcclientServiceProviderName, "{")
	g.P("tracer: tracer,")
	g.P("grpcClient: New", svc.GoName, "Client(grpcClientConnection),")
	g.P("}")
	g.P("}")

	g.P()

	// write the grpcclient service provider receivers
	for i, method := range svc.Methods {
		g.P("func (g *", grpcclientServiceProviderName, ") ", method.GoName, "(ctx ", generate.ContextPkg.Ident("Context"), ", request *", method.Input.GoIdent, ") (*", method.Output.GoIdent, ", error) {")
		g.P("ctx, span := g.tracer.Start(")
		g.P("ctx,")
		g.P(svc.GoName, "ServiceProviderName+\"", method.GoName, "\",")
		g.P(")")
		g.P("defer span.End()")
		g.P()

		g.P("// call given implementation of the adapted service provider interface")
		g.P(strings.ToLower(string(method.GoName[0]))+method.GoName[1:]+"Response, err := g.grpcClient.", method.GoName, "(ctx, request)")
		g.P("if err != nil {")
		g.P(generate.ZeroLogPackage.Ident("Ctx"), "(ctx).Error().Err(err).Msg(\"could not ", method.GoName, "\")")

		g.P("return nil, ", generate.FmtPackage.Ident("Errorf"), "(\"could not ", method.GoName, ": %s\", err)")
		g.P("}")

		g.P()
		g.P("return ", strings.ToLower(string(method.GoName[0]))+method.GoName[1:]+"Response, nil")
		g.P("}")

		if i != len(svc.Methods)-1 {
			g.P()
		}
	}

	return nil
}
