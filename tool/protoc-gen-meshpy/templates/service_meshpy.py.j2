# Code generated by protoc-gen-meshpy. DO NOT EDIT.
# source: {{ proto_file.name }}

"""
{{ service_name }} gRPC service wrapper with authentication, timeouts, and resource management.

This module provides a high-level gRPC service for the {{ service_name }} service that combines
the service interface with resource management capabilities, providing authentication,
timeouts, and proper connection handling.
"""

from datetime import timedelta
from typing import Optional

from meshtrade.common import BaseGRPCClient
{% if package_name == "meshtrade.iam.api_user.v1" -%}
from .api_credentials import find_credentials
{% else -%}
from meshtrade.iam.api_user.v1.api_credentials import find_credentials
{% endif %}

{% for type_name, module in external_types.items() -%}
from .{{ module }} import {{ type_name }}
{% endfor -%}
from .service_options_meshpy import ServiceOptions
{% if service_types -%}
from .{{ proto_base }}_pb2 import (
{% for type in service_types | sort -%}
    {{ type }},
{% endfor -%}
)
{% endif -%}
from .{{ proto_base }}_pb2_grpc import {{ service_name }}Stub


def _create_{{ service_name.lower() }}_stub(channel):
    """Factory function to create {{ service_name }}Stub from gRPC channel."""
    return {{ service_name }}Stub(channel)


class {{ service_name }}(BaseGRPCClient):
    """{{ service_name }} gRPC service with authentication, timeouts, and resource management.

    This service provides a complete implementation of the {{ service_name }} with proper authentication, timeout handling, and automatic resource cleanup.

    Full Service documentation: https://meshtrade.github.io/api/docs/api-reference/{{ doc_url_path }}

    Basic service usage with default SDK Configuration:
    ```python
    service = {{ service_name }}()

    with service:   # `with` ensures proper clean up of underlying connection after use
        response = service.get_api_user(request)
    ```
        
    With default configuration API credentials are searched for using the standard discovery hierarchy:
    
    1. MESH_API_CREDENTIALS environment variable
    
    2. Default credential file location:
    
    - Linux:   `$XDG_CONFIG_HOME/mesh/credentials.json` or fallback to `$HOME/.config/mesh/credentials.json`
    - macOS:   `$HOME/Library/Application Support/mesh/credentials.json`
    - Windows: `C:\\Users\\<user>\\AppData\\Roaming\\mesh\\credentials.json`
    
    For more information on authentication: https://meshtrade.github.io/api/docs/architecture/authentication

    The service may also be configured with custom options:
    ```python
    from .service_options_meshpy import ServiceOptions
    from datetime import timedelta

    options = ServiceOptions(
        url="api.staging.example.com",
        port=443,
        api_key="your-api-key",
        group="groups/your-group-id",
        timeout=timedelta(seconds=60)
    )

    service = {{ service_name }}(options)

    with service: # `with` ensures proper clean up of underlying connection after use
        response = service.get_api_user(request)
    ```

    For more information on service configuration: https://meshtrade.github.io/api/docs/architecture/sdk-configuration
    """

    def __init__(self, options: Optional[ServiceOptions] = None):
        """Construct and initialize the {{ service_name }} service.

        Full Service documentation: https://meshtrade.github.io/api/docs/api-reference/{{ doc_url_path }}

        Args:
            options: Optional ServiceOptions for configuring the service.
                    If None, service is constructed with default configuration.
                    With default configuration API credentials are searched for using the standard discovery hierarchy:
                    
                    1. MESH_API_CREDENTIALS environment variable
                    
                    2. Default credential file location:
                    
                    - Linux:   `$XDG_CONFIG_HOME/mesh/credentials.json` or fallback to `$HOME/.config/mesh/credentials.json`
                    - macOS:   `$HOME/Library/Application Support/mesh/credentials.json`
                    - Windows: `C:\\Users\\<user>\\AppData\\Roaming\\mesh\\credentials.json`      

                    For more information on authentication: https://meshtrade.github.io/api/docs/architecture/authentication

                    For more information on service configuration: https://meshtrade.github.io/api/docs/architecture/sdk-configuration            

        Example:
        ```python
        # construct with default configuration
        service = {{ service_name }}()

        # construct with custom configuration
        options = ServiceOptions(
            url="api.example.com",
            api_key="your-key",
            group="groups/your-group"
        )
        service = {{ service_name }}(options)
        ```
        """
        if options is None:
            options = ServiceOptions()

        # Initialize the base client with all common functionality
        super().__init__(
            service_name="{{ service_name }}",
            stub_factory=_create_{{ service_name.lower() }}_stub,
            find_credentials_func=find_credentials,
            url=options.url,
            port=options.port,
            api_key=options.api_key,
            group=options.group,
            timeout=options.timeout,
            tls=options.tls,
        )

    {% for method in methods %}
    {% if method.server_streaming and not method.client_streaming %}
    def {{ method.snake_name }}(self, request: {{ method.input_type.split('.')[-1] }}, timeout: Optional[timedelta] = None):
        """{{ method.name }} server-side streaming method with authentication and validation.

        Args:
            request: The {{ method.name }} request message
            timeout: Optional timeout override for this call

        Yields:
            {{ method.output_type.split('.')[-1] }}: Stream of response messages

        Raises:
            grpc.RpcError: If the gRPC call fails
            ValueError: If authentication credentials are missing or request validation fails

        Example:
            >>> stream = service.{{ method.snake_name }}(request)
            >>> for response in stream:
            ...     # Process each response
            ...     print(response)
        """
        return self._execute_streaming_method("{{ method.name }}", request, timeout)
    {% else %}
    def {{ method.snake_name }}(self, request: {{ method.input_type.split('.')[-1] }}, timeout: Optional[timedelta] = None) -> {{ method.output_type.split('.')[-1] }}:
        """{{ method.name }} method.

        Args:
            request: The {{ method.name }} request message
            timeout: Optional timeout override for this call

        Returns:
            The {{ method.name }} response message

        Raises:
            grpc.RpcError: If the gRPC call fails
            ValueError: If authentication credentials are missing
        """
        return self._execute_method("{{ method.name }}", request, timeout)
    {% endif %}

    {% endfor %}

# Create aliases to match expected exports
{{ service_name }}GRPCClient = {{ service_name }}
{{ service_name }}GRPCClientInterface = {{ service_name }}
