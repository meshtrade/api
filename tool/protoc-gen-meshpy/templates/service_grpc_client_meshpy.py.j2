# Code generated by protoc-gen-meshpy. DO NOT EDIT.
# source: {{ proto_file.name }}

"""
{{ service_name }} gRPC client wrapper with authentication, timeouts, and resource management.

This module provides a high-level gRPC client for the {{ service_name }} service that combines
the service interface with resource management capabilities, providing authentication,
timeouts, and proper connection handling.
"""

from datetime import timedelta

import grpc

from meshtrade.common import (
    DEFAULT_GRPC_PORT,
    DEFAULT_GRPC_URL,
    GRPCClient,
    create_auth_metadata,
)
{% if package_name == "meshtrade.iam.api_user.v1" -%}
from .api_credentials import api_credentials_from_environment
{% else -%}
from meshtrade.iam.api_user.v1.api_credentials import api_credentials_from_environment
{% endif %}

from .api_user_pb2 import APIUser
from .service_meshpy import {{ service_name }}
from .service_grpc_client_options_meshpy import ClientOptions
from .{{ proto_base }}_pb2 import (
{% for type in imported_types | sort -%}
{% if type != "APIUser" -%}
    {{ type }},
{% endif -%}
{% endfor -%}
)
from .{{ proto_base }}_pb2_grpc import {{ service_name }}Stub


class {{ service_name }}GRPCClientInterface({{ service_name }}, GRPCClient):
    """Interface combining {{ service_name }} functionality with gRPC client resource management.

    This interface defines the contract for gRPC clients that implement the {{ service_name }}
    while also providing proper resource cleanup capabilities.
    """

    pass


class {{ service_name }}GRPCClient({{ service_name }}GRPCClientInterface):
    """{{ service_name }} gRPC client with authentication, timeouts, and resource management.

    This client provides a complete implementation of the {{ service_name }} interface
    over gRPC with proper authentication, timeout handling, and automatic resource cleanup.

    Example:
        Basic usage with default configuration:
        ```python
        client = {{ service_name }}GRPCClient()

        with client:
            response = client.get_api_user(request)
        ```

        Custom configuration:
        ```python
        from .service_grpc_client_options_meshpy import ClientOptions
        from datetime import timedelta

        options = ClientOptions(
            url="api.staging.example.com",
            port=443,
            api_key="your-api-key",
            group="groups/your-group-id",
            timeout=timedelta(seconds=60)
        )

        client = {{ service_name }}GRPCClient(options)

        with client:
            response = client.get_api_user(request)
        ```
    """

    def __init__(self, options: ClientOptions | None = None):
        """Initialize the {{ service_name }} gRPC client.

        Args:
            options: Optional ClientOptions for configuring the client.
                    If None, will use default configuration and attempt to load
                    credentials from environment variables.

        Example:
            ```python
            # Use defaults (credentials from environment)
            client = {{ service_name }}GRPCClient()

            # Custom configuration
            options = ClientOptions(
                url="api.example.com",
                api_key="your-key",
                group="groups/your-group"
            )
            client = {{ service_name }}GRPCClient(options)
            ```
        """
        if options is None:
            options = ClientOptions()

        # Store configuration
        self._options = options

        # Initialize gRPC client components
        self._channel: grpc.Channel | None = None
        self._stub: {{ service_name }}Stub | None = None

        # Load credentials from options or environment
        if options.api_key:
            self._api_key = options.api_key
            self._group = options.group
        else:
            # Try to load from environment if not provided
            creds = api_credentials_from_environment()
            self._api_key = creds.api_key if creds else None
            self._group = creds.group if creds else None

        # Build target URL
        url = options.url or DEFAULT_GRPC_URL
        port = options.port or DEFAULT_GRPC_PORT
        self._target = f"{url}:{port}"

    def __enter__(self):
        """Enter the runtime context for the gRPC client."""
        self._ensure_connected()
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        """Exit the runtime context and cleanup resources."""
        self.close()

    def _ensure_connected(self):
        """Ensure the gRPC channel and stub are properly initialized."""
        if self._channel is not None:
            return

        # Create appropriate credentials based on TLS setting
        if self._options.tls:
            credentials = grpc.ssl_channel_credentials()
            self._channel = grpc.secure_channel(self._target, credentials)
        else:
            self._channel = grpc.insecure_channel(self._target)

        # Create the stub
        self._stub = {{ service_name }}Stub(self._channel)

    def close(self):
        """Close the gRPC channel and cleanup resources."""
        if self._channel is not None:
            self._channel.close()
            self._channel = None
            self._stub = None

    def _call_with_auth(self, method_name: str, request, timeout: timedelta | None = None):
        """Make an authenticated gRPC call with proper error handling.

        Args:
            method_name: The name of the gRPC stub method to call
            request: The request message
            timeout: Optional timeout override

        Returns:
            The response message

        Raises:
            grpc.RpcError: If the gRPC call fails
            ValueError: If authentication credentials are missing
        """
        self._ensure_connected()

        if not self._api_key or not self._group:
            raise ValueError(
                "API key and group are required for authentication. "
                "Provide them via ClientOptions or set MESH_API_CREDENTIALS environment variable."
            )

        if self._stub is None:
            raise RuntimeError("gRPC stub not initialized. Call _ensure_connected() first.")

        # Get the method from the stub
        method = getattr(self._stub, method_name)

        # Create authentication metadata
        metadata = create_auth_metadata(self._api_key, self._group)

        # Use provided timeout or default from options
        call_timeout = timeout or self._options.timeout
        timeout_seconds = call_timeout.total_seconds() if call_timeout else None

        # Make the authenticated call
        return method(request, metadata=metadata, timeout=timeout_seconds)

    def group(self) -> str:
        """Get the group resource name used by this client.
        
        Returns:
            The group resource name in format groups/{group_id}
            
        Raises:
            ValueError: If no group is configured
        """
        if not self._group:
            raise ValueError(
                "Group not configured. Provide via ClientOptions or set MESH_API_CREDENTIALS environment variable."
            )
        return self._group

    {% for method in methods %}
    def {{ method.snake_name }}(self, request: {{ method.input_type.split('.')[-1] }}, timeout: timedelta | None = None) -> {{ method.output_type.split('.')[-1] }}:
        """{{ method.name }} method.

        Args:
            request: The {{ method.name }} request message
            timeout: Optional timeout override for this call

        Returns:
            The {{ method.name }} response message

        Raises:
            grpc.RpcError: If the gRPC call fails
            ValueError: If authentication credentials are missing
        """
        return self._call_with_auth("{{ method.name }}", request, timeout)

    {% endfor %}
