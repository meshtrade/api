#!/usr/bin/env python3
"""
protoc-gen-meshpy: Python gRPC client generator for Meshtrade services

This protoc plugin generates Python gRPC clients with the _meshpy.py suffix.
"""

import sys
import ast
from google.protobuf.compiler import plugin_pb2 as plugin
from google.protobuf import descriptor_pb2 as descriptor


def validate_python_syntax(code: str, filename: str) -> None:
    """Validate Python code syntax using ast.parse()"""
    try:
        ast.parse(code)
    except SyntaxError as e:
        raise SyntaxError(f"Generated Python code has syntax error in {filename}: {e}")


def generate_hello_world_file(service_name: str, package_name: str, file_type: str) -> str:
    """Generate a minimal Python file with Hello World comment"""
    code = f'''# Code generated by protoc-gen-meshpy. DO NOT EDIT.
# Hello World from protoc-gen-meshpy!
# Service: {service_name}
# Package: {package_name}
# File type: {file_type}

"""
Generated {file_type} for {service_name} service
"""

# This is a minimal implementation for testing
pass
'''
    
    # Validate syntax before returning
    validate_python_syntax(code, f"{file_type}_meshpy.py")
    return code


def process_service(proto_file, service):
    """Process a single service and generate files for it"""
    service_name = service.name
    package_name = proto_file.package
    
    files = []
    
    # Generate the three main files with _meshpy.py suffix
    file_types = [
        ("service", "Abstract service interface"),
        ("service_grpc_client_options", "Configuration options"),
        ("service_grpc_client", "Main client implementation")
    ]
    
    for file_type, description in file_types:
        # Convert package name to path (e.g., "meshtrade.iam.api_user.v1" -> "meshtrade/iam/api_user/v1")
        package_path = package_name.replace('.', '/')
        filename = f"{package_path}/{file_type}_meshpy.py"
        content = generate_hello_world_file(service_name, package_name, description)
        
        files.append(plugin.CodeGeneratorResponse.File(
            name=filename,
            content=content
        ))
    
    return files


def main():
    """Main entry point for the protoc plugin"""
    # Read the CodeGeneratorRequest from stdin
    request_data = sys.stdin.buffer.read()
    request = plugin.CodeGeneratorRequest()
    request.ParseFromString(request_data)
    
    # Create response
    response = plugin.CodeGeneratorResponse()
    
    try:
        # Process each proto file that contains services
        for proto_file in request.proto_file:
            if len(proto_file.service) > 0:
                # For now, only process files with exactly one service (matching Go generator)
                if len(proto_file.service) > 1:
                    response.error = f"File '{proto_file.name}' contains more than 1 service"
                    break
                
                service = proto_file.service[0]
                generated_files = process_service(proto_file, service)
                response.file.extend(generated_files)
        
        response.supported_features = plugin.CodeGeneratorResponse.FEATURE_PROTO3_OPTIONAL
        
    except Exception as e:
        response.error = f"Error in protoc-gen-meshpy: {e}"
    
    # Write response to stdout
    sys.stdout.buffer.write(response.SerializeToString())


if __name__ == "__main__":
    main()
