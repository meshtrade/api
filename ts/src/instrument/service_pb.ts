// @generated by protoc-gen-es v2.5.1 with parameter "target=ts"
// @generated from file instrument/service.proto (package api.instrument, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv2";
import { fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv2";
import type { Amount } from "../ledger/amount_pb";
import { file_ledger_amount } from "../ledger/amount_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file instrument/service.proto.
 */
export const file_instrument_service: GenFile = /*@__PURE__*/
  fileDesc("ChhpbnN0cnVtZW50L3NlcnZpY2UucHJvdG8SDmFwaS5pbnN0cnVtZW50Im0KC01pbnRSZXF1ZXN0EiIKBmFtb3VudBgBIAEoCzISLmFwaS5sZWRnZXIuQW1vdW50EhgKEGZlZUFjY291bnROdW1iZXIYAiABKAkSIAoYZGVzdGluYXRpb25BY2NvdW50TnVtYmVyGAMgASgJIiUKDE1pbnRSZXNwb25zZRIVCg10cmFuc2FjdGlvbklEGAEgASgJImgKC0J1cm5SZXF1ZXN0EiIKBmFtb3VudBgBIAEoCzISLmFwaS5sZWRnZXIuQW1vdW50EhgKEGZlZUFjY291bnROdW1iZXIYAiABKAkSGwoTc291cmNlQWNjb3VudE51bWJlchgDIAEoCSIlCgxCdXJuUmVzcG9uc2USFQoNdHJhbnNhY3Rpb25JRBgBIAEoCTKPAQoHU2VydmljZRJBCgRNaW50EhsuYXBpLmluc3RydW1lbnQuTWludFJlcXVlc3QaHC5hcGkuaW5zdHJ1bWVudC5NaW50UmVzcG9uc2USQQoEQnVybhIbLmFwaS5pbnN0cnVtZW50LkJ1cm5SZXF1ZXN0GhwuYXBpLmluc3RydW1lbnQuQnVyblJlc3BvbnNlQihaJmdpdGh1Yi5jb20vbWVzaHRyYWRlL2FwaS9nby9pbnN0cnVtZW50YgZwcm90bzM", [file_ledger_amount]);

/**
 *
 * MintRequest is Mint method request on the Instrument Service.
 *
 * @generated from message api.instrument.MintRequest
 */
export type MintRequest = Message<"api.instrument.MintRequest"> & {
  /**
   *
   * Amount is the amount to be minted.
   *
   * @generated from field: api.ledger.Amount amount = 1;
   */
  amount?: Amount;

  /**
   *
   * FeeAccountNumber refers to the account from which fees are paid.
   *
   * @generated from field: string feeAccountNumber = 2;
   */
  feeAccountNumber: string;

  /**
   *
   * DestinationAccountNumber refers to the account for which instrument tokens are minted. 
   *
   * @generated from field: string destinationAccountNumber = 3;
   */
  destinationAccountNumber: string;
};

/**
 * Describes the message api.instrument.MintRequest.
 * Use `create(MintRequestSchema)` to create a new message.
 */
export const MintRequestSchema: GenMessage<MintRequest> = /*@__PURE__*/
  messageDesc(file_instrument_service, 0);

/**
 *
 * MintResponse is Mint method response on the Instrument Service.
 *
 * @generated from message api.instrument.MintResponse
 */
export type MintResponse = Message<"api.instrument.MintResponse"> & {
  /**
   *
   * TransactionID refers to the mint transaction. 
   *
   * @generated from field: string transactionID = 1;
   */
  transactionID: string;
};

/**
 * Describes the message api.instrument.MintResponse.
 * Use `create(MintResponseSchema)` to create a new message.
 */
export const MintResponseSchema: GenMessage<MintResponse> = /*@__PURE__*/
  messageDesc(file_instrument_service, 1);

/**
 *
 * BurnRequest is Burn method request on the Instrument Service.
 *
 * @generated from message api.instrument.BurnRequest
 */
export type BurnRequest = Message<"api.instrument.BurnRequest"> & {
  /**
   *
   * Amount is the amount to be burned.
   *
   * @generated from field: api.ledger.Amount amount = 1;
   */
  amount?: Amount;

  /**
   *
   * FeeAccountNumber refers to the account from which fees are paid.
   *
   * @generated from field: string feeAccountNumber = 2;
   */
  feeAccountNumber: string;

  /**
   *
   * SourceAccountNumber refers to the account from which instrument tokens are burned. 
   *
   * @generated from field: string sourceAccountNumber = 3;
   */
  sourceAccountNumber: string;
};

/**
 * Describes the message api.instrument.BurnRequest.
 * Use `create(BurnRequestSchema)` to create a new message.
 */
export const BurnRequestSchema: GenMessage<BurnRequest> = /*@__PURE__*/
  messageDesc(file_instrument_service, 2);

/**
 *
 * BurnResponse is Burn method response on the Instrument Service.
 *
 * @generated from message api.instrument.BurnResponse
 */
export type BurnResponse = Message<"api.instrument.BurnResponse"> & {
  /**
   *
   * TransactionID refers to the burn transaction. 
   *
   * @generated from field: string transactionID = 1;
   */
  transactionID: string;
};

/**
 * Describes the message api.instrument.BurnResponse.
 * Use `create(BurnResponseSchema)` to create a new message.
 */
export const BurnResponseSchema: GenMessage<BurnResponse> = /*@__PURE__*/
  messageDesc(file_instrument_service, 3);

/**
 *
 * Service is the Instrument Service.
 *
 * @generated from service api.instrument.Service
 */
export const Service: GenService<{
  /**
   * @generated from rpc api.instrument.Service.Mint
   */
  mint: {
    methodKind: "unary";
    input: typeof MintRequestSchema;
    output: typeof MintResponseSchema;
  },
  /**
   * @generated from rpc api.instrument.Service.Burn
   */
  burn: {
    methodKind: "unary";
    input: typeof BurnRequestSchema;
    output: typeof BurnResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_instrument_service, 0);

