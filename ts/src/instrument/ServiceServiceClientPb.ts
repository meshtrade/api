/**
 * @fileoverview gRPC-Web generated client stub for instrument
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v5.28.0
// source: instrument/service.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as instrument_service_pb from '../instrument/service_pb'; // proto import: "instrument/service.proto"


export class ServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorMint = new grpcWeb.MethodDescriptor(
    '/instrument.Service/Mint',
    grpcWeb.MethodType.UNARY,
    instrument_service_pb.MintRequest,
    instrument_service_pb.MintResponse,
    (request: instrument_service_pb.MintRequest) => {
      return request.serializeBinary();
    },
    instrument_service_pb.MintResponse.deserializeBinary
  );

  mint(
    request: instrument_service_pb.MintRequest,
    metadata?: grpcWeb.Metadata | null): Promise<instrument_service_pb.MintResponse>;

  mint(
    request: instrument_service_pb.MintRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: instrument_service_pb.MintResponse) => void): grpcWeb.ClientReadableStream<instrument_service_pb.MintResponse>;

  mint(
    request: instrument_service_pb.MintRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: instrument_service_pb.MintResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/instrument.Service/Mint',
        request,
        metadata || {},
        this.methodDescriptorMint,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/instrument.Service/Mint',
    request,
    metadata || {},
    this.methodDescriptorMint);
  }

  methodDescriptorBurn = new grpcWeb.MethodDescriptor(
    '/instrument.Service/Burn',
    grpcWeb.MethodType.UNARY,
    instrument_service_pb.BurnRequest,
    instrument_service_pb.BurnResponse,
    (request: instrument_service_pb.BurnRequest) => {
      return request.serializeBinary();
    },
    instrument_service_pb.BurnResponse.deserializeBinary
  );

  burn(
    request: instrument_service_pb.BurnRequest,
    metadata?: grpcWeb.Metadata | null): Promise<instrument_service_pb.BurnResponse>;

  burn(
    request: instrument_service_pb.BurnRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: instrument_service_pb.BurnResponse) => void): grpcWeb.ClientReadableStream<instrument_service_pb.BurnResponse>;

  burn(
    request: instrument_service_pb.BurnRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: instrument_service_pb.BurnResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/instrument.Service/Burn',
        request,
        metadata || {},
        this.methodDescriptorBurn,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/instrument.Service/Burn',
    request,
    metadata || {},
    this.methodDescriptorBurn);
  }

}

